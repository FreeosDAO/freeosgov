{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Freeos Governance }Freeos Governance}
{\comment Generated by doxygen 1.9.5.}
{\creatim \yr2022\mo9\dy27\hr23\min8\sec26}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Freeos Governance}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Tue Sep 27 2022 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
freeosgov{\tc \v freeosgov}\par \pard\plain 
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Freeos Governance Contract \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Module Index\par \pard\plain 
{\tc \v Module Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Modules\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all modules:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Claiming\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Configuration\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Core Functions\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Identity\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Points\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Ratify\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Survey\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Vote\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b eosio} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b eosiosystem} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b freedao} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
contract
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
eosio::eosioproton\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
freedao::freebi_account\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
kyc_prov\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b eosio::eosioproton} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b freedao::freebi_account} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b kyc_prov} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b claim.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b config.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b constants.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b eosio.proton.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b freeosgov.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b freeosgov.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b identity.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b maintain.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b points.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ratify.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b survey.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b tables.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b vote.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Module Documentation{\tc \v Module Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Claiming\par \pard\plain 
{\tc\tcl2 \v Claiming}
{\xe \v Claiming}
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::claim} ({\b name} user)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These Actions and functions are related to the weekly claim of each participant. \par
}{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v claim\:Claiming}
{\xe \v Claiming\:claim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::claim ({\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action checks that the user has completed the required number of surveys, votes and ratifications, and if so, it mints the appropriate number of POINTs and transfers them to the user's account\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user who is claiming \cell }
{\row }
}
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Configuration\par \pard\plain 
{\tc\tcl2 \v Configuration}
{\xe \v Configuration}
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b freedao::get_parameter} ({\b name} parameter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b freedao::get_iparameter} ({\b name} parameter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::get_dparameter} ({\b name} parameter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::paramupsert} ({\b name} paramname, std::string {\b value})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::paramerase} ({\b name} paramname)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::dparamupsert} ({\b name} paramname, double {\b value})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::dparamerase} ({\b name} paramname)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::transfadd} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::transferase} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::minteradd} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::mintererase} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::burneradd} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::burnererase} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::currentrate} (double price)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::targetrate} (double price)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::currupsert} (symbol symbol, {\b name} {\b contract})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::currsetrate} (symbol symbol, double {\b usdrate})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::currerase} (symbol symbol)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These Actions and functions are related to configuring the dApp. \par
}{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v burneradd\:Configuration}
{\xe \v Configuration\:burneradd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::burneradd ({\b name}  {\i account})}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action adds an account to the burners table: people who can burn (retire) POINT tokens\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i account} \cell }{The account that will be added to the burners table. \cell }
{\row }
}
}}
{\xe \v burnererase\:Configuration}
{\xe \v Configuration\:burnererase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::burnererase ({\b name}  {\i account})}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action deletes an account from the burners table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i account} \cell }{the account to be removed from the burners table \cell }
{\row }
}
}}
{\xe \v currentrate\:Configuration}
{\xe \v Configuration\:currentrate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::currentrate (double  {\i price})}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action sets the current FREEOS usd price in the exchangerate table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Must be run under the authority of the contract or the account defined by the 'exchangeacc' parameter\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i double} \cell }{price The current price of the token which must have a positive value \cell }
{\row }
}
}}
{\xe \v currerase\:Configuration}
{\xe \v Configuration\:currerase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::currerase (symbol  {\i symbol})}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action erases a token currency from the currencies table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i symbol} \cell }{The symbol of the currency to be erased. \cell }
{\row }
}
}}
{\xe \v currsetrate\:Configuration}
{\xe \v Configuration\:currsetrate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::currsetrate (symbol  {\i symbol}, double  {\i usdrate})}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action sets the USD rate for a given token currency\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Must be run under the authority of the contract or the account defined by the 'exchangeacc' parameter\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i symbol} \cell }{the symbol of the currency to set the rate for \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i usdrate} \cell }{The USD rate of the currency. \cell }
{\row }
}
}}
{\xe \v currupsert\:Configuration}
{\xe \v Configuration\:currupsert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::currupsert (symbol  {\i symbol}, {\b name}  {\i contract})}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action takes a symbol and a contract name as arguments, and then either creates a new currency entry in the currencies table or updates an existing one\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i symbol} \cell }{The symbol of the currency you want to add. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i contract} \cell }{The contract that manages the token ledger. \cell }
{\row }
}
}}
{\xe \v dparamerase\:Configuration}
{\xe \v Configuration\:dparamerase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::dparamerase ({\b name}  {\i paramname})}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action deletes a double parameter from the dparameters table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i paramname} \cell }{The name of the parameter to be deleted. \cell }
{\row }
}
}}
{\xe \v dparamupsert\:Configuration}
{\xe \v Configuration\:dparamupsert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::dparamupsert ({\b name}  {\i paramname}, double  {\i dvalue})}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action either inserts a new double parameter into the table or updates an existing double parameter in the table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i paramname} \cell }{the name of the parameter in the dparameters table \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i the} \cell }{double value of the parameter \cell }
{\row }
}
}}
{\xe \v get_dparameter\:Configuration}
{\xe \v Configuration\:get_dparameter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freeosgov::get_dparameter ({\b name}  {\i paramname})}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
It gets the double value of a parameter from the dparameters (double parameters) table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i paramname} \cell }{The name of the parameter record to get from the dparameters table.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The double value of the parameter. \par
}}}}
{\xe \v get_iparameter\:Configuration}
{\xe \v Configuration\:get_iparameter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int freeosgov::get_iparameter ({\b name}  {\i paramname})}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
It gets the integer value of a parameter from the parameters table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i paramname} \cell }{The name of the parameter record to get from the parameters table.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The integer value of the parameter. \par
}}}}
{\xe \v get_parameter\:Configuration}
{\xe \v Configuration\:get_parameter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string freeosgov::get_parameter ({\b name}  {\i paramname})}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
It returns the string value of a parameter from the parameters table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i paramname} \cell }{The name of the parameter record to retrieve from the parameters table.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The string value of the parameter. \par
}}}}
{\xe \v minteradd\:Configuration}
{\xe \v Configuration\:minteradd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::minteradd ({\b name}  {\i account})}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action adds a new account to the minters table: list of accounts that can issue POINT tokens.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i account} \cell }{The account that will be able to mint (issue) tokens. \cell }
{\row }
}
}}
{\xe \v mintererase\:Configuration}
{\xe \v Configuration\:mintererase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::mintererase ({\b name}  {\i account})}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action removes an account from the minters table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i account} \cell }{the account to be removed from the minters table \cell }
{\row }
}
}}
{\xe \v paramerase\:Configuration}
{\xe \v Configuration\:paramerase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::paramerase ({\b name}  {\i paramname})}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action deletes a parameter from the parameters table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i paramname} \cell }{The name of the parameter to be deleted. \cell }
{\row }
}
}}
{\xe \v paramupsert\:Configuration}
{\xe \v Configuration\:paramupsert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::paramupsert ({\b name}  {\i paramname}, std::string  {\i value})}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action takes a parameter name and a value, and either inserts the parameter into the parameters table if it doesn't exist, or updates the parameter if it does exist\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i paramname} \cell }{The name of the parameter. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{The string value of the parameter. \cell }
{\row }
}
}}
{\xe \v targetrate\:Configuration}
{\xe \v Configuration\:targetrate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::targetrate (double  {\i exchangerate})}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action sets the target FREEOS usd price in the exchangerate table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Precondition\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Must be run under the authority of the contract\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i double} \cell }{price The target price of the token which must have a positive value \cell }
{\row }
}
}}
{\xe \v transfadd\:Configuration}
{\xe \v Configuration\:transfadd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::transfadd ({\b name}  {\i account})}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action adds an account to the transferers table: list of accounts that can transfer (allocate) POINT tokens\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i account} \cell }{The account that will be able to transfer POINT tokens. \cell }
{\row }
}
}}
{\xe \v transferase\:Configuration}
{\xe \v Configuration\:transferase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::transferase ({\b name}  {\i account})}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action removes an account from the transferers table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i account} \cell }{the account to be removed from the table \cell }
{\row }
}
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Core Functions\par \pard\plain 
{\tc\tcl2 \v Core Functions}
{\xe \v Core Functions}
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::version} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::check_master_switch} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::init} (time_point iterations_start, double {\b issuance_rate}, double mint_fee_percent_freeos, double {\b mint_fee_percent_xpr}, double {\b mint_fee_percent_xusdc}, double {\b locking_threshold}, bool {\b pool})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::is_action_period} (string action)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::current_iteration} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::tick} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::get_locked_proportion} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::update_unlock_percentage} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::trigger_new_iteration} (uint32_t new_iteration)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These Actions and functions are related to core functionality. \par
}{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v check_master_switch\:Core Functions}
{\xe \v Core Functions\:check_master_switch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freedao::freeosgov::check_master_switch ()}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function checks if the master switch (parameter: masterswitch) is on (set to "1") or off. The masterswitch parameter is checked by all user-initiated actions. In effect this can be used to prohibit user activity in the event of a serious problem.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A boolean value. \par
}}}}
{\xe \v current_iteration\:Core Functions}
{\xe \v Core Functions\:current_iteration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::freeosgov::current_iteration ()}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The function returns the current iteration number\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The current iteration number. \par
}}}}
{\xe \v get_locked_proportion\:Core Functions}
{\xe \v Core Functions\:get_locked_proportion}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::freeosgov::get_locked_proportion ()}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function returns the double proportion of the total supply that should be locked, based on the current and target exchange rates in the exchangerate table. For example, a target rate of $2 and a current rate of $1.5 returns a lock proportion = 0.25. The proportion is capped at 0.9\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The proportion of the amount of tokens that will be locked. \par
}}}}
{\xe \v init\:Core Functions}
{\xe \v Core Functions\:init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freedao::freeosgov::init (time_point  {\i iterations_start}, double  {\i issuance_rate}, double  {\i mint_fee_percent_freeos}, double  {\i mint_fee_percent_xpr}, double  {\i mint_fee_percent_xusdc}, double  {\i locking_threshold}, bool  {\i pool})}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action initializes the system by creating the system record, the reward record for iteration 0, and the survey, vote and ratify records if they don't already exist\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i iterations_start} \cell }{the time at which the first iteration will start \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i issuance_rate} \cell }{the amount of points to be issued per iteration \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mint_fee_percent_freeos} \cell }{the percentage of the issuance that goes to the freeos.io team \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mint_fee_percent_xpr} \cell }{the percentage of the issuance that goes to the XPR pool \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mint_fee_percent_xusdc} \cell }{The percentage of the issuance that goes to the XUSDC pool. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i locking_threshold} \cell }{the minimum percentage of a user's total points that must be locked in order to participate in the vote \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pool} \cell }{true if the rewards are to be distributed to the pool, false if they are to be burned \cell }
{\row }
}
}}
{\xe \v is_action_period\:Core Functions}
{\xe \v Core Functions\:is_action_period}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freedao::freeosgov::is_action_period (string  {\i action})}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If the current time is between the start and end of the action period, return true\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i action} \cell }{the name of the activity, i.e. "survey", "vote" or "ratify"\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A boolean value indicating whether the activity period is current \par
}}}}
{\xe \v tick\:Core Functions}
{\xe \v Core Functions\:tick}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freedao::freeosgov::tick ()}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\f2 {\b tick()}}  function is called every time a user runs an action. It checks that the system is operational (i.e. that the {\f2 masterswitch}  parameter is set to {\f2 1} ). If the iteration has changed, the {\b trigger_new_iteration()} function is called to perform app housekeeping operations \par
}}
{\xe \v trigger_new_iteration\:Core Functions}
{\xe \v Core Functions\:trigger_new_iteration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freedao::freeosgov::trigger_new_iteration (uint32_t  {\i new_iteration})}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function performs various housekeeping activities at the switchover to a new iteration. It updates the system record with the new iteration, updates the locking threshold, calculates the issuance for the iteration, updates the rewards record, updates the exchange rate record, deletes old rewards records, and resets the survey, vote and ratify records\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i new_iteration} \cell }{the iteration number of the new iteration \cell }
{\row }
}
}}
{\xe \v update_unlock_percentage\:Core Functions}
{\xe \v Core Functions\:update_unlock_percentage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freedao::freeosgov::update_unlock_percentage ()}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If the exchange rate is favourable, i.e current rate > target rate (good times), increase the unlock percentage. If the exchange rate is unfavourable (bad times), decrease the unlock percentage.\par
The rate of unlock percentage increases in good times according to a Fibonacci sequence, i.e. 1%, 2%, 3%, 5%, etc The unlock percentage is capped at 21%.\par
Going into 'bad times' resets the unlock percentage to 0.\par
"failsafe" unlocking applies in bad times. Every so many weeks, users can unlock 15%. The interval is determined by parameter: failsafefreq \par
}}
{\xe \v version\:Core Functions}
{\xe \v Core Functions\:version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freedao::freeosgov::version ()}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
version action.\par
Prints the version of this contract.\par
Action prints out the version of the contract, the accounts that are used for the freeos tokens, freebi tokens, and the freeos divide account, and the current iteration \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Identity\par \pard\plain 
{\tc\tcl2 \v Identity}
{\xe \v Identity}
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b get_account_type} (name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::has_nft} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::user_last_active_iteration} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::is_user_alive} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::calculate_user_cls_addition} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::reguser} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::reregister} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::is_registered} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::is_user_verified} ({\b name} user)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These Actions and functions are related to the personal attributes of each participant. \par
}{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v calculate_user_cls_addition\:Identity}
{\xe \v Identity\:calculate_user_cls_addition}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freeosgov::calculate_user_cls_addition ()}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function calculates the amount by which the Conditionally Limited Supply (CLS) will be increased on a user registration\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
asset: The number of POINTs to add to the CLS \par
}}}}
{\xe \v get_account_type\:Identity}
{\xe \v Identity\:get_account_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string get_account_type (name  {\i user})}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function checks the user's verification status and returns a string indicating the user's account type, as follows: "d" indicates an account created via the Proton wallet, "e" indicates an account created programmatically, i.e. not via a Proton process "v" indicates that the user has completed the Proton KYC process.\par
The above is determined by examining the user entry (if it exists) in the eosio.proton::usersinfo table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user we are checking\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The account type of the user. \par
}}}}
{\xe \v has_nft\:Identity}
{\xe \v Identity\:has_nft}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freeosgov::has_nft ({\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function checks the {\f2 nft_table}  in the {\f2 dividend}  contract to see if the user has an active (unlocked) NFT\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A boolean value indicating whether the user has an active NFT \par
}}}}
{\xe \v is_registered\:Identity}
{\xe \v Identity\:is_registered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freeosgov::is_registered ({\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function checks if the user is registered in the participants table\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{The account name of the user to check.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A boolean value. \par
}}}}
{\xe \v is_user_alive\:Identity}
{\xe \v Identity\:is_user_alive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freeosgov::is_user_alive ({\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If the current iteration is less than or equal to the user's last active iteration, then the user is alive\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the user's account name\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A boolean value \par
}}}}
{\xe \v is_user_verified\:Identity}
{\xe \v Identity\:is_user_verified}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freeosgov::is_user_verified ({\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If the user is a verified user, or if the user has an NFT, then the user is verified\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A boolean value. \par
}}}}
{\xe \v reguser\:Identity}
{\xe \v Identity\:reguser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::reguser ({\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\f2 reguser}  action is called by a user to register with the Freeos system.\par
The function:{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab creates an appropriately populated record in the participants table,\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
2.\tab creates and populates the mff (mint-fee-free) record with the user's POINTs balance,\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
3.\tab updates the CLS with a contribution for the user\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the user's account name \cell }
{\row }
}
}}
{\xe \v reregister\:Identity}
{\xe \v Identity\:reregister}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::reregister ({\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The reregister function is called by a user to update their account_type in their participant record\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user who is reregistering \cell }
{\row }
}
}}
{\xe \v user_last_active_iteration\:Identity}
{\xe \v Identity\:user_last_active_iteration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freeosgov::user_last_active_iteration ({\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function returns the iteration number after which the user will be deactivated\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the user account name\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The last iteration that the user is active. \par
}}}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Points\par \pard\plain 
{\tc\tcl2 \v Points}
{\xe \v Points}
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::create} (const {\b name} &{\b issuer}, const asset &maximum_supply)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::issue} (const {\b name} &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::retire} (const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::allocate} (const {\b name} &from, const {\b name} &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::unlock} (const {\b name} &user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::mint} (const {\b name} &minter, const {\b name} &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::transfer} (const {\b name} &from, const {\b name} &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::sub_balance} (const {\b name} &owner, const asset &{\b value})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::add_balance} (const {\b name} &owner, const asset &{\b value}, const {\b name} &ram_payer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::mintfreebi} (const {\b name} &owner, const asset &quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::calculate_mint_fee} ({\b name} &user, asset &mint_quantity, symbol mint_fee_currency)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::refund_mintfee} ({\b name} user, symbol mint_fee_currency)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::process_mint_fee} ({\b name} user, asset mint_quantity, symbol mint_fee_currency)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::adjust_balances_from_points} (const {\b name} user, const asset &input_quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::adjust_balances_from_freebi} (const {\b name} user, const asset &input_quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::mintfreeos} ({\b name} user, const asset &input_quantity, symbol &mint_fee_currency, bool use_airclaim_points)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::withdraw} (const {\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::record_deposit} (uint64_t iteration_number, asset amount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::depositclear} (uint64_t iteration_number)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::mintfee} ({\b name} user, {\b name} to, asset quantity, std::string memo)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::burn}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These Actions and functions are related to managing the POINTs ledger each participant. \par
}{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v add_balance\:Points}
{\xe \v Points\:add_balance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::add_balance (const {\b name} &  {\i owner}, const asset &  {\i value}, const {\b name} &  {\i ram_payer})}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
It adds the value of the asset to the balance of the owner\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i owner} \cell }{The account to which the tokens are being transferred. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{The amount of tokens to be transferred. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ram_payer} \cell }{The account that will pay for the RAM used by the new account. \cell }
{\row }
}
}}
{\xe \v adjust_balances_from_freebi\:Points}
{\xe \v Points\:adjust_balances_from_freebi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::adjust_balances_from_freebi (const {\b name}  {\i user}, const asset &  {\i input_quantity})}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function adjusts balances when minting FREEOS from POINTs. It takes a user and an asset, and it decreases the user's balance of the asset and burns the asset.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user who is redeeming points \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i input_quantity} \cell }{the amount of POINTs the user is trying to convert \cell }
{\row }
}
}}
{\xe \v adjust_balances_from_points\:Points}
{\xe \v Points\:adjust_balances_from_points}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::adjust_balances_from_points (const {\b name}  {\i user}, const asset &  {\i input_quantity})}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function adjusts balances when minting FREEOS from POINTs. It takes a user and an asset, and it decreases the user's balance of the asset and burns the asset.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user who is redeeming points \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i input_quantity} \cell }{the amount of POINTs the user is trying to convert \cell }
{\row }
}
}}
{\xe \v allocate\:Points}
{\xe \v Points\:allocate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::allocate (const {\b name} &  {\i from}, const {\b name} &  {\i to}, const asset &  {\i quantity}, const string &  {\i memo})}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action checks if the {\f2 from}  account is in the {\f2 transferers}  table, and if it is, it calls the {\f2 transfer}  function. It is therefore a wrapper for the transfer function that applies a whitelist of which accounts are permitted to transfer POINTs.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i from} \cell }{The account that is sending the tokens. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i to} \cell }{The account that will receive the tokens. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{The amount of tokens to be allocated. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i memo} \cell }{The memo is a string that can be used to store additional information about the transfer. \cell }
{\row }
}
}}
{\xe \v calculate_mint_fee\:Points}
{\xe \v Points\:calculate_mint_fee}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freeosgov::calculate_mint_fee ({\b name} &  {\i user}, asset &  {\i mint_quantity}, symbol  {\i mint_fee_currency})}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The function calculates the mint fee in the currency that the user is paying with.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user who is minting \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mint_quantity} \cell }{the amount of tokens to be exchanged for FREEOS \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mint_fee_currency} \cell }{symbol: the currency the user is paying the mint fee with \cell }
{\row }
}
}}
{\xe \v create\:Points}
{\xe \v Points\:create}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::create (const {\b name} &  {\i issuer}, const asset &  {\i maximum_supply})}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action creates a new token\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i issuer} \cell }{The account that will issue the token. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i maximum_supply} \cell }{The maximum amount of tokens that can be created. \cell }
{\row }
}
}}
{\xe \v depositclear\:Points}
{\xe \v Points\:depositclear}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::depositclear (uint64_t  {\i iteration_number})}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action deletes the deposit record for the iteration number passed in. This is called by the dividend contract after successfully processing dividends for an iteration.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i iteration_number} \cell }{The iteration number of the deposit record to be cleared. \cell }
{\row }
}
}}
{\xe \v issue\:Points}
{\xe \v Points\:issue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::issue (const {\b name} &  {\i to}, const asset &  {\i quantity}, const string &  {\i memo})}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function checks that the issuer is the account that's calling the function, that the quantity is valid, that the quantity is positive, that the quantity is less than the maximum supply, and then it adds the quantity to the supply and adds the quantity to the issuer's balance.\par
This function is called by the 'mint' action which applies a whitelist of accounts that are permitted to issue POINTs.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i to} \cell }{The account to which the tokens are issued. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{The amount of tokens to issue. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i memo} \cell }{A string that can be used to store additional information about the transaction. \cell }
{\row }
}
}}
{\xe \v mint\:Points}
{\xe \v Points\:mint}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::mint (const {\b name} &  {\i minter}, const {\b name} &  {\i to}, const asset &  {\i quantity}, const string &  {\i memo})}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action checks if the {\f2 minter}  account is in the {\f2 minters}  table, and if it is, it calls the {\f2 issue}  function\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i minter} \cell }{the account that is allowed to mint tokens \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i to} \cell }{The account to receive the tokens. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{The amount of tokens to be minted. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i memo} \cell }{a string that can be used to store additional information about the transaction. \cell }
{\row }
}
}}
{\xe \v mintfee\:Points}
{\xe \v Points\:mintfee}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::mintfee ({\b name}  {\i user}, {\b name}  {\i to}, asset  {\i quantity}, std::string  {\i memo})}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
When a user sends a token to the freeosgov contract, the freeosgov contract checks that the token is from the valid token contract, and then records the amount of tokens recived as a credit record in the credit table.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account that sent the transfer \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i to} \cell }{the account that will receive the minted tokens \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{the amount of the fee \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i memo} \cell }{"freeos mint fee"\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The mintfee function is being returned. \par
}}}}
{\xe \v mintfreebi\:Points}
{\xe \v Points\:mintfreebi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::mintfreebi (const {\b name} &  {\i owner}, const asset &  {\i quantity})}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action takes a quantity of POINT tokens from the user and issues an equivalent amount of FREEBI tokens to the user\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i owner} \cell }{the account that is minting the FREEBI tokens \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{the amount of POINTs to be converted to FREEBIs \cell }
{\row }
}
}}
{\xe \v mintfreeos\:Points}
{\xe \v Points\:mintfreeos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::mintfreeos ({\b name}  {\i user}, const asset &  {\i input_quantity}, symbol &  {\i mint_fee_currency}, bool  {\i use_airclaim_points})}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action checks that the user has paid the correct mint fee, then it issues the FREEOS tokens to the user\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user who is minting \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i input_quantity} \cell }{the amount of POINTs or FREEBIs that the user is minting \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mint_fee_currency} \cell }{the currency that the user has paid the mint fee in \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i use_airclaim_points} \cell }{If true, the user is using their Airclaim points to mint FREEOS. If false, the user is using POINTs or FREEBI to mint FREEOS. \cell }
{\row }
}
}}
{\xe \v process_mint_fee\:Points}
{\xe \v Points\:process_mint_fee}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freeosgov::process_mint_fee ({\b name}  {\i user}, asset  {\i mint_quantity}, symbol  {\i mint_fee_currency})}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function {\f2 process_mint_fee}  checks if the user has paid the correct mint fee, and if so, erases the credit record and returns True to indicate that processing the mint fee was successful.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user who is minting the token \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mint_quantity} \cell }{the amount of tokens to be minted \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mint_fee_currency} \cell }{the symbol of the currency that the mint fee is paid in\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A boolean value to indicate success or failure \par
}}}}
{\xe \v record_deposit\:Points}
{\xe \v Points\:record_deposit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::record_deposit (uint64_t  {\i iteration_number}, asset  {\i amount})}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function finds the record for the iteration number, and if it doesn't exist, it creates it and initialises it with the amount, otherwise it adds the amount to the existing record.\par
A deposit record for an iteration records how many POINTs are to be divided by the dividend contract to NFT holders.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i iteration_number} \cell }{The iteration number of the deposit. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i amount} \cell }{The amount of the deposit \cell }
{\row }
}
}}
{\xe \v refund_mintfee\:Points}
{\xe \v Points\:refund_mintfee}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::refund_mintfee ({\b name}  {\i user}, symbol  {\i mint_fee_currency})}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function looks up the user's credit record for the mint fee, and if it finds one, it transfers the fee back to the user and deletes the credit record.\par
N.B. This function is not called. If the mintfreeos transaction fails then all actions in the transaction are rolled back, which means there is no need to refund the mint fee. The code is reserved for future use.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user who paid the fee \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mint_fee_currency} \cell }{the currency that the user paid the mint fee in\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The mint fee is being returned to the user. \par
}}}}
{\xe \v retire\:Points}
{\xe \v Points\:retire}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::retire (const asset &  {\i quantity}, const string &  {\i memo})}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function takes an asset and a memo, checks that the asset is valid, and then subtracts the asset from the supply and the issuer's balance\par
This is a standard token management function that is not exposed as an action. It is called by the 'burn' action which applies a whitelist of accounts that are permitted to reduce the supply of a token.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{The amount of POINTs to retire. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i memo} \cell }{A string that can be used to store additional information about the transaction. \cell }
{\row }
}
}}
{\xe \v sub_balance\:Points}
{\xe \v Points\:sub_balance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::sub_balance (const {\b name} &  {\i owner}, const asset &  {\i value})}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
It subtracts the amount of the asset from the balance of the account\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i owner} \cell }{The account that will be debited \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{The amount of tokens to be transferred. \cell }
{\row }
}
}}
{\xe \v transfer\:Points}
{\xe \v Points\:transfer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::transfer (const {\b name} &  {\i from}, const {\b name} &  {\i to}, const asset &  {\i quantity}, const string &  {\i memo})}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function to transfer POINT tokens from sender to receiver. This is a wrapper to the transfer function that applies a whitelist of which accounts are permitted to transfer POINTs.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i from} \cell }{The account that is sending the tokens. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i to} \cell }{The account to which the tokens are transferred. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{The amount of tokens to transfer. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i memo} \cell }{A string that can be used to store additional information about the transfer. \cell }
{\row }
}
}}
{\xe \v unlock\:Points}
{\xe \v Points\:unlock}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::unlock (const {\b name} &  {\i user})}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action is called by the user to unlock some of their locked POINTs. It checks that the user has not already unlocked in the current iteration, and if not, it calculates the amount to be unlocked based on the unlock_percentage set in the system table, and then it unlocks the amount.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user who is unlocking\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Nothing. \par
}}}}
{\xe \v withdraw\:Points}
{\xe \v Points\:withdraw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::withdraw (const {\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action withdraws all credits from the user's credit table and transfers the credit amount back to the user's account\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user who is withdrawing their credits \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v burn\:Points}
{\xe \v Points\:burn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::burn}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action checks if the account that is calling the burn action is in the burners table, and if it is, it calls the retire function\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i burner} \cell }{The account that is burning the tokens. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{The amount of tokens to burn. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i memo} \cell }{The memo is a string that is passed along with the transfer. \cell }
{\row }
}
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ratify\par \pard\plain 
{\tc\tcl2 \v Ratify}
{\xe \v Ratify}
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::ratify_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::ratify_reset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::ratify} ({\b name} user, bool ratify_vote)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These Actions and functions are related to ratification. \par
}{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v ratify\:Ratify}
{\xe \v Ratify\:ratify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::ratify ({\b name}  {\i user}, bool  {\i ratify_vote})}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action called by the user each iteration to ratify the results of the vote.\par
The iteration number of the ratification is recorded in the user's survey-vote-ratify (SVR) record.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ratify_vote} \cell }{true or false \cell }
{\row }
}
}}
{\xe \v ratify_init\:Ratify}
{\xe \v Ratify\:ratify_init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::ratify_init ()}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function to create and initialise the ratify results record. If the ratifyrecord table is empty, then create the (single record) in the ratifyrecord table \par
}}
{\xe \v ratify_reset\:Ratify}
{\xe \v Ratify\:ratify_reset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::ratify_reset ()}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function is called at the start of a new iteration. It resets the ratify record in the ratifyrecord table to the current iteration, resets the number of participants to zero, and initialises the default setting of 'ratify' to false. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Survey\par \pard\plain 
{\tc\tcl2 \v Survey}
{\xe \v Survey}
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< string > {\b split} (string s, string delimiter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< int > {\b parse_survey_ranges} (string surveyranges)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::survey_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::survey_reset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::survey} ({\b name} user, uint8_t q1response, uint8_t q2response, uint8_t q3response, uint8_t q4response, uint8_t {\b q5choice1}, uint8_t {\b q5choice2}, uint8_t {\b q5choice3})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These Actions and functions are related to processing user surveys. \par
}{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v parse_survey_ranges\:Survey}
{\xe \v Survey\:parse_survey_ranges}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< int > parse_survey_ranges (string  {\i surveyranges})}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function parses the ranges in the surveyranges parameter. It takes a string like "q2:1-48,q4:1-36" and returns a vector of integers like [1, 48, 1, 36]\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i surveyranges} \cell }{a string that looks like this: q2:1-48,q4:1-48\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A vector of integers. \par
}}}}
{\xe \v split\:Survey}
{\xe \v Survey\:split}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< string > split (string  {\i s}, string  {\i delimiter})}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Utility function to split a string into a vector of strings, using a delimiter. This function is used by {\b parse_survey_ranges()} to interpret the surveyranges parameter.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i s} \cell }{The string to be split \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i delimiter} \cell }{The delimiter to use to split the string.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A vector of strings. \par
}}}}
{\xe \v survey\:Survey}
{\xe \v Survey\:survey}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::survey ({\b name}  {\i user}, uint8_t  {\i q1response}, uint8_t  {\i q2response}, uint8_t  {\i q3response}, uint8_t  {\i q4response}, uint8_t  {\i q5choice1}, uint8_t  {\i q5choice2}, uint8_t  {\i q5choice3})}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Action called by a user to submit their responses to the weekly survey\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i user} \cell }{the account name of the user \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i q1response} \cell }{1, 2, or 3 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i q2response} \cell }{a number between 1 and 10 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i q3response} \cell }{1, 2, 3 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i q4response} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i q5choice1} \cell }{the user's first choice for question 5 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i q5choice2} \cell }{the user's second choice for question 5 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i q5choice3} \cell }{the user's 3rd choice for question 5 \cell }
{\row }
}
}}
{\xe \v survey_init\:Survey}
{\xe \v Survey\:survey_init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::survey_init ()}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function to create and initialise the survey results record. If the surveyrecord table is empty, then create the (single record) in the surveyrecord table \par
}}
{\xe \v survey_reset\:Survey}
{\xe \v Survey\:survey_reset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::survey_reset ()}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function to reset the survey record at the beginning of a new iteration \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Vote\par \pard\plain 
{\tc\tcl2 \v Vote}
{\xe \v Vote}
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< int > {\b parse_vote_ranges} (string voteranges)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::vote_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::vote_reset} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
These Actions and functions are related to processing user voting. \par
}{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v parse_vote_ranges\:Vote}
{\xe \v Vote\:parse_vote_ranges}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< int > parse_vote_ranges (string  {\i voteranges})}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function parses the ranges in the voteranges parameter. It takes a string like "q1:0-100,q2:6-30,q5:0-50" and returns a vector of integers like [0, 100, 6, 30, 0, 50]\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i voteranges} \cell }{a string that looks like this: q1:0-100,q2:6-30,q5:0-50 from the voteranges parameter\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A vector of integers. \par
}}}}
{\xe \v vote_init\:Vote}
{\xe \v Vote\:vote_init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::vote_init ()}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function to create and initialise the vote results record. If the voterecord table is empty, then create the (single record) in the voterecord table \par
}}
{\xe \v vote_reset\:Vote}
{\xe \v Vote\:vote_reset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::vote_reset ()}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function to reset the vote record at the beginning of a new iteration \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
eosio Namespace Reference\par \pard\plain 
{\tc\tcl2 \v eosio}
{\xe \v eosio}
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b eosioproton}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
eosiosystem Namespace Reference\par \pard\plain 
{\tc\tcl2 \v eosiosystem}
{\xe \v eosiosystem}
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
freedao Namespace Reference\par \pard\plain 
{\tc\tcl2 \v freedao}
{\xe \v freedao}
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b freebi_account}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b system_index} = eosio::multi_index<"system"_n, system >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b rewards_index} = eosio::multi_index<"rewards"_n, reward >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index<"accounts"_n, account > {\b accounts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index<"vestaccounts"_n, account > {\b lockaccounts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index<"mintfeefree"_n, account > {\b mintfeefree_index}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index< "accounts"_n, {\b freebi_account} > {\b freebi_accounts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index<"stat"_n, currency_stats > {\b stats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b transferers_index} = eosio::multi_index<"transferers"_n, transfer_whitelist >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b minters_index} = eosio::multi_index<"minters"_n, minter_whitelist >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b burners_index} = eosio::multi_index<"burners"_n, burner_whitelist >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b parameters_index} = eosio::multi_index<"parameters"_n, parameter >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b dparameters_index} = eosio::multi_index<"dparameters"_n, dparameter >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b old_users_index} = eosio::multi_index<"users"_n, olduser >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b participants_index} = eosio::multi_index<"participants"_n, participant >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b airclaim_users_index} = eosio::multi_index<"users"_n, airclaim_user >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index<"usersinfo"_n, userinfo > {\b usersinfo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b svr_index} = eosio::multi_index<"svrs"_n, svr >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b survey_index} = eosio::multi_index<"surveyrecord"_n, survey_record >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b vote_index} = eosio::multi_index<"voterecord"_n, vote_record >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b ratify_index} = eosio::multi_index<"ratifyrecord"_n, ratify_record >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b exchange_index} = eosio::multi_index<"exchangerate"_n, price >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b credit_index} = eosio::multi_index<"credits"_n, credit >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b currencies_index} = eosio::multi_index<"currencies"_n, currency >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b deposits_index} = eosio::multi_index<"deposits"_n, deposit >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b unvest_index} = eosio::multi_index<"unvests"_n, unvestevent >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b nft_table} = eosio::multi_index<"nfts"_n, nft_struct, indexed_by< "account"_n, const_mem_fun< nft_struct, uint64_t, &nft_struct::get_secondary > >, indexed_by< "active"_n, const_mem_fun< nft_struct, uint64_t, &nft_struct::get_active_nft > > >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b copynft_table} = eosio::multi_index<"nfts"_n, copynft_struct, indexed_by<"account"_n, const_mem_fun< copynft_struct, uint64_t, &copynft_struct::get_secondary > > >\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b version} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b init} (time_point iterations_start, double {\b issuance_rate}, double mint_fee_percent_freeos, double {\b mint_fee_percent_xpr}, double {\b mint_fee_percent_xusdc}, double {\b locking_threshold}, bool {\b pool})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b tick} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b trigger_new_iteration} (uint32_t new_iteration)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b get_locked_proportion} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update_unlock_percentage} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b check_master_switch} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b calcfee} (const {\b name} &from, const asset &transfer_quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b maintain} (string action, {\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setmff} ({\b name} user, asset amount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b createuser} (string username, string {\b account_type}, uint32_t registered, uint32_t {\b surveys}, uint32_t {\b votes}, uint32_t {\b ratifys}, uint32_t issues, uint32_t {\b last_claim}, asset total)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b eraseuser} (string username)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b refund_function} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b reguser} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b reregister} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b is_user_verified} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b has_nft} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b paramupsert} ({\b name} paramname, std::string {\b value})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b paramerase} ({\b name} paramname)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b dparamupsert} ({\b name} paramname, double {\b value})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b dparamerase} ({\b name} paramname)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b transfadd} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b transferase} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b minteradd} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mintererase} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b burneradd} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b burnererase} ({\b name} account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b currentrate} (double price)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b targetrate} (double price)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b currupsert} (symbol symbol, {\b name} {\b contract})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b currerase} (symbol symbol)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b currsetrate} (symbol symbol, double {\b usdrate})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b get_parameter} ({\b name} parameter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b get_dparameter} ({\b name} parameter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_iparameter} ({\b name} parameter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b survey} ({\b name} user, uint8_t q1response, uint8_t q2response, uint8_t q3response, uint8_t q4response, uint8_t {\b q5choice1}, uint8_t {\b q5choice2}, uint8_t {\b q5choice3})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b survey_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b survey_reset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b vote} ({\b name} user, uint8_t q1response, uint8_t q2response, uint8_t q2response_xpr, uint8_t q2response_xusdc, double q3response, string q4response, uint8_t q5response, uint8_t {\b q6choice1}, uint8_t {\b q6choice2}, uint8_t {\b q6choice3}, double q7response, double q8response, double q9response, uint8_t q10response)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b vote_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b vote_reset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ratify} ({\b name} user, bool ratify_vote)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ratify_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ratify_reset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b claim} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b create} (const {\b name} &{\b issuer}, const asset &maximum_supply)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b issue} (const {\b name} &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b retire} (const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b allocate} (const {\b name} &from, const {\b name} &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mint} (const {\b name} &minter, const {\b name} &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b burn} (const {\b name} &burner, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b transfer} (const {\b name} &from, const {\b name} &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sub_balance} (const {\b name} &owner, const asset &{\b value})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b add_balance} (const {\b name} &owner, const asset &{\b value}, const {\b name} &ram_payer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mintfreebi} (const {\b name} &owner, const asset &quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mintfreeos} ({\b name} user, const asset &input_quantity, symbol &mint_fee_currency, bool use_airclaim_points)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b withdraw} (const {\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b unlock} (const {\b name} &user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b depositclear} (uint64_t iteration_number)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b record_deposit} (uint64_t iteration_number, asset amount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mintfee} ({\b name} user, {\b name} to, asset quantity, std::string memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b calculate_mint_fee} ({\b name} &user, asset &mint_quantity, symbol mint_fee_currency)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b process_mint_fee} ({\b name} user, asset mint_quantity, symbol mint_fee_currency)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b refund_mintfee} ({\b name} user, symbol mint_fee_currency)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adjust_balances_from_points} (const {\b name} user, const asset &input_quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b adjust_balances_from_freebi} (const {\b name} user, const asset &input_quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b is_action_period} (string action)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b current_iteration} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b is_registered} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b user_last_active_iteration} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b is_user_alive} ({\b name} user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b calculate_user_cls_addition} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b primary_key} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b get_secondary} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b get_active_nft} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b VERSION} = "0.9.57"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b iteration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b usercount}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b claimevents}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b participants}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b unlockpercent}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b unlockpercentiteration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b failsafecounter}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b cls}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b iteration_cls}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b iteration_issuance}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b participant_issuance}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b issuance_rate}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mint_fee_percent}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mint_fee_percent_xpr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mint_fee_percent_xusdc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b locking_threshold}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b pool}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b burn}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b ratified}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mint_freebi_transfer_fee}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b point_freeos_ratio}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mint_throttle}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b burn_to_boost}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b max_supply}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b name} {\b issuer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b value}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b account_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b registered_iteration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b staked_iteration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b votes}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b issuances}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b last_claim}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b total_issuance_amount}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b surveys}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b ratifys}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b last_issuance}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b avatar}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b verified}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b date}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b verifiedon}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
eosio::name {\b verifier}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< eosio::name > {\b raccs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::tuple< eosio::name, eosio::name > > {\b aacts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::tuple< eosio::name, std::string > > {\b ac}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b kyc_prov} > {\b kyc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b survey1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b survey2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b survey3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b survey4}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b vote0}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b vote1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b vote2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b vote3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b vote4}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b ratify0}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b ratify1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b ratify2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b ratify3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b ratify4}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q1choice1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q1choice2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q1choice3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q2average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q3choice1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q3choice2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q3choice3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q4average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q5choice1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q5choice2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q5choice3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q5choice4}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q5choice5}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q5choice6}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q5choice7}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q5choice8}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q1average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q2average_xpr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q2average_xusdc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q3average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q4choice1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q4choice2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q5average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q6choice1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q6choice2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q6choice3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q6choice4}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q6choice5}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b q6choice6}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q7average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q8average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q9average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b q10average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b targetprice}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b name} {\b contract}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b usdrate}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b accrued} = asset(0,symbol("POINT",4) )\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b name} {\b eosaccount}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
POINT account used to receive dividends and for identification (as a secondary key) }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b roi_target_cap}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1- iterative 2- horizontal 3- vertical }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b nft_percentage}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Only this is used for counting dividend to pay - the other parameters examine eligibility,. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
time_point_sec {\b mint_date}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
NFT mint date. In fact, the current date of the moment when this nftx record was created,. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b locked}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
lock dividends for selected new members. Note: When unlock should be not lock again. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b threshold} = asset(0,symbol("POINT",4) )\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
max total divident (2) for horizontal cap or max weekly dividend for vertical (3) cap }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b rates_left}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
count down payments left in iteration cap=1 only \par
 }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v accounts\:freedao}
{\xe \v freedao\:accounts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef eosio::multi_index<"accounts"_n, account> {\b freedao::accounts}}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v airclaim_users_index\:freedao}
{\xe \v freedao\:airclaim_users_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::airclaim_users_index} = typedef eosio::multi_index<"users"_n, airclaim_user>}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v burners_index\:freedao}
{\xe \v freedao\:burners_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::burners_index} = typedef eosio::multi_index<"burners"_n, burner_whitelist>}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v copynft_table\:freedao}
{\xe \v freedao\:copynft_table}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::copynft_table} = typedef eosio::multi_index<"nfts"_n, copynft_struct, indexed_by<"account"_n, const_mem_fun<copynft_struct, uint64_t, &copynft_struct::get_secondary> >>}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v credit_index\:freedao}
{\xe \v freedao\:credit_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::credit_index} = typedef eosio::multi_index<"credits"_n, credit>}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v currencies_index\:freedao}
{\xe \v freedao\:currencies_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::currencies_index} = typedef eosio::multi_index<"currencies"_n, currency>}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v deposits_index\:freedao}
{\xe \v freedao\:deposits_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::deposits_index} = typedef eosio::multi_index<"deposits"_n, deposit>}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v dparameters_index\:freedao}
{\xe \v freedao\:dparameters_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::dparameters_index} = typedef eosio::multi_index<"dparameters"_n, dparameter>}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v exchange_index\:freedao}
{\xe \v freedao\:exchange_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::exchange_index} = typedef eosio::multi_index<"exchangerate"_n, price>}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v freebi_accounts\:freedao}
{\xe \v freedao\:freebi_accounts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef eosio::multi_index< "accounts"_n, {\b freebi_account} > {\b freedao::freebi_accounts}}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v lockaccounts\:freedao}
{\xe \v freedao\:lockaccounts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef eosio::multi_index<"vestaccounts"_n, account> {\b freedao::lockaccounts}}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v minters_index\:freedao}
{\xe \v freedao\:minters_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::minters_index} = typedef eosio::multi_index<"minters"_n, minter_whitelist>}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mintfeefree_index\:freedao}
{\xe \v freedao\:mintfeefree_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef eosio::multi_index<"mintfeefree"_n, account> {\b freedao::mintfeefree_index}}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v nft_table\:freedao}
{\xe \v freedao\:nft_table}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::nft_table} = typedef eosio::multi_index<"nfts"_n, nft_struct, indexed_by< "account"_n, const_mem_fun<nft_struct, uint64_t, &nft_struct::get_secondary> >, indexed_by< "active"_n, const_mem_fun<nft_struct, uint64_t, &nft_struct::get_active_nft> > >}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v old_users_index\:freedao}
{\xe \v freedao\:old_users_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::old_users_index} = typedef eosio::multi_index<"users"_n, olduser>}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v parameters_index\:freedao}
{\xe \v freedao\:parameters_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::parameters_index} = typedef eosio::multi_index<"parameters"_n, parameter>}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v participants_index\:freedao}
{\xe \v freedao\:participants_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::participants_index} = typedef eosio::multi_index<"participants"_n, participant>}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ratify_index\:freedao}
{\xe \v freedao\:ratify_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::ratify_index} = typedef eosio::multi_index<"ratifyrecord"_n, ratify_record>}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rewards_index\:freedao}
{\xe \v freedao\:rewards_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::rewards_index} = typedef eosio::multi_index<"rewards"_n, reward>}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v stats\:freedao}
{\xe \v freedao\:stats}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef eosio::multi_index<"stat"_n, currency_stats> {\b freedao::stats}}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v survey_index\:freedao}
{\xe \v freedao\:survey_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::survey_index} = typedef eosio::multi_index<"surveyrecord"_n, survey_record>}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v svr_index\:freedao}
{\xe \v freedao\:svr_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::svr_index} = typedef eosio::multi_index<"svrs"_n, svr>}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v system_index\:freedao}
{\xe \v freedao\:system_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::system_index} = typedef eosio::multi_index<"system"_n, system>}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v transferers_index\:freedao}
{\xe \v freedao\:transferers_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::transferers_index} = typedef eosio::multi_index<"transferers"_n, transfer_whitelist>}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v unvest_index\:freedao}
{\xe \v freedao\:unvest_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::unvest_index} = typedef eosio::multi_index<"unvests"_n, unvestevent>}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v usersinfo\:freedao}
{\xe \v freedao\:usersinfo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef eosio::multi_index<"usersinfo"_n, userinfo> {\b freedao::usersinfo}}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v vote_index\:freedao}
{\xe \v freedao\:vote_index}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b freedao::vote_index} = typedef eosio::multi_index<"voterecord"_n, vote_record>}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v burn\:freedao}
{\xe \v freedao\:burn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freedao::burn (const {\b name} &  {\i burner}, const asset &  {\i quantity}, const string &  {\i memo})}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v calcfee\:freedao}
{\xe \v freedao\:calcfee}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::calcfee (const {\b name} &  {\i from}, const asset &  {\i transfer_quantity})}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v createuser\:freedao}
{\xe \v freedao\:createuser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::createuser (string  {\i username}, string  {\i account_type}, uint32_t  {\i registered}, uint32_t  {\i surveys}, uint32_t  {\i votes}, uint32_t  {\i ratifys}, uint32_t  {\i issues}, uint32_t  {\i last_claim}, asset  {\i total})}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v eraseuser\:freedao}
{\xe \v freedao\:eraseuser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::eraseuser (string  {\i username})}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_active_nft\:freedao}
{\xe \v freedao\:get_active_nft}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint64_t freedao::get_active_nft () const}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_secondary\:freedao}
{\xe \v freedao\:get_secondary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint64_t freedao::get_secondary () const}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v maintain\:freedao}
{\xe \v freedao\:maintain}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::maintain (string  {\i action}, {\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v primary_key\:freedao}
{\xe \v freedao\:primary_key}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint64_t freedao::primary_key () const}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v refund_function\:freedao}
{\xe \v freedao\:refund_function}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::refund_function ({\b name}  {\i user})}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setmff\:freedao}
{\xe \v freedao\:setmff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeosgov::setmff ({\b name}  {\i user}, asset  {\i amount})}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v vote\:freedao}
{\xe \v freedao\:vote}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freedao::vote ({\b name}  {\i user}, uint8_t  {\i q1response}, uint8_t  {\i q2response}, uint8_t  {\i q2response_xpr}, uint8_t  {\i q2response_xusdc}, double  {\i q3response}, string  {\i q4response}, uint8_t  {\i q5response}, uint8_t  {\i q6choice1}, uint8_t  {\i q6choice2}, uint8_t  {\i q6choice3}, double  {\i q7response}, double  {\i q8response}, double  {\i q9response}, uint8_t  {\i q10response})}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v aacts\:freedao}
{\xe \v freedao\:aacts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::tuple<eosio::name, eosio::name> > freedao::aacts}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ac\:freedao}
{\xe \v freedao\:ac}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::tuple<eosio::name, std::string> > freedao::ac}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v account_type\:freedao}
{\xe \v freedao\:account_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char freedao::account_type}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v accrued\:freedao}
{\xe \v freedao\:accrued}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freedao::accrued = asset(0,symbol("POINT",4) )}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v avatar\:freedao}
{\xe \v freedao\:avatar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string freedao::avatar}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v burn_to_boost\:freedao}
{\xe \v freedao\:burn_to_boost}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freedao::burn_to_boost}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v claimevents\:freedao}
{\xe \v freedao\:claimevents}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint64_t freedao::claimevents}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cls\:freedao}
{\xe \v freedao\:cls}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freedao::cls}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v contract\:freedao}
{\xe \v freedao\:contract}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b name} freedao::contract}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v date\:freedao}
{\xe \v freedao\:date}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint64_t freedao::date}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v eosaccount\:freedao}
{\xe \v freedao\:eosaccount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b name} freedao::eosaccount}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
POINT account used to receive dividends and for identification (as a secondary key) }}\par
}
{\xe \v failsafecounter\:freedao}
{\xe \v freedao\:failsafecounter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::failsafecounter}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v issuance_rate\:freedao}
{\xe \v freedao\:issuance_rate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::issuance_rate}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v issuances\:freedao}
{\xe \v freedao\:issuances}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::issuances}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v issuer\:freedao}
{\xe \v freedao\:issuer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b name} freedao::issuer}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v iteration\:freedao}
{\xe \v freedao\:iteration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::iteration}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v iteration_cls\:freedao}
{\xe \v freedao\:iteration_cls}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freedao::iteration_cls}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v iteration_issuance\:freedao}
{\xe \v freedao\:iteration_issuance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freedao::iteration_issuance}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v kyc\:freedao}
{\xe \v freedao\:kyc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<{\b kyc_prov}> freedao::kyc}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v last_claim\:freedao}
{\xe \v freedao\:last_claim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::last_claim}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v last_issuance\:freedao}
{\xe \v freedao\:last_issuance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::last_issuance}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v locked\:freedao}
{\xe \v freedao\:locked}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freedao::locked}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
lock dividends for selected new members. Note: When unlock should be not lock again. }}\par
}
{\xe \v locking_threshold\:freedao}
{\xe \v freedao\:locking_threshold}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::locking_threshold}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v max_supply\:freedao}
{\xe \v freedao\:max_supply}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freedao::max_supply}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mint_date\:freedao}
{\xe \v freedao\:mint_date}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
time_point_sec freedao::mint_date}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
NFT mint date. In fact, the current date of the moment when this nftx record was created,. }}\par
}
{\xe \v mint_fee_percent\:freedao}
{\xe \v freedao\:mint_fee_percent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::mint_fee_percent}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mint_fee_percent_xpr\:freedao}
{\xe \v freedao\:mint_fee_percent_xpr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::mint_fee_percent_xpr}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mint_fee_percent_xusdc\:freedao}
{\xe \v freedao\:mint_fee_percent_xusdc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::mint_fee_percent_xusdc}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mint_freebi_transfer_fee\:freedao}
{\xe \v freedao\:mint_freebi_transfer_fee}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::mint_freebi_transfer_fee}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mint_throttle\:freedao}
{\xe \v freedao\:mint_throttle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::mint_throttle}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v name\:freedao}
{\xe \v freedao\:name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string freedao::name}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v nft_percentage\:freedao}
{\xe \v freedao\:nft_percentage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::nft_percentage}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Only this is used for counting dividend to pay - the other parameters examine eligibility,. }}\par
}
{\xe \v participant_issuance\:freedao}
{\xe \v freedao\:participant_issuance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freedao::participant_issuance}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v participants\:freedao}
{\xe \v freedao\:participants}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::participants}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v point_freeos_ratio\:freedao}
{\xe \v freedao\:point_freeos_ratio}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::point_freeos_ratio}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v pool\:freedao}
{\xe \v freedao\:pool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freedao::pool}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q10average\:freedao}
{\xe \v freedao\:q10average}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q10average}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q1average\:freedao}
{\xe \v freedao\:q1average}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q1average}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q1choice1\:freedao}
{\xe \v freedao\:q1choice1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q1choice1}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q1choice2\:freedao}
{\xe \v freedao\:q1choice2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q1choice2}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q1choice3\:freedao}
{\xe \v freedao\:q1choice3}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q1choice3}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q2average\:freedao}
{\xe \v freedao\:q2average}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q2average}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q2average_xpr\:freedao}
{\xe \v freedao\:q2average_xpr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q2average_xpr}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q2average_xusdc\:freedao}
{\xe \v freedao\:q2average_xusdc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q2average_xusdc}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q3average\:freedao}
{\xe \v freedao\:q3average}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q3average}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q3choice1\:freedao}
{\xe \v freedao\:q3choice1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q3choice1}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q3choice2\:freedao}
{\xe \v freedao\:q3choice2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q3choice2}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q3choice3\:freedao}
{\xe \v freedao\:q3choice3}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q3choice3}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q4average\:freedao}
{\xe \v freedao\:q4average}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q4average}}
\par
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q4choice1\:freedao}
{\xe \v freedao\:q4choice1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q4choice1}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q4choice2\:freedao}
{\xe \v freedao\:q4choice2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q4choice2}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q5average\:freedao}
{\xe \v freedao\:q5average}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q5average}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q5choice1\:freedao}
{\xe \v freedao\:q5choice1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q5choice1}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q5choice2\:freedao}
{\xe \v freedao\:q5choice2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q5choice2}}
\par
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q5choice3\:freedao}
{\xe \v freedao\:q5choice3}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q5choice3}}
\par
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q5choice4\:freedao}
{\xe \v freedao\:q5choice4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q5choice4}}
\par
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q5choice5\:freedao}
{\xe \v freedao\:q5choice5}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q5choice5}}
\par
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q5choice6\:freedao}
{\xe \v freedao\:q5choice6}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q5choice6}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q5choice7\:freedao}
{\xe \v freedao\:q5choice7}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q5choice7}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q5choice8\:freedao}
{\xe \v freedao\:q5choice8}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q5choice8}}
\par
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q6choice1\:freedao}
{\xe \v freedao\:q6choice1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q6choice1}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q6choice2\:freedao}
{\xe \v freedao\:q6choice2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q6choice2}}
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q6choice3\:freedao}
{\xe \v freedao\:q6choice3}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q6choice3}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q6choice4\:freedao}
{\xe \v freedao\:q6choice4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q6choice4}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q6choice5\:freedao}
{\xe \v freedao\:q6choice5}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q6choice5}}
\par
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q6choice6\:freedao}
{\xe \v freedao\:q6choice6}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::q6choice6}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q7average\:freedao}
{\xe \v freedao\:q7average}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q7average}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q8average\:freedao}
{\xe \v freedao\:q8average}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q8average}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v q9average\:freedao}
{\xe \v freedao\:q9average}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::q9average}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v raccs\:freedao}
{\xe \v freedao\:raccs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<eosio::name> freedao::raccs}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rates_left\:freedao}
{\xe \v freedao\:rates_left}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::rates_left}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
count down payments left in iteration cap=1 only \par
 }}\par
}
{\xe \v ratified\:freedao}
{\xe \v freedao\:ratified}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::ratified}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ratify0\:freedao}
{\xe \v freedao\:ratify0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::ratify0}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ratify1\:freedao}
{\xe \v freedao\:ratify1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::ratify1}}
\par
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ratify2\:freedao}
{\xe \v freedao\:ratify2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::ratify2}}
\par
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ratify3\:freedao}
{\xe \v freedao\:ratify3}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::ratify3}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ratify4\:freedao}
{\xe \v freedao\:ratify4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::ratify4}}
\par
{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ratifys\:freedao}
{\xe \v freedao\:ratifys}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::ratifys}}
\par
{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registered_iteration\:freedao}
{\xe \v freedao\:registered_iteration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::registered_iteration}}
\par
{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v roi_target_cap\:freedao}
{\xe \v freedao\:roi_target_cap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t freedao::roi_target_cap}}
\par
{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1- iterative 2- horizontal 3- vertical }}\par
}
{\xe \v staked_iteration\:freedao}
{\xe \v freedao\:staked_iteration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::staked_iteration}}
\par
{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v survey1\:freedao}
{\xe \v freedao\:survey1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::survey1}}
\par
{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v survey2\:freedao}
{\xe \v freedao\:survey2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::survey2}}
\par
{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v survey3\:freedao}
{\xe \v freedao\:survey3}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::survey3}}
\par
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v survey4\:freedao}
{\xe \v freedao\:survey4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::survey4}}
\par
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v surveys\:freedao}
{\xe \v freedao\:surveys}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::surveys}}
\par
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v targetprice\:freedao}
{\xe \v freedao\:targetprice}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::targetprice}}
\par
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v threshold\:freedao}
{\xe \v freedao\:threshold}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freedao::threshold = asset(0,symbol("POINT",4) )}}
\par
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
max total divident (2) for horizontal cap or max weekly dividend for vertical (3) cap }}\par
}
{\xe \v total_issuance_amount\:freedao}
{\xe \v freedao\:total_issuance_amount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freedao::total_issuance_amount}}
\par
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v unlockpercent\:freedao}
{\xe \v freedao\:unlockpercent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::unlockpercent}}
\par
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v unlockpercentiteration\:freedao}
{\xe \v freedao\:unlockpercentiteration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::unlockpercentiteration}}
\par
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v usdrate\:freedao}
{\xe \v freedao\:usdrate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::usdrate}}
\par
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v usercount\:freedao}
{\xe \v freedao\:usercount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::usercount}}
\par
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v value\:freedao}
{\xe \v freedao\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double freedao::value}}
\par
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v verified\:freedao}
{\xe \v freedao\:verified}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool freedao::verified}}
\par
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v verifiedon\:freedao}
{\xe \v freedao\:verifiedon}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint64_t freedao::verifiedon}}
\par
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v verifier\:freedao}
{\xe \v freedao\:verifier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
eosio::name freedao::verifier}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v VERSION\:freedao}
{\xe \v freedao\:VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string freedao::VERSION = "0.9.57"}}
\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v vote0\:freedao}
{\xe \v freedao\:vote0}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::vote0}}
\par
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v vote1\:freedao}
{\xe \v freedao\:vote1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::vote1}}
\par
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v vote2\:freedao}
{\xe \v freedao\:vote2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::vote2}}
\par
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v vote3\:freedao}
{\xe \v freedao\:vote3}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::vote3}}
\par
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v vote4\:freedao}
{\xe \v freedao\:vote4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::vote4}}
\par
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v votes\:freedao}
{\xe \v freedao\:votes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t freedao::votes}}
\par
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
eosio::eosioproton Class Reference\par \pard\plain 
{\tc\tcl2 \v eosio::eosioproton}
{\xe \v eosio::eosioproton}
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
\par
{
{\f2 #include <eosio.proton.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b setperm_action} = eosio::action_wrapper<"setperm"_n, &{\b eosioproton::setperm} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b setperm2_action} = eosio::action_wrapper<"setperm2"_n, &{\b eosioproton::setperm2} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b remove_action} = eosio::action_wrapper<"remove"_n, &{\b eosioproton::remove} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b reqperm_action} = eosio::action_wrapper<"reqperm"_n, &{\b eosioproton::reqperm} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b setuserava_action} = eosio::action_wrapper<"setuserava"_n, &{\b eosioproton::setuserava} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b setusername_action} = eosio::action_wrapper<"setusername"_n, &{\b eosioproton::setusername} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b userverify_action} = eosio::action_wrapper<"userverify"_n, &{\b eosioproton::userverify} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b updateraccs_action} = eosio::action_wrapper<"updateraccs"_n, &{\b eosioproton::updateraccs} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b updateaacts_action} = eosio::action_wrapper<"updateaacts"_n, &{\b eosioproton::updateaacts} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b updateac_action} = eosio::action_wrapper<"updateac"_n, &{\b eosioproton::updateac} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b dappreg_action} = eosio::action_wrapper<"dappreg"_n, &{\b eosioproton::dappreg} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b setdappconf_action} = eosio::action_wrapper<"setdappconf"_n, &{\b eosioproton::setdappconf} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b kickbp_action} = eosio::action_wrapper<"kickbp"_n, &{\b eosioproton::kickbp} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b addkyc_action} = eosio::action_wrapper<"addkyc"_n, &{\b eosioproton::addkyc} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b updatekyc_action} = eosio::action_wrapper<"updatekyc"_n, &{\b eosioproton::updatekyc} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b removekyc_action} = eosio::action_wrapper<"removekyc"_n, &{\b eosioproton::removekyc} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b addkycprov_action} = eosio::action_wrapper<"addkycprov"_n, &{\b eosioproton::addkycprov} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b blkycprov_action} = eosio::action_wrapper<"blkycprov"_n, &{\b eosioproton::blkycprov} >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b rmvkycprov_action} = eosio::action_wrapper<"rmvkycprov"_n, &{\b eosioproton::rmvkycprov} >\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setperm} (name acc, const std::map< std::string, uint8_t > &perms)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setperm2} (name acc, const std::vector< uint8_t > &perms)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b remove} (name acc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b reqperm} (name acc, std::string permission)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setuserava} (name acc, std::string ava)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setusername} (name acc, std::string name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b userverify} (name acc, name verifier, bool verified)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b updateraccs} (name acc, vector< name > raccs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b updateaacts} (name acc, vector< tuple< name, name > > aacts)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b updateac} (name acc, vector< tuple< name, string > > ac)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b dappreg} (name account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setdappconf} (uint64_t ram, uint64_t cpu, uint64_t net)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b kickbp} (name producer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addkyc} (name acc, {\b kyc_prov} kyc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b updatekyc} (name acc, {\b kyc_prov} kyc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removekyc} (name acc, name kyc_provider)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addkycprov} (name kyc_provider, std::string desc, std::string url, std::string iconurl, std::string name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b blkycprov} (name kyc_provider, bool state)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b rmvkycprov} (name kyc_provider)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::map< std::string, uint8_t > {\b get_priv} (name contract_account, name acc)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v addkyc_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:addkyc_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::addkyc_action} =  eosio::action_wrapper<"addkyc"_n, &{\b eosioproton::addkyc}>}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v addkycprov_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:addkycprov_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::addkycprov_action} =  eosio::action_wrapper<"addkycprov"_n, &{\b eosioproton::addkycprov}>}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v blkycprov_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:blkycprov_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::blkycprov_action} =  eosio::action_wrapper<"blkycprov"_n, &{\b eosioproton::blkycprov}>}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v dappreg_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:dappreg_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::dappreg_action} =  eosio::action_wrapper<"dappreg"_n, &{\b eosioproton::dappreg}>}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v kickbp_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:kickbp_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::kickbp_action} =  eosio::action_wrapper<"kickbp"_n, &{\b eosioproton::kickbp}>}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v remove_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:remove_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::remove_action} =  eosio::action_wrapper<"remove"_n, &{\b eosioproton::remove}>}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v removekyc_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:removekyc_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::removekyc_action} =  eosio::action_wrapper<"removekyc"_n, &{\b eosioproton::removekyc}>}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v reqperm_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:reqperm_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::reqperm_action} =  eosio::action_wrapper<"reqperm"_n, &{\b eosioproton::reqperm}>}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rmvkycprov_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:rmvkycprov_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::rmvkycprov_action} =  eosio::action_wrapper<"rmvkycprov"_n, &{\b eosioproton::rmvkycprov}>}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setdappconf_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:setdappconf_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::setdappconf_action} =  eosio::action_wrapper<"setdappconf"_n, &{\b eosioproton::setdappconf}>}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setperm2_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:setperm2_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::setperm2_action} =  eosio::action_wrapper<"setperm2"_n, &{\b eosioproton::setperm2}>}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setperm_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:setperm_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::setperm_action} =  eosio::action_wrapper<"setperm"_n, &{\b eosioproton::setperm}>}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setuserava_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:setuserava_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::setuserava_action} =  eosio::action_wrapper<"setuserava"_n, &{\b eosioproton::setuserava}>}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setusername_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:setusername_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::setusername_action} =  eosio::action_wrapper<"setusername"_n, &{\b eosioproton::setusername}>}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v updateaacts_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:updateaacts_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::updateaacts_action} =  eosio::action_wrapper<"updateaacts"_n, &{\b eosioproton::updateaacts}>}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v updateac_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:updateac_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::updateac_action} =  eosio::action_wrapper<"updateac"_n, &{\b eosioproton::updateac}>}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v updatekyc_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:updatekyc_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::updatekyc_action} =  eosio::action_wrapper<"updatekyc"_n, &{\b eosioproton::updatekyc}>}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v updateraccs_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:updateraccs_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::updateraccs_action} =  eosio::action_wrapper<"updateraccs"_n, &{\b eosioproton::updateraccs}>}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v userverify_action\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:userverify_action}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b eosio::eosioproton::userverify_action} =  eosio::action_wrapper<"userverify"_n, &{\b eosioproton::userverify}>}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v addkyc\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:addkyc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::addkyc (name  {\i acc}, {\b kyc_prov}  {\i kyc})}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add KYC Approval\par
Adds KYC Approval to specified account\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{- account name receiving approval \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i kyc} \cell }{- account name of kyc provider \cell }
{\row }
}
}}
{\xe \v addkycprov\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:addkycprov}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::addkycprov (name  {\i kyc_provider}, std::string  {\i desc}, std::string  {\i url}, std::string  {\i iconurl}, std::string  {\i name})}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add KYC Provider\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i kyc_provider} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i desc} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i url} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i iconurl} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{\cell }
{\row }
}
}}
{\xe \v blkycprov\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:blkycprov}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::blkycprov (name  {\i kyc_provider}, bool  {\i state})}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Blacklist KYC Provider\par
This is an alternative to removing them.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i kyc_provider} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i state} \cell }{\cell }
{\row }
}
}}
{\xe \v dappreg\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:dappreg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::dappreg (name  {\i account})}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dapp Reg\par
Gives specified account permission to set contracts, and raises their resources up to specified level. (Depreciated)\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i account} \cell }{\cell }
{\row }
}
}}
{\xe \v get_priv\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:get_priv}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static std::map< std::string, uint8_t > eosio::eosioproton::get_priv (name  {\i contract_account}, name  {\i acc}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v kickbp\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:kickbp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::kickbp (name  {\i producer})}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Kick BP\par
Removes the ability of specified BP to register as a block producer. This is probably called from kickbp in eosio.system, which also unregisters them.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i producer} \cell }{\cell }
{\row }
}
}}
{\xe \v remove\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:remove}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::remove (name  {\i acc})}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove User Info\par
Removes user info data for specified account.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{- account name for which to remove user info data \cell }
{\row }
}
}}
{\xe \v removekyc\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:removekyc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::removekyc (name  {\i acc}, name  {\i kyc_provider})}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove KYC Approval\par
Remove KYC approval for specified account\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{- account name losing approval \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i kyc} \cell }{- account name of kyc provider \cell }
{\row }
}
}}
{\xe \v reqperm\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:reqperm}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::reqperm (name  {\i acc}, std::string  {\i permission})}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Request Permission\par
Request whitelisted permissions. (sets status to pending)\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i permission} \cell }{\cell }
{\row }
}
}}
{\xe \v rmvkycprov\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:rmvkycprov}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::rmvkycprov (name  {\i kyc_provider})}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove KYC Provider\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i kyc_provider} \cell }{\cell }
{\row }
}
}}
{\xe \v setdappconf\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:setdappconf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::setdappconf (uint64_t  {\i ram}, uint64_t  {\i cpu}, uint64_t  {\i net})}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set Dapp Configuration\par
Admin action to set resource thresholds\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i RAM} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i CPU} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i NET} \cell }{\cell }
{\row }
}
}}
{\xe \v setperm\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:setperm}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::setperm (name  {\i acc}, const std::map< std::string, uint8_t > &  {\i perms})}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set Permissions\par
Sets permissions for specified account for whitelisted EOSIO functionality. (no longer used)\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{- account name for which to set permissions \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i perms} \cell }{- permissions \cell }
{\row }
}
}}
{\xe \v setperm2\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:setperm2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::setperm2 (name  {\i acc}, const std::vector< uint8_t > &  {\i perms})}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set Permissions 2\par
Sets permissions for specified account for whitelisted EOSIO functionality.\par
NOTE: The setperm, wasn't used because it didn't work in eosjs when we were deploying. We created this new action, setperm2, which worked with an array, and that's what is used.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{- account name for which to set permissions \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i perms} \cell }{- permissions \cell }
{\row }
}
}}
{\xe \v setuserava\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:setuserava}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::setuserava (name  {\i acc}, std::string  {\i ava})}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set User Avatar\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ava} \cell }{- transcoded image for avatar \cell }
{\row }
}
}}
{\xe \v setusername\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:setusername}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::setusername (name  {\i acc}, std::string  {\i name})}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set User Name\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{\cell }
{\row }
}
}}
{\xe \v updateaacts\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:updateaacts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::updateaacts (name  {\i acc}, vector< tuple< name, name > >  {\i aacts})}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Update Actions\par
Updates a list of trusted actions for the specified user\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i accts} \cell }{\cell }
{\row }
}
}}
{\xe \v updateac\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:updateac}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::updateac (name  {\i acc}, vector< tuple< name, string > >  {\i ac})}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Update Coins\par
Updates a list of trusted tokens for the specified user\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{\cell }
{\row }
}
}}
{\xe \v updatekyc\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:updatekyc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::updatekyc (name  {\i acc}, {\b kyc_prov}  {\i kyc})}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Update KYC Approval\par
Update KYC approval for specified account\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{- account name whose approval gets modified \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i kyc} \cell }{- account name of kyc provider \cell }
{\row }
}
}}
{\xe \v updateraccs\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:updateraccs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::updateraccs (name  {\i acc}, vector< name >  {\i raccs})}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Update Accounts\par
Updates a list of trusted accounts for the specified user\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i raccs} \cell }{\cell }
{\row }
}
}}
{\xe \v userverify\:eosio::eosioproton}
{\xe \v eosio::eosioproton\:userverify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eosio::eosioproton::userverify (name  {\i acc}, name  {\i verifier}, bool  {\i verified})}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set User Verify\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i acc} \cell }{- account name of user to be verified \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i verifier} \cell }{- account name of verfier authority \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i verified} \cell }{\cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b eosio.proton.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
freedao::freebi_account Struct Reference\par \pard\plain 
{\tc\tcl2 \v freedao::freebi_account}
{\xe \v freedao::freebi_account}
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
\par
{
{\f2 #include <tables.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b primary_key} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b balance}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v primary_key\:freedao::freebi_account}
{\xe \v freedao::freebi_account\:primary_key}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint64_t freedao::freebi_account::primary_key () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v balance\:freedao::freebi_account}
{\xe \v freedao::freebi_account\:balance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
asset freedao::freebi_account::balance}}
\par
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b tables.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
kyc_prov Struct Reference\par \pard\plain 
{\tc\tcl2 \v kyc_prov}
{\xe \v kyc_prov}
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
\par
{
{\f2 #include <eosio.proton.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
name {\b kyc_provider}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b kyc_level}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b kyc_date}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v kyc_date\:kyc_prov}
{\xe \v kyc_prov\:kyc_date}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint64_t kyc_prov::kyc_date}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v kyc_level\:kyc_prov}
{\xe \v kyc_prov\:kyc_level}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string kyc_prov::kyc_level}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v kyc_provider\:kyc_prov}
{\xe \v kyc_prov\:kyc_provider}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
name kyc_prov::kyc_provider}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b eosio.proton.hpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
claim.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v claim.hpp}
{\xe \v claim.hpp}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include <eosio/system.hpp>}\par
{\f2 #include "freeosgov.hpp"}\par
{\f2 #include "tables.hpp"}\par
{\f2 #include "constants.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
claim.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //#pragma once}\par
2 {\cf21 #include <eosio/eosio.hpp>}\par
3 {\cf21 #include <eosio/system.hpp>}\par
4 {\cf21 #include "freeosgov.hpp"}\par
5 {\cf21 #include "tables.hpp"}\par
6 {\cf21 #include "constants.hpp"}\par
7 \par
8 {\cf17 using namespace }eosio;\par
9 {\cf17 using namespace }freedao;\par
10 {\cf17 using namespace }std;\par
11 \par
24 {\cf18 void} freeosgov::claim(name user) \{\par
25 \par
26     require_auth(user);\par
27 \par
28     {\cf20 // check that system is operational (masterswitch parameter set to "1")}\par
29     check(check_master_switch(), MSG_FREEOS_SYSTEM_NOT_AVAILABLE);\par
30 \par
31     tick();\par
32 \par
33     uint32_t this_iteration = current_iteration();\par
34     \par
35     {\cf20 // is the system operational?}\par
36     check(this_iteration != 0, {\cf22 "The freeos system is not available at this time"});\par
37 \par
38     {\cf20 // find the participant's last claim}\par
39     participants_index participants_table(get_self(), user.value);\par
40     {\cf17 auto} participant_iterator = participants_table.begin();\par
41     check(participant_iterator != participants_table.end(), {\cf22 "user registration record is undefined"});\par
42     uint32_t last_claim = participant_iterator->last_claim;\par
43 \par
44     {\cf20 // find the user's svr record}\par
45     svr_index svr_table(get_self(), user.value);\par
46     {\cf17 auto} svr_iterator = svr_table.begin();\par
47     check(svr_iterator != svr_table.end(), {\cf22 "user has not completed any votes or surveys"});\par
48 \par
49     {\cf20 // check if user has already claimed in this iteration}\par
50     check(this_iteration != last_claim, {\cf22 "you cannot claim more than once in an iteration"});\par
51 \par
52     {\cf20 // check that we are not in iteration 1 - payments can only be made retrospectively}\par
53     check(this_iteration > 1, {\cf22 "claims are for previous iterations only"});\par
54 \par
55     {\cf20 // get the current proportion of locked POINTs}\par
56     {\cf18 double} locked_proportion = get_locked_proportion();\par
57 \par
58     {\cf20 // determine which range of iterations we are paying for}\par
59     uint32_t earliest_payment_iteration = this_iteration > 4 ? this_iteration - 4 : 1;\par
60     uint32_t latest_payment_iteration = this_iteration - 1;\par
61 \par
62     {\cf20 // open the rewards table}\par
63     rewards_index rewards_table(get_self(), get_self().value);\par
64 \par
65     {\cf20 // get the S,V,R share values}\par
66     {\cf18 double} survey_share = get_dparameter(name({\cf22 "surveyshare"}));\par
67     {\cf18 double} vote_share = get_dparameter(name({\cf22 "voteshare"}));\par
68     {\cf18 double} ratify_share = get_dparameter(name({\cf22 "ratifyshare"}));\par
69 \par
70     {\cf18 double} freedaoshare = get_dparameter(name({\cf22 "freedaoshare"}));\par
71     {\cf18 double} partnershare = get_dparameter(name({\cf22 "partnershare"}));\par
72 \par
73     {\cf20 // get the freeosdiv and partners accounts}\par
74     name freeosdiv_acct = name(get_parameter(name({\cf22 "freedaoacct"})));\par
75     name partners_acct = name(get_parameter(name({\cf22 "partnersacct"})));\par
76 \par
77     {\cf20 // keep some counters}\par
78     asset   total_user_payment = asset(0, POINT_CURRENCY_SYMBOL);\par
79     asset   grand_total_iterations_payments = asset(0, POINT_CURRENCY_SYMBOL);\par
80     uint8_t total_issuances = 0;\par
81 \par
82 \par
83     {\cf20 // determine each iteration's payments}\par
84     {\cf19 for} (uint32_t iter = earliest_payment_iteration; iter <= latest_payment_iteration; iter++) \{\par
85         \par
86         {\cf20 // has the user already claimed for this iteration?}\par
87         {\cf20 // developer note: this next statement could be incorporated into the for loop, but implementing this way for clarity}\par
88         {\cf19 if} (iter <= last_claim) {\cf19 continue};\par
89 \par
90         {\cf20 // get the reward record for the iteration}\par
91         {\cf17 auto} reward_iterator = rewards_table.find(iter);\par
92         {\cf19 if} (reward_iterator == rewards_table.end()) {\cf19 continue};   {\cf20 // no reward record so continue to next iteration}\par
93 \par
94         {\cf20 // check if the vote was ratified, otherwise no payment to be made for that iteration}\par
95         {\cf19 if} (reward_iterator->ratified == {\cf17 false}) {\cf19 continue};\par
96 \par
97         {\cf20 // running total of user payments amounts}\par
98         uint64_t user_payment_amount = 0;\par
99 \par
100         {\cf20 // initialise the memo}\par
101         {\cf18 string} transfer_memo = {\cf22 "Claim for week "} + to_string(iter) + {\cf22 ": "};\par
102 \par
103         {\cf20 // determine the total user payout for the iteration}\par
104         uint64_t iteration_reward_amount = reward_iterator->participant_issuance.amount;\par
105         \par
106         {\cf20 // split the total user payout according to whether S, V or R completed}\par
107         uint64_t payment_survey_amount = iteration_reward_amount * survey_share;\par
108         uint64_t payment_vote_amount = iteration_reward_amount * vote_share;\par
109         uint64_t payment_ratify_amount = iteration_reward_amount * ratify_share;\par
110 \par
111         {\cf20 // check if survey completed for this iteration}\par
112         transfer_memo += {\cf22 "Survey ["} + to_string(({\cf18 int})(survey_share * 100)) + {\cf22 "%]: "};\par
113         {\cf19 if} (svr_iterator->survey0 == iter ||\par
114             svr_iterator->survey1 == iter ||\par
115             svr_iterator->survey2 == iter ||\par
116             svr_iterator->survey3 == iter ||\par
117             svr_iterator->survey4 == iter) \{\par
118                 user_payment_amount += payment_survey_amount;\par
119                 transfer_memo += {\cf22 "("} + asset(payment_survey_amount, POINT_CURRENCY_SYMBOL).to_string() + {\cf22 ")"};\par
120             \} {\cf19 else} \{\par
121                 transfer_memo += {\cf22 "(not completed)"};\par
122             \}\par
123 \par
124         {\cf20 // check if vote completed for this iteration}\par
125         transfer_memo += {\cf22 ", Vote ["} + to_string(({\cf18 int})(vote_share * 100)) + {\cf22 "%]: "};\par
126         {\cf19 if} (svr_iterator->vote0 == iter ||\par
127             svr_iterator->vote1 == iter ||\par
128             svr_iterator->vote2 == iter ||\par
129             svr_iterator->vote3 == iter ||\par
130             svr_iterator->vote4 == iter) \{\par
131                 user_payment_amount += payment_vote_amount;\par
132                 transfer_memo += {\cf22 "("} + asset(payment_vote_amount, POINT_CURRENCY_SYMBOL).to_string() + {\cf22 ")"};\par
133             \} {\cf19 else} \{\par
134                 transfer_memo += {\cf22 "(not completed)"};\par
135             \}\par
136 \par
137         {\cf20 // check if ratify completed for this iteration}\par
138         transfer_memo += {\cf22 ", Ratify ["} + to_string(({\cf18 int})(ratify_share * 100)) + {\cf22 "%]: "};\par
139         {\cf19 if} (svr_iterator->ratify0 == iter ||\par
140             svr_iterator->ratify1 == iter ||\par
141             svr_iterator->ratify2 == iter ||\par
142             svr_iterator->ratify3 == iter ||\par
143             svr_iterator->ratify4 == iter) \{\par
144                 user_payment_amount += payment_ratify_amount;\par
145                 transfer_memo += {\cf22 "("} + asset(payment_ratify_amount, POINT_CURRENCY_SYMBOL).to_string() + {\cf22 ")"};\par
146             \} {\cf19 else} \{\par
147                 transfer_memo += {\cf22 "(not completed)"};\par
148             \}\par
149         \par
150         {\cf20 // make the payment, if any}\par
151         {\cf19 if} (user_payment_amount > 0) \{\par
152             total_issuances++;\par
153 \par
154             uint64_t user_locked_amount = user_payment_amount * locked_proportion;\par
155             uint64_t user_liquid_amount = user_payment_amount - user_locked_amount;\par
156 \par
157             {\cf20 // get the partner and freedao shares}\par
158             uint64_t freedao_payment_amount = user_payment_amount * freedaoshare;\par
159             uint64_t partners_payment_amount = user_payment_amount * partnershare;\par
160 \par
161             {\cf20 // calculate the payments as assets}\par
162             asset user_payment = asset(user_payment_amount, POINT_CURRENCY_SYMBOL);\par
163             asset user_liquid_payment = asset(user_liquid_amount, POINT_CURRENCY_SYMBOL);\par
164             asset user_locked_payment = asset(user_locked_amount, POINT_CURRENCY_SYMBOL);\par
165             asset freedao_payment = asset(freedao_payment_amount, POINT_CURRENCY_SYMBOL);\par
166             asset partners_payment = asset(partners_payment_amount, POINT_CURRENCY_SYMBOL);\par
167 \par
168             total_user_payment += user_payment;\par
169 \par
170             {\cf20 // mint the total amount}\par
171             asset iteration_all_payments = user_payment + freedao_payment + partners_payment;\par
172             grand_total_iterations_payments += iteration_all_payments;\par
173 \par
174             {\cf18 string} issue_memo = string({\cf22 "claim by "}) + user.to_string() + {\cf22 " for week "} + to_string(iter);\par
175             \par
176             {\cf20 // issue all POINTs}\par
177             action issue_action = action(\par
178                 permission_level\{get_self(), {\cf22 "active"}_n\}, get_self(),\par
179                 {\cf22 "mint"}_n, std::make_tuple(get_self(), get_self(), iteration_all_payments, issue_memo));\par
180             issue_action.send();\par
181 \par
182             {\cf20 // explain the unlocked/locked amounts in the memo}\par
183             transfer_memo += {\cf22 " - payment (unlocked/locked) = "} + user_liquid_payment.to_string() + {\cf22 "/"} + user_locked_payment.to_string();\par
184 \par
185             {\cf20 // transfer liquid POINTs to the user account}\par
186             action user_transfer_action = action(\par
187             permission_level\{get_self(), {\cf22 "active"}_n\}, get_self(),\par
188                 {\cf22 "allocate"}_n,\par
189                 std::make_tuple(get_self(), user, user_liquid_payment, transfer_memo));\par
190             user_transfer_action.send();\par
191 \par
192             {\cf20 // increase the user's locked balance}\par
193             {\cf19 if} (user_locked_amount > 0) \{\par
194                 lockaccounts lock_accounts(get_self(), user.value);\par
195                 {\cf17 auto} acct_iterator = lock_accounts.find(user_locked_payment.symbol.code().raw());\par
196                 {\cf19 if} (acct_iterator == lock_accounts.end()) \{\par
197                     lock_accounts.emplace(get_self(), [&]({\cf17 auto} &a) \{ a.balance = user_locked_payment; \});\par
198                 \} {\cf19 else} \{\par
199                     lock_accounts.modify(acct_iterator, get_self(), [&]({\cf17 auto} &a) \{ a.balance += user_locked_payment; \});\par
200                 \}\par
201             \}\par
202 \par
203             {\cf20 // memo for freedao and partners shares}\par
204             {\cf18 string} shares_memo = string({\cf22 "share of claim by "}) + user.to_string() + {\cf22 " for week "} + to_string(iter);\par
205 \par
206             {\cf20 // transfer POINTs to the freedao account}\par
207             {\cf20 // first, record the deposit to the freedao account}\par
208             record_deposit(this_iteration, freedao_payment);\par
209 \par
210             {\cf19 if} (freedao_payment_amount > 0) \{\par
211                 action freedao_transfer_action = action(\par
212                 permission_level\{get_self(), {\cf22 "active"}_n\}, get_self(),\par
213                     {\cf22 "allocate"}_n,\par
214                     std::make_tuple(get_self(), freeosdiv_acct, freedao_payment, shares_memo));\par
215                 freedao_transfer_action.send();\par
216             \}\par
217             \par
218             {\cf20 // transfer POINTs to the partners account}\par
219             {\cf19 if} (partners_payment_amount > 0) \{\par
220                 action partners_transfer_action = action(\par
221                 permission_level\{get_self(), {\cf22 "active"}_n\}, get_self(),\par
222                     {\cf22 "allocate"}_n,\par
223                     std::make_tuple(get_self(), partners_acct, partners_payment, shares_memo));\par
224                 partners_transfer_action.send();\par
225             \}\par
226         \}\par
227     \}\par
228 \par
229     {\cf20 // update the participant record issuance values}\par
230     participants_table.modify(participant_iterator, get_self(), [&]({\cf17 auto} &participant) \{\par
231         participant.last_claim = latest_payment_iteration;   {\cf20 // i.e. paid up to this iteration}\par
232         participant.total_issuance_amount += total_user_payment;\par
233         participant.issuances += total_issuances;\par
234     \});\par
235     \par
236 \par
237     {\cf20 // update the number of claimevents in the system record and reduce CLS}\par
238     {\cf19 if} (total_issuances > 0) \{\par
239         system_index system_table(get_self(), get_self().value);\par
240         {\cf17 auto} system_iterator = system_table.begin();\par
241         check(system_iterator != system_table.end(), {\cf22 "system record is undefined"});\par
242         system_table.modify(system_iterator, get_self(), [&]({\cf17 auto} &s) \{\par
243             s.claimevents += total_issuances;\par
244             s.cls -= grand_total_iterations_payments;   {\cf20 // reduce CLS by total number of points issued}\par
245         \});\par
246     \}\par
247     \par
248 \par
249 \}\par
250  {\cf20 // end of claim group}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
config.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v config.hpp}
{\xe \v config.hpp}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include <eosio/system.hpp>}\par
{\f2 #include "freeosgov.hpp"}\par
{\f2 #include "constants.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
config.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include <eosio/eosio.hpp>}\par
3 {\cf21 #include <eosio/system.hpp>}\par
4 {\cf21 #include "freeosgov.hpp"}\par
5 {\cf21 #include "constants.hpp"}\par
6 \par
7 {\cf17 using namespace }eosio;\par
8 {\cf17 using namespace }freedao;\par
9 \par
23 {\cf18 string} freeosgov::get_parameter(name paramname) \{\par
24   parameters_index parameters_table(get_self(), get_self().value);\par
25   {\cf17 auto} parameter_iterator = parameters_table.find(paramname.value);\par
26 \par
27   std::string assert_msg = paramname.to_string() + {\cf22 " is not defined in the parameters table"};\par
28   check(parameter_iterator != parameters_table.end(), assert_msg);\par
29 \par
30   {\cf19 return} parameter_iterator->value;\par
31 \}\par
32 \par
40 {\cf18 int} freeosgov::get_iparameter(name paramname) \{\par
41   parameters_index parameters_table(get_self(), get_self().value);\par
42   {\cf17 auto} parameter_iterator = parameters_table.find(paramname.value);\par
43 \par
44   std::string assert_msg = paramname.to_string() + {\cf22 " is not defined in the parameters table"};\par
45   check(parameter_iterator != parameters_table.end(), assert_msg);\par
46 \par
47   {\cf19 return} stoi(parameter_iterator->value);\par
48 \}\par
49 \par
57 {\cf18 double} freeosgov::get_dparameter(name paramname) \{\par
58   dparameters_index dparameters_table(get_self(), get_self().value);\par
59   {\cf17 auto} dparameter_iterator = dparameters_table.find(paramname.value);\par
60 \par
61   std::string assert_msg = paramname.to_string() + {\cf22 " is not defined in the dparameters table"};\par
62   check(dparameter_iterator != dparameters_table.end(), assert_msg);\par
63 \par
64   {\cf19 return} dparameter_iterator->value;\par
65 \}\par
66 \par
67 \par
68 \par
76 {\cf18 void} freeosgov::paramupsert(name paramname, std::string value) \{\par
77 \par
78   require_auth(get_self());\par
79   parameters_index parameters_table(get_self(), get_self().value);\par
80   {\cf17 auto} parameter_iterator = parameters_table.find(paramname.value);\par
81 \par
82   {\cf20 // check if the parameter is in the table or not}\par
83   {\cf19 if} (parameter_iterator == parameters_table.end()) \{\par
84     {\cf20 // the parameter is not in the table, so insert}\par
85     parameters_table.emplace(get_self(), [&]({\cf17 auto} &parameter) \{\par
86       parameter.paramname = paramname;\par
87       parameter.value = value;\par
88     \});\par
89 \par
90   \} {\cf19 else} \{\par
91     {\cf20 // the parameter is in the table, so update}\par
92     parameters_table.modify(parameter_iterator, get_self(), [&]({\cf17 auto} &parameter) \{\par
93       parameter.value = value;\par
94     \});\par
95   \}\par
96 \}\par
97 \par
98 \par
104 {\cf18 void} freeosgov::paramerase(name paramname) \{\par
105   require_auth(_self);\par
106 \par
107   parameters_index parameters_table(get_self(), get_self().value);\par
108   {\cf17 auto} parameter_iterator = parameters_table.find(paramname.value);\par
109 \par
110   {\cf20 // check if the parameter is in the table or not}\par
111   check(parameter_iterator != parameters_table.end(),\par
112         {\cf22 "config parameter does not exist"});\par
113 \par
114   {\cf20 // the parameter is in the table, so delete}\par
115   parameters_table.erase(parameter_iterator);\par
116 \}\par
117 \par
118 \par
126 {\cf18 void} freeosgov::dparamupsert(name paramname, {\cf18 double} dvalue) \{\par
127 \par
128   require_auth(get_self());\par
129   dparameters_index dparameters_table(get_self(), get_self().value);\par
130   {\cf17 auto} dparameter_iterator = dparameters_table.find(paramname.value);\par
131 \par
132   {\cf20 // check if the parameter is in the table or not}\par
133   {\cf19 if} (dparameter_iterator == dparameters_table.end()) \{\par
134     {\cf20 // the parameter is not in the table, so insert}\par
135     dparameters_table.emplace(get_self(), [&]({\cf17 auto} &dparameter) \{\par
136       dparameter.paramname = paramname;\par
137       dparameter.value = dvalue;\par
138     \});\par
139 \par
140   \} {\cf19 else} \{\par
141     {\cf20 // the parameter is in the table, so update}\par
142     dparameters_table.modify(dparameter_iterator, get_self(), [&]({\cf17 auto} &dparameter) \{\par
143       dparameter.value = dvalue;\par
144     \});\par
145   \}\par
146 \}\par
147 \par
148 \par
154 {\cf18 void} freeosgov::dparamerase(name paramname) \{\par
155   require_auth(_self);\par
156 \par
157   dparameters_index dparameters_table(get_self(), get_self().value);\par
158   {\cf17 auto} dparameter_iterator = dparameters_table.find(paramname.value);\par
159 \par
160   {\cf20 // check if the parameter is in the table or not}\par
161   check(dparameter_iterator != dparameters_table.end(),\par
162         {\cf22 "double parameter does not exist"});\par
163 \par
164   {\cf20 // the parameter is in the table, so delete}\par
165   dparameters_table.erase(dparameter_iterator);\par
166 \}\par
167 \par
168 \par
174 {\cf18 void} freeosgov::transfadd(name account) \{\par
175   require_auth(get_self());\par
176 \par
177   transferers_index transferers_table(get_self(), get_self().value);\par
178   transferers_table.emplace(\par
179       get_self(), [&]({\cf17 auto} &transferer) \{ transferer.account = account; \});\par
180 \}\par
181 \par
182 \par
188 {\cf18 void} freeosgov::transferase(name account) \{\par
189   require_auth(get_self());\par
190 \par
191   transferers_index transferers_table(get_self(), get_self().value);\par
192   {\cf17 auto} transferer_iterator = transferers_table.find(account.value);\par
193 \par
194   {\cf20 // check if the account is in the table}\par
195   check(transferer_iterator != transferers_table.end(),\par
196         {\cf22 "account is not in the transferers table"});\par
197 \par
198   {\cf20 // the account is in the table, so delete}\par
199   transferers_table.erase(transferer_iterator);\par
200 \}\par
201 \par
202 \par
208 {\cf18 void} freeosgov::minteradd(name account) \{\par
209   require_auth(get_self());\par
210 \par
211   minters_index minters_table(get_self(), get_self().value);\par
212   minters_table.emplace(_self, [&]({\cf17 auto} &issuer) \{ issuer.account = account; \});\par
213 \}\par
214 \par
215 \par
221 {\cf18 void} freeosgov::mintererase(name account) \{\par
222   require_auth(get_self());\par
223 \par
224   minters_index minters_table(get_self(), get_self().value);\par
225   {\cf17 auto} minter_iterator = minters_table.find(account.value);\par
226 \par
227   {\cf20 // check if the account is in the table}\par
228   check(minter_iterator != minters_table.end(),\par
229         {\cf22 "account is not in the minters table"});\par
230 \par
231   {\cf20 // the account is in the table, so delete}\par
232   minters_table.erase(minter_iterator);\par
233 \}\par
234 \par
235 \par
241 {\cf18 void} freeosgov::burneradd(name account) \{\par
242   require_auth(get_self());\par
243 \par
244   burners_index burners_table(get_self(), get_self().value);\par
245   burners_table.emplace(_self, [&]({\cf17 auto} &burner) \{ burner.account = account; \});\par
246 \}\par
247 \par
248 \par
254 {\cf18 void} freeosgov::burnererase(name account) \{\par
255   require_auth(get_self());\par
256 \par
257   burners_index burners_table(get_self(), get_self().value);\par
258   {\cf17 auto} burner_iterator = burners_table.find(account.value);\par
259 \par
260   {\cf20 // check if the account is in the table}\par
261   check(burner_iterator != burners_table.end(),\par
262         {\cf22 "account is not in the burners table"});\par
263 \par
264   {\cf20 // the account is in the table, so delete}\par
265   burners_table.erase(burner_iterator);\par
266 \}\par
267 \par
268 \par
276 {\cf18 void} freeosgov::currentrate({\cf18 double} price) \{\par
277 \par
278   {\cf20 // check if the exchange account is calling this action, or the contract itself}\par
279   parameters_index parameters_table(get_self(), get_self().value);\par
280   {\cf17 auto} parameter_iterator = parameters_table.find(name({\cf22 "exchangeacc"}).value);\par
281   {\cf19 if} (parameter_iterator != parameters_table.end()) \{\par
282     require_auth(name(parameter_iterator->value));\par
283   \} {\cf19 else} \{\par
284     require_auth(get_self());\par
285   \}\par
286 \par
287   check(price > 0.0, {\cf22 "current rate must be positive"});\par
288 \par
289   exchange_index rates_table(get_self(), get_self().value);\par
290   {\cf17 auto} rate_iterator = rates_table.begin();\par
291 \par
292   {\cf20 // check if the rate exists in the table}\par
293   {\cf19 if} (rate_iterator == rates_table.end()) \{\par
294     {\cf20 // the rate is not in the table, so insert}\par
295     rates_table.emplace(get_self(), [&]({\cf17 auto} &rate) \{ rate.currentprice = price; \});\par
296 \par
297   \} {\cf19 else} \{\par
298     {\cf20 // the rate is in the table, so update}\par
299     rates_table.modify(rate_iterator, _self,\par
300                        [&]({\cf17 auto} &rate) \{ rate.currentprice = price; \});\par
301   \}\par
302 \}\par
303 \par
311 {\cf18 void} freeosgov::targetrate({\cf18 double} exchangerate) \{\par
312 \par
313   require_auth(get_self());\par
314 \par
315   check(exchangerate > 0.0, {\cf22 "target rate must be positive"});\par
316 \par
317   {\cf18 double} new_exchangerate = exchangerate;\par
318 \par
319   {\cf20 // ensure it is not set below the hardcoded floor}\par
320   {\cf19 if} (new_exchangerate < HARD_EXCHANGE_RATE_FLOOR) \{\par
321     new_exchangerate = HARD_EXCHANGE_RATE_FLOOR;\par
322   \}\par
323 \par
324   exchange_index rates_table(get_self(), get_self().value);\par
325   {\cf17 auto} rate_iterator = rates_table.begin();\par
326 \par
327   {\cf20 // check if the rate exists in the table}\par
328   {\cf19 if} (rate_iterator == rates_table.end()) \{\par
329     {\cf20 // the rate is not in the table, so insert}\par
330     rates_table.emplace(\par
331         get_self(), [&]({\cf17 auto} &rate) \{ rate.targetprice = new_exchangerate; \});\par
332 \par
333   \} {\cf19 else} \{\par
334     {\cf20 // the rate is in the table, so update}\par
335     rates_table.modify(rate_iterator, get_self(), [&]({\cf17 auto} &rate) \{\par
336       rate.targetprice = new_exchangerate;\par
337     \});\par
338   \}\par
339 \}\par
340 \par
341 \par
349 {\cf18 void} freeosgov::currupsert(symbol symbol, name contract) \{\par
350 \par
351   require_auth(get_self());\par
352 \par
353   currencies_index currencies_table(get_self(), get_self().value);\par
354   {\cf17 auto} curr_iterator = currencies_table.find(symbol.raw());\par
355 \par
356   {\cf19 if} (curr_iterator == currencies_table.end()) \{\par
357     {\cf20 // emplace}\par
358     currencies_table.emplace(get_self(), [&]({\cf17 auto} &curr) \{\par
359       curr.symbol = symbol;\par
360       curr.contract = contract;\par
361     \});\par
362   \} {\cf19 else} \{\par
363     {\cf20 // modify}\par
364     currencies_table.modify(curr_iterator, get_self(), [&]({\cf17 auto} &curr) \{\par
365       curr.contract = contract;\par
366     \});\par
367   \}\par
368 \}\par
369 \par
370 \par
379 {\cf18 void} freeosgov::currsetrate(symbol symbol, {\cf18 double} usdrate) \{\par
380 \par
381   {\cf20 // check if the exchange account is calling this action, or the contract itself}\par
382   parameters_index parameters_table(get_self(), get_self().value);\par
383   {\cf17 auto} parameter_iterator = parameters_table.find(name({\cf22 "exchangeacc"}).value);\par
384   {\cf19 if} (parameter_iterator != parameters_table.end()) \{\par
385     require_auth(name(parameter_iterator->value));\par
386   \} {\cf19 else} \{\par
387     require_auth(get_self());\par
388   \}\par
389 \par
390   currencies_index currencies_table(get_self(), get_self().value);\par
391   {\cf17 auto} curr_iterator = currencies_table.find(symbol.raw());\par
392 \par
393   check(curr_iterator != currencies_table.end(), {\cf22 "currency record not found"});\par
394 \par
395   {\cf20 // modify}\par
396   currencies_table.modify(curr_iterator, get_self(), [&]({\cf17 auto} &curr) \{\par
397     curr.usdrate = usdrate;\par
398   \});\par
399 \}\par
400 \par
401 \par
407 {\cf18 void} freeosgov::currerase(symbol symbol) \{\par
408 \par
409   require_auth(get_self());\par
410 \par
411   currencies_index currencies_table(get_self(), get_self().value);\par
412   {\cf17 auto} curr_iterator = currencies_table.find(symbol.raw());\par
413 \par
414   check(curr_iterator != currencies_table.end(), {\cf22 "currency not found"});\par
415 \par
416   currencies_table.erase(curr_iterator);\par
417 \}\par
418  {\cf20 // end of config group}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
constants.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v constants.hpp}
{\xe \v constants.hpp}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b XPR_CURRENCY_CODE} = "XPR"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const uint8_t {\b XPR_CURRENCY_PRECISION} = 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const symbol {\b XPR_CURRENCY_SYMBOL} = symbol({\b XPR_CURRENCY_CODE}, {\b XPR_CURRENCY_PRECISION})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b XUSDC_CURRENCY_CODE} = "XUSDC"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const uint8_t {\b XUSDC_CURRENCY_PRECISION} = 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const symbol {\b XUSDC_CURRENCY_SYMBOL} = symbol({\b XUSDC_CURRENCY_CODE}, {\b XUSDC_CURRENCY_PRECISION})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b POINT_CURRENCY_CODE} = "POINT"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const uint8_t {\b POINT_CURRENCY_PRECISION} = 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const symbol {\b POINT_CURRENCY_SYMBOL} = symbol({\b POINT_CURRENCY_CODE}, {\b POINT_CURRENCY_PRECISION})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b AIRKEY_CURRENCY_CODE} = "AIRKEY"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const uint8_t {\b AIRKEY_CURRENCY_PRECISION} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const symbol {\b AIRKEY_CURRENCY_SYMBOL} = symbol({\b AIRKEY_CURRENCY_CODE}, {\b AIRKEY_CURRENCY_PRECISION})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b FREEBI_CURRENCY_CODE} = "FREEBI"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const uint8_t {\b FREEBI_CURRENCY_PRECISION} = 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const symbol {\b FREEBI_CURRENCY_SYMBOL} = symbol({\b FREEBI_CURRENCY_CODE}, {\b FREEBI_CURRENCY_PRECISION})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b FREEOS_CURRENCY_CODE} = "FREEOS"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const uint8_t {\b FREEOS_CURRENCY_PRECISION} = 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const symbol {\b FREEOS_CURRENCY_SYMBOL} = symbol({\b FREEOS_CURRENCY_CODE}, {\b FREEOS_CURRENCY_PRECISION})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const name {\b AIRCLAIM_CONTRACT} = name("freeos5")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b MSG_FREEOS_SYSTEM_NOT_AVAILABLE} = "Freeos system is not currently operating. Please try later"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const name {\b VERIFICATION_CONTRACT} = name("freeosconfig")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const double {\b HARD_EXCHANGE_RATE_FLOOR} = 0.0167\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const int64_t {\b UCLSAMOUNT} = 3500000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const double {\b PARTNERSHARE} = 0.03\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const double {\b DAOSHARE} = 0.07\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const int {\b AIRKEY_MINT_FEE_FREE_ALLOWANCE} = 5000\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v AIRCLAIM_CONTRACT\:constants.hpp}
{\xe \v constants.hpp\:AIRCLAIM_CONTRACT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const name AIRCLAIM_CONTRACT = name("freeos5")}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AIRKEY_CURRENCY_CODE\:constants.hpp}
{\xe \v constants.hpp\:AIRKEY_CURRENCY_CODE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string AIRKEY_CURRENCY_CODE = "AIRKEY"}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AIRKEY_CURRENCY_PRECISION\:constants.hpp}
{\xe \v constants.hpp\:AIRKEY_CURRENCY_PRECISION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const uint8_t AIRKEY_CURRENCY_PRECISION = 0}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AIRKEY_CURRENCY_SYMBOL\:constants.hpp}
{\xe \v constants.hpp\:AIRKEY_CURRENCY_SYMBOL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const symbol AIRKEY_CURRENCY_SYMBOL = symbol({\b AIRKEY_CURRENCY_CODE}, {\b AIRKEY_CURRENCY_PRECISION})}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AIRKEY_MINT_FEE_FREE_ALLOWANCE\:constants.hpp}
{\xe \v constants.hpp\:AIRKEY_MINT_FEE_FREE_ALLOWANCE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const int AIRKEY_MINT_FEE_FREE_ALLOWANCE = 5000}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DAOSHARE\:constants.hpp}
{\xe \v constants.hpp\:DAOSHARE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const double DAOSHARE = 0.07}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FREEBI_CURRENCY_CODE\:constants.hpp}
{\xe \v constants.hpp\:FREEBI_CURRENCY_CODE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string FREEBI_CURRENCY_CODE = "FREEBI"}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FREEBI_CURRENCY_PRECISION\:constants.hpp}
{\xe \v constants.hpp\:FREEBI_CURRENCY_PRECISION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const uint8_t FREEBI_CURRENCY_PRECISION = 4}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FREEBI_CURRENCY_SYMBOL\:constants.hpp}
{\xe \v constants.hpp\:FREEBI_CURRENCY_SYMBOL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const symbol FREEBI_CURRENCY_SYMBOL = symbol({\b FREEBI_CURRENCY_CODE}, {\b FREEBI_CURRENCY_PRECISION})}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FREEOS_CURRENCY_CODE\:constants.hpp}
{\xe \v constants.hpp\:FREEOS_CURRENCY_CODE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string FREEOS_CURRENCY_CODE = "FREEOS"}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FREEOS_CURRENCY_PRECISION\:constants.hpp}
{\xe \v constants.hpp\:FREEOS_CURRENCY_PRECISION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const uint8_t FREEOS_CURRENCY_PRECISION = 4}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FREEOS_CURRENCY_SYMBOL\:constants.hpp}
{\xe \v constants.hpp\:FREEOS_CURRENCY_SYMBOL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const symbol FREEOS_CURRENCY_SYMBOL = symbol({\b FREEOS_CURRENCY_CODE}, {\b FREEOS_CURRENCY_PRECISION})}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v HARD_EXCHANGE_RATE_FLOOR\:constants.hpp}
{\xe \v constants.hpp\:HARD_EXCHANGE_RATE_FLOOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const double HARD_EXCHANGE_RATE_FLOOR = 0.0167}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MSG_FREEOS_SYSTEM_NOT_AVAILABLE\:constants.hpp}
{\xe \v constants.hpp\:MSG_FREEOS_SYSTEM_NOT_AVAILABLE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string MSG_FREEOS_SYSTEM_NOT_AVAILABLE = "Freeos system is not currently operating. Please try later"}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v PARTNERSHARE\:constants.hpp}
{\xe \v constants.hpp\:PARTNERSHARE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const double PARTNERSHARE = 0.03}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v POINT_CURRENCY_CODE\:constants.hpp}
{\xe \v constants.hpp\:POINT_CURRENCY_CODE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string POINT_CURRENCY_CODE = "POINT"}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v POINT_CURRENCY_PRECISION\:constants.hpp}
{\xe \v constants.hpp\:POINT_CURRENCY_PRECISION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const uint8_t POINT_CURRENCY_PRECISION = 4}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v POINT_CURRENCY_SYMBOL\:constants.hpp}
{\xe \v constants.hpp\:POINT_CURRENCY_SYMBOL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const symbol POINT_CURRENCY_SYMBOL = symbol({\b POINT_CURRENCY_CODE}, {\b POINT_CURRENCY_PRECISION})}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v UCLSAMOUNT\:constants.hpp}
{\xe \v constants.hpp\:UCLSAMOUNT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const int64_t UCLSAMOUNT = 3500000}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v VERIFICATION_CONTRACT\:constants.hpp}
{\xe \v constants.hpp\:VERIFICATION_CONTRACT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const name VERIFICATION_CONTRACT = name("freeosconfig")}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v XPR_CURRENCY_CODE\:constants.hpp}
{\xe \v constants.hpp\:XPR_CURRENCY_CODE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string XPR_CURRENCY_CODE = "XPR"}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v XPR_CURRENCY_PRECISION\:constants.hpp}
{\xe \v constants.hpp\:XPR_CURRENCY_PRECISION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const uint8_t XPR_CURRENCY_PRECISION = 4}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v XPR_CURRENCY_SYMBOL\:constants.hpp}
{\xe \v constants.hpp\:XPR_CURRENCY_SYMBOL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const symbol XPR_CURRENCY_SYMBOL = symbol({\b XPR_CURRENCY_CODE}, {\b XPR_CURRENCY_PRECISION})}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v XUSDC_CURRENCY_CODE\:constants.hpp}
{\xe \v constants.hpp\:XUSDC_CURRENCY_CODE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string XUSDC_CURRENCY_CODE = "XUSDC"}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v XUSDC_CURRENCY_PRECISION\:constants.hpp}
{\xe \v constants.hpp\:XUSDC_CURRENCY_PRECISION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const uint8_t XUSDC_CURRENCY_PRECISION = 4}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v XUSDC_CURRENCY_SYMBOL\:constants.hpp}
{\xe \v constants.hpp\:XUSDC_CURRENCY_SYMBOL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const symbol XUSDC_CURRENCY_SYMBOL = symbol({\b XUSDC_CURRENCY_CODE}, {\b XUSDC_CURRENCY_PRECISION})}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
constants.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 \par
3 {\cf17 using namespace }std;\par
4 \par
5 {\cf20 /* old method for defining contract names, now replaced with parameters}\par
6 {\cf20 #define _STRINGIZE(x) #x}\par
7 {\cf20 #define STRINGIZE(x) _STRINGIZE(x)}\par
8 {\cf20 std::string freebi_acct = STRINGIZE(FREEBY);}\par
9 {\cf20 std::string freeos_acct = STRINGIZE(FREEOS);}\par
10 {\cf20 */}\par
11 \par
12 {\cf20 // Currency constants}\par
13 {\cf17 const} {\cf18 string} XPR_CURRENCY_CODE = {\cf22 "XPR"};\par
14 {\cf17 const} uint8_t XPR_CURRENCY_PRECISION = 4;\par
15 {\cf17 const} symbol XPR_CURRENCY_SYMBOL = symbol(XPR_CURRENCY_CODE, XPR_CURRENCY_PRECISION);\par
16 \par
17 {\cf17 const} {\cf18 string} XUSDC_CURRENCY_CODE = {\cf22 "XUSDC"};\par
18 {\cf17 const} uint8_t XUSDC_CURRENCY_PRECISION = 4;\par
19 {\cf17 const} symbol XUSDC_CURRENCY_SYMBOL = symbol(XUSDC_CURRENCY_CODE, XUSDC_CURRENCY_PRECISION);\par
20 \par
21 {\cf17 const} {\cf18 string} POINT_CURRENCY_CODE = {\cf22 "POINT"};\par
22 {\cf17 const} uint8_t POINT_CURRENCY_PRECISION = 4;\par
23 {\cf17 const} symbol POINT_CURRENCY_SYMBOL = symbol(POINT_CURRENCY_CODE, POINT_CURRENCY_PRECISION);\par
24 \par
25 {\cf17 const} {\cf18 string} AIRKEY_CURRENCY_CODE = {\cf22 "AIRKEY"};\par
26 {\cf17 const} uint8_t AIRKEY_CURRENCY_PRECISION = 0;\par
27 {\cf17 const} symbol AIRKEY_CURRENCY_SYMBOL = symbol(AIRKEY_CURRENCY_CODE, AIRKEY_CURRENCY_PRECISION);\par
28 \par
29 {\cf17 const} {\cf18 string} FREEBI_CURRENCY_CODE = {\cf22 "FREEBI"};\par
30 {\cf17 const} uint8_t FREEBI_CURRENCY_PRECISION = 4;\par
31 {\cf17 const} symbol FREEBI_CURRENCY_SYMBOL = symbol(FREEBI_CURRENCY_CODE, FREEBI_CURRENCY_PRECISION);\par
32 \par
33 {\cf17 const} {\cf18 string} FREEOS_CURRENCY_CODE = {\cf22 "FREEOS"};\par
34 {\cf17 const} uint8_t FREEOS_CURRENCY_PRECISION = 4;\par
35 {\cf17 const} symbol FREEOS_CURRENCY_SYMBOL = symbol(FREEOS_CURRENCY_CODE, FREEOS_CURRENCY_PRECISION);\par
36 \par
37 \par
38 {\cf17 const} name AIRCLAIM_CONTRACT = name({\cf22 "freeos5"});     {\cf20 // TODO: we should not need for production as we are overwriting contract}\par
39 \par
40 {\cf17 const} {\cf18 string} MSG_FREEOS_SYSTEM_NOT_AVAILABLE = {\cf22 "Freeos system is not currently operating. Please try later"};\par
41 \par
42 {\cf21 #ifdef PRODUCTION}\par
43 {\cf17 const} name VERIFICATION_CONTRACT = name({\cf22 "eosio.proton"});\par
44 {\cf21 #else}\par
45 {\cf17 const} name VERIFICATION_CONTRACT = name({\cf22 "freeosconfig"});\par
46 {\cf21 #endif}\par
47 \par
48 {\cf17 const} {\cf18 double} HARD_EXCHANGE_RATE_FLOOR = 0.0167;\par
49 \par
50 {\cf20 // user CLS amount hard floor (in the absence of uclsamount parameter)}\par
51 {\cf17 const} int64_t UCLSAMOUNT = 3500000;\par
52 \par
53 {\cf20 // Partner share hard floor (in the absence of the partnershare parameter)}\par
54 {\cf17 const} {\cf18 double} PARTNERSHARE = 0.03;\par
55 \par
56 {\cf20 // DAO share hard floor (in the absence of the daoshare parameter)}\par
57 {\cf17 const} {\cf18 double} DAOSHARE = 0.07;\par
58 \par
59 {\cf20 // Issuance percentage (expressed as floating point) of CLS}\par
60 {\cf20 // const double ISSUANCE_PROPORTION_OF_CLS = 0.000286;  // now implemented as parameter 'issuepropcls'}\par
61 \par
62 {\cf20 // mint-fee-free allowance for AIRKEY holders}\par
63 {\cf17 const} {\cf18 int} AIRKEY_MINT_FEE_FREE_ALLOWANCE = 5000;\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
eosio.proton.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v eosio.proton.hpp}
{\xe \v eosio.proton.hpp}
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include <eosio/asset.hpp>}\par
{\f2 #include <eosio/singleton.hpp>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b kyc_prov}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b eosio::eosioproton}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b eosiosystem}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b eosio}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SYSsym}\~ symbol("SYS", 4)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v SYSsym\:eosio.proton.hpp}
{\xe \v eosio.proton.hpp\:SYSsym}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SYSsym\~ symbol("SYS", 4)}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
eosio.proton.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 /*##################################*\\}\par
2 {\cf20 #}\par
3 {\cf20 #}\par
4 {\cf20 # Created by CryptoLions.io}\par
5 {\cf20 #}\par
6 {\cf20 #}\par
7 {\cf20 \\*##################################*/}\par
8 \par
9 \par
10 {\cf21 #pragma once}\par
11 \par
12 {\cf21 #include <eosio/eosio.hpp>}\par
13 {\cf21 #include <eosio/asset.hpp>}\par
14 {\cf21 #include <eosio/singleton.hpp>}\par
15 \par
16 \par
17 {\cf17 using namespace }eosio;\par
18 {\cf17 using namespace }std;\par
19 \par
20 {\cf21 #define SYSsym symbol("SYS"}, 4)  {\cf20 // PROTON}\par
21 \par
22 {\cf17 struct }kyc_prov \{\par
23     name kyc_provider;\par
24     {\cf18 string} kyc_level;\par
25     uint64_t kyc_date;\par
26 \};\par
27 \par
28 \par
29 {\cf17 namespace }eosiosystem \{\par
30     {\cf17 class }system_contract;\par
31 \}\par
32 \par
33 {\cf17 namespace }eosio \{\par
34 \par
35     {\cf17 class }[[eosio::contract({\cf22 "eosio.proton"})]] eosioproton : {\cf17 public} contract \{\par
36         {\cf17 public}:\par
37             {\cf17 using }contract::contract;\par
38 \par
47             [[eosio::action]]\par
48             {\cf18 void} setperm(name acc, {\cf17 const} std::map<std::string,uint8_t>& perms);\par
49             {\cf17 using }setperm_action = eosio::action_wrapper<{\cf22 "setperm"}_n, &eosioproton::setperm>;\par
50 \par
62             [[eosio::action]]\par
63             {\cf18 void} setperm2(name acc, {\cf17 const} std::vector<uint8_t>& perms);\par
64             {\cf17 using }setperm2_action = eosio::action_wrapper<{\cf22 "setperm2"}_n, &eosioproton::setperm2>;\par
65 \par
66 \par
74             [[eosio::action]]\par
75             {\cf18 void} remove(name acc);\par
76             {\cf17 using }remove_action = eosio::action_wrapper<{\cf22 "remove"}_n, &eosioproton::remove>;\par
77 \par
86             [[eosio::action]]\par
87             {\cf18 void} reqperm(name acc, std::string permission );\par
88             {\cf17 using }reqperm_action = eosio::action_wrapper<{\cf22 "reqperm"}_n, &eosioproton::reqperm>;\par
89 \par
96             [[eosio::action]]\par
97             {\cf18 void} setuserava(name acc, std::string ava );\par
98             {\cf17 using }setuserava_action = eosio::action_wrapper<{\cf22 "setuserava"}_n, &eosioproton::setuserava>;\par
99 \par
106             [[eosio::action]]\par
107             {\cf18 void} setusername(name acc, std::string name );\par
108             {\cf17 using }setusername_action = eosio::action_wrapper<{\cf22 "setusername"}_n, &eosioproton::setusername>;\par
109 \par
117             [[eosio::action]]\par
118             {\cf18 void} userverify(name acc, name verifier, {\cf18 bool}  verified);\par
119             {\cf17 using }userverify_action = eosio::action_wrapper<{\cf22 "userverify"}_n, &eosioproton::userverify>;\par
120 \par
129             [[eosio::action]]\par
130             {\cf18 void} updateraccs(name acc, vector<name> raccs);\par
131             {\cf17 using }updateraccs_action = eosio::action_wrapper<{\cf22 "updateraccs"}_n, &eosioproton::updateraccs>;\par
132 \par
141             [[eosio::action]]\par
142             {\cf18 void} updateaacts(name acc, vector<tuple<name, name>> aacts);\par
143             {\cf17 using }updateaacts_action = eosio::action_wrapper<{\cf22 "updateaacts"}_n, &eosioproton::updateaacts>;\par
144 \par
153             [[eosio::action]]\par
154             {\cf18 void} updateac(name acc, vector<tuple<name, string>> ac);\par
155             {\cf17 using }updateac_action = eosio::action_wrapper<{\cf22 "updateac"}_n, &eosioproton::updateac>;\par
156 \par
165             [[eosio::action]]\par
166             {\cf18 void} dappreg(name account);\par
167             {\cf17 using }dappreg_action = eosio::action_wrapper<{\cf22 "dappreg"}_n, &eosioproton::dappreg>;\par
168 \par
178             [[eosio::action]]\par
179             {\cf18 void} setdappconf(uint64_t ram, uint64_t cpu, uint64_t net);\par
180             {\cf17 using }setdappconf_action = eosio::action_wrapper<{\cf22 "setdappconf"}_n, &eosioproton::setdappconf>;\par
181 \par
190             [[eosio::action]]\par
191             {\cf18 void} kickbp( name producer );\par
192             {\cf17 using }kickbp_action = eosio::action_wrapper<{\cf22 "kickbp"}_n, &eosioproton::kickbp>;\par
193 \par
194             {\cf17 static} std::map<std::string,uint8_t> get_priv( name contract_account, name acc )\{\par
195                 std::map<std::string,uint8_t> res;\par
196 \par
197                 {\cf20 //exception for eosio account}\par
198                 {\cf19 if} ( acc == {\cf22 "eosio"}_n ) \{\par
199                     res[{\cf22 "createacc"}] = 1; res[{\cf22 "vote"}] = 1; res[{\cf22 "regprod"}] = 1; res[{\cf22 "regproxy"}] = 1; res[{\cf22 "setcontract"}] = 1; res[{\cf22 "namebids"}] = 1; res[{\cf22 "rex"}] = 1; res[{\cf22 "delegate"}] = 1; res[{\cf22 "undelegate"}] = 1; res[{\cf22 "sellram"}] = 1; res[{\cf22 "buyram"}] = 1;\par
200                     {\cf19 return} res;\par
201                 \}\par
202 \par
203                 res[{\cf22 "createacc"}] = 0; res[{\cf22 "vote"}] = 0; res[{\cf22 "regprod"}] = 0; res[{\cf22 "regproxy"}] = 0; res[{\cf22 "setcontract"}] = 0; res[{\cf22 "namebids"}] = 0; res[{\cf22 "rex"}] = 0; res[{\cf22 "delegate"}] = 0; res[{\cf22 "undelegate"}] = 0; res[{\cf22 "sellram"}] = 0; res[{\cf22 "buyram"}] = 0;\par
204 \par
205                 permissions perm( contract_account, contract_account.value );\par
206                 {\cf17 auto} existing = perm.find( acc.value );\par
207                 {\cf19 if} ( existing != perm.end() ) \{\par
208                     res[{\cf22 "createacc"}] = existing->createacc;\par
209                     res[{\cf22 "vote"}] = existing->vote;\par
210                     res[{\cf22 "regprod"}] = existing->regprod;\par
211                     res[{\cf22 "regproxy"}] = existing->regproxy;\par
212                     res[{\cf22 "setcontract"}] = existing->setcontract;\par
213                     res[{\cf22 "namebids"}] = existing->namebids;\par
214                     res[{\cf22 "rex"}] = existing->rex;\par
215 \par
216                     res[{\cf22 "delegate"}] = existing->delegate;\par
217                     res[{\cf22 "undelegate"}] = existing->undelegate;\par
218                     res[{\cf22 "sellram"}] = existing->sellram;\par
219                     res[{\cf22 "buyram"}] = existing->buyram;\par
220 \par
221                 \}\par
222                 {\cf19 return} res;\par
223             \}\par
224 \par
225 \par
226             {\cf20 // KYC Logic}\par
227 \par
236             [[eosio::action]]\par
237             {\cf18 void} addkyc( name acc, kyc_prov kyc );\par
238             {\cf17 using }addkyc_action = eosio::action_wrapper<{\cf22 "addkyc"}_n, &eosioproton::addkyc>;\par
239 \par
240 \par
249             [[eosio::action]]\par
250             {\cf18 void} updatekyc( name acc, kyc_prov kyc );\par
251             {\cf17 using }updatekyc_action = eosio::action_wrapper<{\cf22 "updatekyc"}_n, &eosioproton::updatekyc>;\par
252 \par
253 \par
262             [[eosio::action]]\par
263             {\cf18 void} removekyc( name acc, name kyc_provider );\par
264             {\cf17 using }removekyc_action = eosio::action_wrapper<{\cf22 "removekyc"}_n, &eosioproton::removekyc>;\par
265 \par
276             [[eosio::action]]\par
277             {\cf18 void} addkycprov( name kyc_provider, std::string desc, std::string url, std::string iconurl, std::string name );\par
278             {\cf17 using }addkycprov_action = eosio::action_wrapper<{\cf22 "addkycprov"}_n, &eosioproton::addkycprov>;\par
279 \par
288             [[eosio::action]]\par
289             {\cf18 void} blkycprov( name kyc_provider, {\cf18 bool} state );\par
290             {\cf17 using }blkycprov_action = eosio::action_wrapper<{\cf22 "blkycprov"}_n, &eosioproton::blkycprov>;\par
291 \par
298             [[eosio::action]]\par
299             {\cf18 void} rmvkycprov( name kyc_provider );\par
300             {\cf17 using }rmvkycprov_action = eosio::action_wrapper<{\cf22 "rmvkycprov"}_n, &eosioproton::rmvkycprov>;\par
301 \par
302     {\cf17 private}:\par
303 \par
304         {\cf20 // 0 = none, 1 = on, 2 = pending, 3 = off, 4 = banned}\par
305         {\cf17 struct }[[eosio::table]] permission \{\par
306             name        acc;\par
307             uint8_t     createacc;\par
308             uint8_t     vote;\par
309             uint8_t     regprod;\par
310             uint8_t     regproxy;\par
311             uint8_t     setcontract;\par
312             uint8_t     namebids;\par
313             uint8_t     rex;\par
314             uint8_t     delegate;\par
315             uint8_t     undelegate;\par
316             uint8_t     sellram;\par
317             uint8_t     buyram;\par
318 \par
319             uint64_t primary_key(){\cf17 const }\{ {\cf19 return} acc.value; \}\par
320         \};\par
321 \par
322         {\cf17 typedef} eosio::multi_index< {\cf22 "permissions"}_n, permission > permissions;\par
323 \par
324 \par
325 \par
326 \par
327         {\cf17 struct }[[eosio::table]] userinfo \{\par
328             name                                     acc;\par
329             std::string                              name;\par
330             std::string                              avatar;\par
331             {\cf18 bool}                                     verified;\par
332             uint64_t                                 date;\par
333             uint64_t                                 verifiedon;\par
334             eosio::name                              verifier;\par
335 \par
336             vector<eosio::name>                      raccs;\par
337             vector<tuple<eosio::name, eosio::name>>  aacts;\par
338             vector<tuple<eosio::name, string>>       ac;\par
339 \par
340             vector<kyc_prov>                         kyc;\par
341 \par
342             uint64_t primary_key(){\cf17 const }\{ {\cf19 return} acc.value; \}\par
343         \};\par
344 \par
345         {\cf17 typedef} eosio::multi_index< {\cf22 "usersinfo"}_n, userinfo > usersinfo;\par
346 \par
347         {\cf17 struct }[[eosio::table]] kyc_providers_list \{\par
348             {\cf20 //uint64_t index}\par
349             name            kyc_provider;\par
350             std::string     desc;\par
351             std::string     url;\par
352             std::string     iconurl;\par
353             std::string     name;\par
354             {\cf18 bool}            blisted;\par
355 \par
356             uint64_t primary_key(){\cf17 const }\{ {\cf19 return} kyc_provider.value; \}\par
357         \};\par
358 \par
359         {\cf17 typedef} eosio::multi_index< {\cf22 "kycproviders"}_n, kyc_providers_list > kycproviders;\par
360 \par
361 \par
362         {\cf17 struct }[[eosio::table]] user_resources \{\par
363             name          owner;\par
364             asset         net_weight;\par
365             asset         cpu_weight;\par
366             int64_t       ram_bytes = 0;\par
367 \par
368             {\cf18 bool} is_empty(){\cf17 const }\{ {\cf19 return} net_weight.amount == 0 && cpu_weight.amount == 0 && ram_bytes == 0; \}\par
369             uint64_t primary_key(){\cf17 const }\{ {\cf19 return} owner.value; \}\par
370 \par
371             {\cf20 // explicit serialization macro is not necessary, used here only to improve compilation time}\par
372             EOSLIB_SERIALIZE( user_resources, (owner)(net_weight)(cpu_weight)(ram_bytes) )\par
373         \};\par
374         {\cf17 typedef} eosio::multi_index< {\cf22 "userres"}_n, user_resources > user_resources_table;\par
375 \par
376 \par
377         TABLE dappconf \{\par
378             dappconf()\{\}\par
379             uint64_t dappram = 2 * 1024 * 1024;\par
380             uint64_t dappcpu = 200000;\par
381             uint64_t dappnet = 200000;\par
382 \par
383             EOSLIB_SERIALIZE( dappconf, (dappram)(dappcpu)(dappnet))\par
384         \};\par
385         {\cf17 typedef} eosio::singleton< {\cf22 "dappconf"}_n, dappconf> dappconfig;\par
386         dappconf _dcstate;\par
387 \par
388         {\cf20 //add singelton for producer pay config}\par
389 \par
390     \};\par
391 \par
392 \} \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
freeosgov.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v freeosgov.cpp}
{\xe \v freeosgov.cpp}
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "freeosgov.hpp"}\par
{\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include <eosio/system.hpp>}\par
{\f2 #include "tables.hpp"}\par
{\f2 #include "config.hpp"}\par
{\f2 #include "identity.hpp"}\par
{\f2 #include "survey.hpp"}\par
{\f2 #include "vote.hpp"}\par
{\f2 #include "ratify.hpp"}\par
{\f2 #include "points.hpp"}\par
{\f2 #include "claim.hpp"}\par
{\f2 #include "maintain.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b freedao}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b freedao::VERSION} = "0.9.57"\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
freeosgov.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v freeosgov.hpp}
{\xe \v freeosgov.hpp}
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include <eosio/asset.hpp>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b freedao}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::version} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::init} (time_point iterations_start, double issuance_rate, double mint_fee_percent_freeos, double mint_fee_percent_xpr, double mint_fee_percent_xusdc, double locking_threshold, bool pool)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::tick} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::trigger_new_iteration} (uint32_t new_iteration)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::get_locked_proportion} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::update_unlock_percentage} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::check_master_switch} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::calcfee} (const name &from, const asset &transfer_quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::maintain} (string action, name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::setmff} (name user, asset amount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::createuser} (string username, string account_type, uint32_t registered, uint32_t surveys, uint32_t votes, uint32_t ratifys, uint32_t issues, uint32_t last_claim, asset total)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::eraseuser} (string username)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::refund_function} (name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::reguser} (name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::reregister} (name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::is_user_verified} (name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::has_nft} (name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::paramupsert} (name paramname, std::string value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::paramerase} (name paramname)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::dparamupsert} (name paramname, double value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::dparamerase} (name paramname)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::transfadd} (name account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::transferase} (name account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::minteradd} (name account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::mintererase} (name account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::burneradd} (name account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::burnererase} (name account)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::currentrate} (double price)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::targetrate} (double price)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::currupsert} (symbol symbol, name contract)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::currerase} (symbol symbol)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::currsetrate} (symbol symbol, double usdrate)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b freedao::get_parameter} (name parameter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::get_dparameter} (name parameter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b freedao::get_iparameter} (name parameter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::survey} (name user, uint8_t q1response, uint8_t q2response, uint8_t q3response, uint8_t q4response, uint8_t q5choice1, uint8_t q5choice2, uint8_t q5choice3)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::survey_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::survey_reset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::vote} (name user, uint8_t q1response, uint8_t q2response, uint8_t q2response_xpr, uint8_t q2response_xusdc, double q3response, string q4response, uint8_t q5response, uint8_t q6choice1, uint8_t q6choice2, uint8_t q6choice3, double q7response, double q8response, double q9response, uint8_t q10response)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::vote_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::vote_reset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::ratify} (name user, bool ratify_vote)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::ratify_init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::ratify_reset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::claim} (name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::create} (const name &issuer, const asset &maximum_supply)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::issue} (const name &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::retire} (const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::allocate} (const name &from, const name &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::mint} (const name &minter, const name &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::burn} (const name &burner, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::transfer} (const name &from, const name &to, const asset &quantity, const string &memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::sub_balance} (const name &owner, const asset &value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::add_balance} (const name &owner, const asset &value, const name &ram_payer)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::mintfreebi} (const name &owner, const asset &quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::mintfreeos} (name user, const asset &input_quantity, symbol &mint_fee_currency, bool use_airclaim_points)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::withdraw} (const name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::unlock} (const name &user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::depositclear} (uint64_t iteration_number)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::record_deposit} (uint64_t iteration_number, asset amount)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::mintfee} (name user, name to, asset quantity, std::string memo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::calculate_mint_fee} (name &user, asset &mint_quantity, symbol mint_fee_currency)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::process_mint_fee} (name user, asset mint_quantity, symbol mint_fee_currency)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::refund_mintfee} (name user, symbol mint_fee_currency)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::adjust_balances_from_points} (const name user, const asset &input_quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freedao::adjust_balances_from_freebi} (const name user, const asset &input_quantity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::is_action_period} (string action)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::current_iteration} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::is_registered} (name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::user_last_active_iteration} (name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::is_user_alive} (name user)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::calculate_user_cls_addition} ()\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
freeosgov.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include <eosio/eosio.hpp>}\par
3 {\cf21 #include <eosio/asset.hpp>}\par
4 \par
5 {\cf17 namespace }freedao \{\par
6 {\cf17 using namespace }eosio;\par
7 {\cf17 using namespace }std;\par
8 \par
9 {\cf17 class}[[eosio::contract({\cf22 "freeosgov"})]] freeosgov : {\cf17 public} contract \{\par
10 \par
11 {\cf17 public}:\par
12   {\cf17 using }contract::contract;\par
13 \par
19   [[eosio::action]] {\cf18 void} version();\par
20   [[eosio::action]] {\cf18 void} init(time_point iterations_start, {\cf18 double} issuance_rate, {\cf18 double} mint_fee_percent_freeos,\par
21                     {\cf18 double} mint_fee_percent_xpr, {\cf18 double} mint_fee_percent_xusdc, {\cf18 double} locking_threshold, {\cf18 bool} pool);\par
22   [[eosio::action]] {\cf18 void} tick();\par
23   {\cf18 void} trigger_new_iteration(uint32_t new_iteration);\par
24   {\cf18 double} get_locked_proportion();\par
25   {\cf18 void} update_unlock_percentage();\par
26   {\cf18 bool} check_master_switch();\par
27 \par
28   {\cf20 // maintain actions TODO: remove in production version}\par
29   [[eosio::action]] {\cf18 void} calcfee({\cf17 const} name &from, {\cf17 const} asset& transfer_quantity);\par
30   [[eosio::action]] {\cf18 void} maintain({\cf18 string} action, name user);\par
31   [[eosio::action]] {\cf18 void} setmff(name user, asset amount);\par
32   {\cf18 void} createuser({\cf18 string} username, {\cf18 string} account_type, uint32_t registered, uint32_t surveys,\par
33                           uint32_t votes, uint32_t ratifys, uint32_t issues, uint32_t last_claim, asset total);\par
34   {\cf18 void} eraseuser({\cf18 string} username);\par
35   {\cf18 void} refund_function(name user);\par
36 \par
37   {\cf20 // identity actions}\par
38   [[eosio::action]] {\cf18 void} reguser(name user);\par
39   [[eosio::action]] {\cf18 void} reregister(name user);\par
40   {\cf18 bool} is_user_verified(name user);\par
41   {\cf18 bool} has_nft(name user);\par
42 \par
43   {\cf20 // config actions}\par
44   [[eosio::action]] {\cf18 void} paramupsert(name paramname, std::string value);\par
45   [[eosio::action]] {\cf18 void} paramerase(name paramname);\par
46   [[eosio::action]] {\cf18 void} dparamupsert(name paramname, {\cf18 double} value);\par
47   [[eosio::action]] {\cf18 void} dparamerase(name paramname);\par
48   [[eosio::action]] {\cf18 void} transfadd(name account);\par
49   [[eosio::action]] {\cf18 void} transferase(name account);\par
50   [[eosio::action]] {\cf18 void} minteradd(name account);\par
51   [[eosio::action]] {\cf18 void} mintererase(name account);\par
52   [[eosio::action]] {\cf18 void} burneradd(name account);\par
53   [[eosio::action]] {\cf18 void} burnererase(name account);\par
54   [[eosio::action]] {\cf18 void} currentrate({\cf18 double} price);\par
55   [[eosio::action]] {\cf18 void} targetrate({\cf18 double} price);\par
56   [[eosio::action]] {\cf18 void} currupsert(symbol symbol, name contract);\par
57   [[eosio::action]] {\cf18 void} currerase(symbol symbol);\par
58   [[eosio::action]] {\cf18 void} currsetrate(symbol symbol, {\cf18 double} usdrate);\par
59   {\cf18 string} get_parameter(name parameter);\par
60   {\cf18 double} get_dparameter(name parameter);\par
61   {\cf18 int} get_iparameter(name parameter);\par
62 \par
63   {\cf20 // survey actions (In survey.hpp)}\par
64   [[eosio::action]] {\cf18 void} survey(name user, uint8_t q1response, uint8_t q2response, uint8_t q3response, uint8_t q4response, uint8_t q5choice1, uint8_t q5choice2, uint8_t q5choice3);\par
65   {\cf18 void} survey_init();\par
66   {\cf18 void} survey_reset();\par
67 \par
68   {\cf20 // vote actions/functions}\par
69   [[eosio::action]] {\cf18 void} vote(name user, uint8_t q1response, uint8_t q2response, uint8_t q2response_xpr, uint8_t q2response_xusdc,\par
70                     {\cf18 double} q3response, {\cf18 string} q4response, uint8_t q5response, uint8_t q6choice1, uint8_t q6choice2, uint8_t q6choice3,\par
71                     {\cf18 double} q7response, {\cf18 double} q8response, {\cf18 double} q9response, uint8_t q10response);\par
72   {\cf18 void} vote_init();\par
73   {\cf18 void} vote_reset();\par
74 \par
75   {\cf20 // ratify actions/functions}\par
76   [[eosio::action]] {\cf18 void} ratify(name user, {\cf18 bool} ratify_vote);\par
77   {\cf18 void} ratify_init();\par
78   {\cf18 void} ratify_reset();\par
79 \par
80   {\cf20 // claim actions/functions}\par
81   [[eosio::action]] {\cf18 void} claim(name user);\par
82   \par
83   {\cf20 // points actions and functions}\par
84   [[eosio::action]] {\cf18 void} create({\cf17 const} name &issuer, {\cf17 const} asset &maximum_supply);\par
85   {\cf18 void} issue({\cf17 const} name &to, {\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo);\par
86   {\cf18 void} retire({\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo);\par
87   [[eosio::action]] {\cf18 void} allocate({\cf17 const} name &from, {\cf17 const} name &to, {\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo);\par
88   [[eosio::action]] {\cf18 void} mint({\cf17 const} name &minter, {\cf17 const} name &to, {\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo);\par
89   [[eosio::action]] {\cf18 void} burn({\cf17 const} name &burner, {\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo);\par
90   {\cf18 void} transfer({\cf17 const} name &from, {\cf17 const} name &to, {\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo);\par
91   {\cf18 void} sub_balance({\cf17 const} name &owner, {\cf17 const} asset &value);\par
92   {\cf18 void} add_balance({\cf17 const} name &owner, {\cf17 const} asset &value, {\cf17 const} name &ram_payer);\par
93   [[eosio::action]] {\cf18 void} mintfreebi({\cf17 const} name &owner, {\cf17 const} asset &quantity);\par
94   [[eosio::action]] {\cf18 void} mintfreeos(name user, {\cf17 const} asset &input_quantity, symbol &mint_fee_currency, {\cf18 bool} use_airclaim_points);\par
95   [[eosio::action]] {\cf18 void} withdraw({\cf17 const} name user);\par
96   [[eosio::action]] {\cf18 void} unlock({\cf17 const} name &user);\par
97   [[eosio::action]] {\cf18 void} depositclear(uint64_t iteration_number);\par
98   {\cf18 void} record_deposit(uint64_t iteration_number, asset amount);\par
99   {\cf18 void} mintfee(name user, name to, asset quantity, std::string memo);\par
100   asset calculate_mint_fee(name &user, asset &mint_quantity, symbol mint_fee_currency);\par
101   {\cf18 bool} process_mint_fee(name user, asset mint_quantity, symbol mint_fee_currency);\par
102   {\cf18 void} refund_mintfee(name user, symbol mint_fee_currency);\par
103   {\cf18 void} adjust_balances_from_points({\cf17 const} name user, {\cf17 const} asset &input_quantity);\par
104   {\cf18 void} adjust_balances_from_freebi({\cf17 const} name user, {\cf17 const} asset &input_quantity);\par
105 \par
106   {\cf20 // functions}\par
107   {\cf18 bool} is_action_period({\cf18 string} action);\par
108   uint32_t current_iteration();\par
109   {\cf18 bool} is_registered(name user);\par
110   uint32_t user_last_active_iteration(name user);\par
111   {\cf18 bool} is_user_alive(name user);\par
112   asset calculate_user_cls_addition();\par
113 \};\par
114 \par
115 \} {\cf20 // end of namespace freedao}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
identity.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v identity.hpp}
{\xe \v identity.hpp}
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include <eosio/system.hpp>}\par
{\f2 #include "freeosgov.hpp"}\par
{\f2 #include "constants.hpp"}\par
{\f2 #include "config.hpp"}\par
{\f2 #include "tables.hpp"}\par
{\f2 #include <stdlib.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b get_account_type} (name user)\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
identity.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include <eosio/eosio.hpp>}\par
3 {\cf21 #include <eosio/system.hpp>}\par
4 {\cf21 #include "freeosgov.hpp"}\par
5 {\cf21 #include "constants.hpp"}\par
6 {\cf21 #include "config.hpp"}\par
7 {\cf21 #include "tables.hpp"}\par
8 \par
9 {\cf21 #include <stdlib.h>}\par
10 \par
11 {\cf17 using namespace }eosio;\par
12 {\cf17 using namespace }freedao;\par
13 \par
14 \par
28 {\cf18 bool} freeosgov::has_nft(name user) \{\par
29   {\cf18 bool} nft_status = {\cf17 false};\par
30 \par
31   {\cf20 // check the dividend contract}\par
32   name dividend_contract = name(get_parameter(name({\cf22 "freedaoacct"})));\par
33 \par
34   nft_table nfts(dividend_contract, dividend_contract.value);\par
35   {\cf17 auto} account_index = nfts.get_index<{\cf22 "active"}_n>();\par
36   {\cf17 auto} nft_iterator = account_index.find(user.value);\par
37 \par
38   {\cf19 if} (nft_iterator != account_index.end()) \{  {\cf20 // if NFT record found}\par
39     nft_status = {\cf17 true};\par
40   \}\par
41 \par
42   {\cf19 return} nft_status;\par
43 \}\par
44 \par
45 \par
53 uint32_t freeosgov::user_last_active_iteration(name user) \{\par
54   {\cf20 // fetch the user lifespan parameter}\par
55   {\cf18 string} slifespan = get_parameter(name({\cf22 "userlifespan"}));\par
56   check(slifespan != {\cf22 ""}, {\cf22 "user lifespan parameter is not defined"});\par
57   uint32_t ilifespan = abs(stoi(slifespan));\par
58 \par
59   {\cf20 // get the user record}\par
60   participants_index participants_table(get_self(), user.value);\par
61   {\cf17 auto} participant_iterator = participants_table.begin();\par
62   check(participant_iterator != participants_table.end(), {\cf22 "user registration record is not defined"});\par
63 \par
64   {\cf19 return} participant_iterator->registered_iteration + ilifespan - 1;\par
65 \}\par
66 \par
67 \par
76 {\cf18 bool} freeosgov::is_user_alive(name user) \{\par
77   uint32_t user_last_iteration = user_last_active_iteration(user);\par
78 \par
79   {\cf20 // is user alive? if current_iteration > (user's registered_iteration + lifespan - 1) then user has exceeeded lifespan}\par
80   {\cf19 return} current_iteration() <= user_last_iteration ? true : {\cf17 false};\par
81 \}\par
82 \par
83 \par
96 {\cf18 string} get_account_type(name user) \{\par
97   {\cf20 // default result}\par
98   {\cf18 string} user_account_type = {\cf22 "e"};\par
99 \par
100   {\cf20 // first determine which contract we consult - if we have set an alternative}\par
101   {\cf20 // contract then use that one}\par
102   name verification_contract = VERIFICATION_CONTRACT;\par
103 \par
104   {\cf20 // access the verification table}\par
105   usersinfo verification_table(name(verification_contract),\par
106                                name(verification_contract).value);\par
107   {\cf17 auto} verification_iterator = verification_table.find(user.value);\par
108 \par
109   {\cf19 if} (verification_iterator != verification_table.end()) \{\par
110     {\cf20 // record found, so default account_type is 'd', unless we find a}\par
111     {\cf20 // verification}\par
112     user_account_type = {\cf22 "d"};\par
113 \par
114     {\cf17 auto} kyc_prov = verification_iterator->kyc;\par
115 \par
116     {\cf19 for} ({\cf18 int} i = 0; i < kyc_prov.size(); i++) \{\par
117       {\cf18 size_t} fn_pos = kyc_prov[i].kyc_level.find({\cf22 "firstname"});\par
118       {\cf18 size_t} ln_pos = kyc_prov[i].kyc_level.find({\cf22 "lastname"});\par
119 \par
120       {\cf19 if} (fn_pos != std::string::npos && ln_pos != std::string::npos) \{\par
121         user_account_type = {\cf22 "v"};\par
122         {\cf19 break};\par
123       \}\par
124     \}\par
125   \}\par
126 \par
127   {\cf19 return} user_account_type;\par
128 \}\par
129 \par
130 \par
136 asset freeosgov::calculate_user_cls_addition() \{\par
137   {\cf20 // get parameters}\par
138   parameters_index parameters_table(get_self(), get_self().value);\par
139 \par
140   {\cf20 // user cls contribution}\par
141   int64_t uclsamount;\par
142   {\cf17 auto} uclsamount_iterator = parameters_table.find(name({\cf22 "uclsamount"}).value);\par
143   {\cf19 if} (uclsamount_iterator != parameters_table.end()) \{\par
144     uclsamount = stoi(uclsamount_iterator->value);\par
145   \} {\cf19 else} \{\par
146     uclsamount = UCLSAMOUNT;  {\cf20 // hard floor constant}\par
147   \}\par
148 \par
149   {\cf20 // get double parameters}\par
150   dparameters_index dparameters_table(get_self(), get_self().value);\par
151 \par
152   {\cf20 // daoshare}\par
153   {\cf18 double} daoshare;\par
154   {\cf17 auto} daoshare_iterator = dparameters_table.find(name({\cf22 "daoshare"}).value);\par
155   {\cf19 if} (daoshare_iterator != dparameters_table.end()) \{\par
156     daoshare = daoshare_iterator->value;\par
157   \} {\cf19 else} \{\par
158     daoshare = DAOSHARE;  {\cf20 // hard floor constant}\par
159   \}\par
160 \par
161   {\cf20 // partnershare}\par
162   {\cf18 double} partnershare;\par
163   {\cf17 auto} partnershare_iterator = dparameters_table.find(name({\cf22 "partnershare"}).value);\par
164   {\cf19 if} (partnershare_iterator != dparameters_table.end()) \{\par
165     partnershare = partnershare_iterator->value;\par
166   \} {\cf19 else} \{\par
167     partnershare = PARTNERSHARE;  {\cf20 // hard floor constant}\par
168   \}\par
169 \par
170   {\cf20 // calculate the total asset for user CLS}\par
171   int64_t user_cls_amount = uclsamount * (1.0 + daoshare + partnershare);\par
172   asset ucls = asset(user_cls_amount * 10000, POINT_CURRENCY_SYMBOL);\par
173 \par
174   {\cf19 return} ucls;\par
175 \}\par
176 \par
177 \par
188 {\cf18 void} freeosgov::reguser(name user) \{  {\cf20 // TODO: detect if the user has an existing record from the airclaim}\par
189 \par
190   require_auth(user);\par
191 \par
192   {\cf20 // check that system is operational (masterswitch parameter set to "1")}\par
193   check(check_master_switch(), MSG_FREEOS_SYSTEM_NOT_AVAILABLE);\par
194 \par
195   {\cf20 // get the current iteration}\par
196   uint32_t iteration = current_iteration();\par
197 \par
198   check(iteration != 0, {\cf22 "The freeos system is not yet available"});\par
199 \par
200   {\cf20 // is the user already registered?}\par
201   {\cf20 // find the account in the participants table}\par
202   participants_index participants_table(get_self(), user.value);\par
203   {\cf17 auto} participant_iterator = participants_table.begin();\par
204 \par
205   check(participant_iterator == participants_table.end(), {\cf22 "user is already registered"});\par
206 \par
207   {\cf20 // determine account type}\par
208   {\cf18 string} account_type = get_account_type(user);\par
209   check(account_type == {\cf22 "v"} || account_type == {\cf22 "b"} || account_type == {\cf22 "c"}, {\cf22 "please complete kyc before registering"});\par
210 \par
211   {\cf20 // capture the user's POINTs balance - as these POINTs will be mint-fee-free}\par
212   asset liquid_points = asset(0, POINT_CURRENCY_SYMBOL);  {\cf20 // default=0 if POINTs balance record not found}\par
213   accounts accounts_table(get_self(), user.value);\par
214   {\cf17 auto} points_iterator = accounts_table.find(symbol_code(POINT_CURRENCY_CODE).raw());\par
215   {\cf19 if} (points_iterator != accounts_table.end()) \{\par
216     liquid_points = points_iterator->balance;\par
217   \}\par
218 \par
219   {\cf20 // also include the locked POINTs balance}\par
220   asset locked_points = asset(0, POINT_CURRENCY_SYMBOL); {\cf20 // default=0 if locked POINTs balance record not found}\par
221   lockaccounts locked_accounts_table(get_self(), user.value);\par
222   {\cf17 auto} locked_points_iterator = locked_accounts_table.find(symbol_code(POINT_CURRENCY_CODE).raw());\par
223   {\cf19 if} (locked_points_iterator != locked_accounts_table.end()) \{\par
224     locked_points = locked_points_iterator->balance;\par
225   \}\par
226 \par
227   {\cf20 // determine if the user has an AIRKEY}\par
228   asset airkey_allowance = asset(0, POINT_CURRENCY_SYMBOL); {\cf20 // default=0 if no AIRKEY}\par
229   {\cf17 auto} airkey_iterator = accounts_table.find(symbol_code(AIRKEY_CURRENCY_CODE).raw());\par
230   {\cf19 if} (airkey_iterator != accounts_table.end()) \{\par
231     airkey_allowance = asset(AIRKEY_MINT_FEE_FREE_ALLOWANCE * 10000, POINT_CURRENCY_SYMBOL);\par
232   \}\par
233 \par
234   asset mintfeefree_allowance = liquid_points + locked_points + airkey_allowance;\par
235 \par
236   {\cf20 // store the mint-fee-free allowance}\par
237   {\cf19 if} (mintfeefree_allowance.amount > 0) \{   \par
238 \par
239       {\cf20 // store in the mint_fee_free table}\par
240       mintfeefree_index mintfeefree_table(get_self(), user.value); \par
241       {\cf17 auto} mintfeefree_iterator = mintfeefree_table.begin();\par
242 \par
243       {\cf19 if} (mintfeefree_iterator == mintfeefree_table.end()) \{\par
244         {\cf20 // emplace}\par
245         mintfeefree_table.emplace(get_self(), [&]({\cf17 auto} &m) \{\par
246           m.balance = mintfeefree_allowance;\par
247         \});\par
248       \} {\cf19 else} \{\par
249         {\cf20 // modify - should not be necessary to modify, but include this code in the event of migrations, etc}\par
250         mintfeefree_table.modify(mintfeefree_iterator, get_self(), [&]({\cf17 auto} &m) \{\par
251           m.balance = mintfeefree_allowance;\par
252         \});\par
253       \} \par
254   \}\par
255 \par
256   {\cf20 // add record to the participants table}\par
257   participants_table.emplace(get_self(), [&]({\cf17 auto} &participant) \{\par
258     participant.account_type = account_type;\par
259     participant.registered_iteration = iteration;\par
260     participant.total_issuance_amount = asset(0, POINT_CURRENCY_SYMBOL);\par
261   \});\par
262 \par
263   {\cf20 // update the system record - number of users and CLS}\par
264   asset ucls = calculate_user_cls_addition();\par
265 \par
266   system_index system_table(get_self(), get_self().value);\par
267   {\cf17 auto} system_iterator = system_table.begin();\par
268   {\cf19 if} (system_iterator == system_table.end()) \{\par
269     {\cf20 // emplace}\par
270     system_table.emplace(\par
271         get_self(), [&]({\cf17 auto} &sys) \{\par
272           sys.usercount = 1;\par
273 \par
274           {\cf20 // update the CLS if a verified user}\par
275           {\cf19 if} (is_user_verified(user)) \{\par
276             sys.cls = ucls;\par
277           \}\par
278           \par
279         \});\par
280   \} {\cf19 else} \{\par
281     {\cf20 // modify}\par
282     system_table.modify(system_iterator, get_self(), [&]({\cf17 auto} &sys) \{\par
283       sys.usercount += 1;\par
284 \par
285       {\cf20 // update the CLS if a verified user}\par
286       {\cf19 if} (is_user_verified(user)) \{\par
287         sys.cls += ucls;\par
288       \}\par
289     \});\par
290   \}\par
291 \par
292   {\cf20 // TODO: delete the record from the old users table if they are already registered with the AirClaim}\par
293   {\cf20 // TODO: gov 'users' table to be renamed 'register'}\par
294 \par
295 \}\par
296 \par
297 \par
303 {\cf18 void} freeosgov::reregister(name user) \{\par
304   require_auth(user);\par
305 \par
306   {\cf20 // check that system is operational (masterswitch parameter set to "1")}\par
307   check(check_master_switch(), MSG_FREEOS_SYSTEM_NOT_AVAILABLE);\par
308 \par
309   {\cf20 // original verified user status}\par
310   {\cf18 bool} verified_before = is_user_verified(user);\par
311 \par
312   {\cf20 // get the current iteration}\par
313   check(current_iteration() != 0, {\cf22 "The freeos system is not yet available"});\par
314 \par
315   {\cf20 // set the account type}\par
316   participants_index participants_table(get_self(), user.value);\par
317   {\cf17 auto} participant_iterator = participants_table.begin();\par
318 \par
319   {\cf20 // check if the user has a user registration record}\par
320   check(participant_iterator != participants_table.end(), {\cf22 "user is not registered with freeos"});\par
321 \par
322   {\cf20 // get the account type}\par
323   {\cf18 string} account_type = get_account_type(user);\par
324 \par
325   {\cf20 // set the participant account type}\par
326   participants_table.modify(participant_iterator, get_self(), [&]({\cf17 auto} &participant) \{\par
327     participant.account_type = account_type;\par
328   \});\par
329 \par
330   {\cf20 // new verified user status}\par
331   {\cf18 bool} verified_after = is_user_verified(user);\par
332 \par
333   {\cf20 // update the CLS if a user has become verified}\par
334   {\cf19 if} (verified_before == {\cf17 false} && verified_after == {\cf17 true}) \{\par
335     system_index system_table(get_self(), get_self().value);\par
336     {\cf17 auto} system_iterator = system_table.begin();\par
337     check(system_iterator != system_table.end(), {\cf22 "system record is undefined"});\par
338 \par
339     {\cf20 // modify cls}\par
340     asset ucls = calculate_user_cls_addition();\par
341 \par
342     system_table.modify(system_iterator, get_self(), [&]({\cf17 auto} &sys) \{\par
343         sys.cls += ucls;\par
344     \});\par
345   \}\par
346 \par
347 \}\par
348 \par
349 \par
357 {\cf18 bool} freeosgov::is_registered(name user) \{\par
358 \par
359   participants_index participants_table(get_self(), user.value);\par
360   {\cf17 auto} participant_iterator = participants_table.begin();\par
361 \par
362   {\cf19 return} (participant_iterator != participants_table.end()) ? true : {\cf17 false};\par
363 \}\par
364 \par
365 \par
373 {\cf18 bool} freeosgov::is_user_verified(name user) \{\par
374   {\cf18 bool} verified = {\cf17 false};\par
375 \par
376   {\cf20 // get the participant record}\par
377   participants_index participants_table(get_self(), user.value);\par
378   {\cf17 auto} participant_iterator = participants_table.begin();\par
379   check(participant_iterator != participants_table.end(), {\cf22 "user is not registered"});\par
380   {\cf18 string} account_type = participant_iterator->account_type;\par
381 \par
382   {\cf19 if} (account_type == {\cf22 "v"} || account_type == {\cf22 "b"} || account_type == {\cf22 "c"}) \{\par
383     verified= {\cf17 true};\par
384   \}\par
385 \par
386   {\cf19 if} (has_nft(user)) \{\par
387     verified = {\cf17 true};\par
388   \}\par
389 \par
390   {\cf19 return} verified;\par
391 \}\par
392  {\cf20 // end of identity group}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
maintain.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v maintain.hpp}
{\xe \v maintain.hpp}
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <ctime>}\par
{\f2 #include <eosio/asset.hpp>}\par
{\f2 #include <cmath>}\par
{\f2 #include "identity.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
maintain.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <ctime>}\par
2 {\cf21 #include <eosio/asset.hpp>}\par
3 {\cf21 #include <cmath>}\par
4 {\cf21 #include "identity.hpp"}\par
5 \par
6 {\cf17 using namespace }eosio;\par
7 {\cf17 using namespace }freedao;\par
8 {\cf17 using namespace }std;\par
9 \par
10 \par
11 {\cf20 // TODO: Remove all of the code in this module in production version}\par
12 \par
13 {\cf18 void} freeosgov::calcfee({\cf17 const} name &from, {\cf17 const} asset& transfer_quantity)\par
14 \{\par
15    asset fee = asset(0, symbol(FREEBI_CURRENCY_CODE, 4));   {\cf20 // default value}\par
16    \par
17    name freeoscontract = name({\cf22 "freeosgov2"});\par
18    name freebicontract = name({\cf22 "freebi"});\par
19 \par
20    {\cf20 // the transfer fee is only charged for user-to-user transfers - do not charge if the transfer is from a contract}\par
21    {\cf19 if} (from != freeoscontract && from != freebicontract) \{\par
22       name fee_parameter = name({\cf22 "freebixfee"});\par
23    \par
24       freedao::dparameters_index dparameters_table(freeoscontract, freeoscontract.value);\par
25       {\cf17 auto} dparameter_iterator = dparameters_table.find(fee_parameter.value);\par
26       check(dparameter_iterator != dparameters_table.end(), fee_parameter.to_string() + {\cf22 " is not defined"});\par
27       {\cf18 double} fee_percent = dparameter_iterator->value;\par
28 \par
29       int64_t fee_units = transfer_quantity.amount * (fee_percent / 100.0);\par
30       fee = asset(fee_units, symbol(FREEBI_CURRENCY_CODE, 4));\par
31    \}\par
32 \par
33    asset recipient_receives = transfer_quantity - fee;   \par
34    \par
35    check({\cf17 false}, {\cf22 "transfer_quanity = "} + to_string(transfer_quantity.amount) + {\cf22 ", fee = "} + to_string(fee.amount) + {\cf22 ", recipient_recives = "} + to_string(recipient_receives.amount));\par
36 \}\par
37 \par
38 {\cf20 // set mintfeefree amount}\par
39 {\cf18 void} freeosgov::setmff(name user, asset amount) \{\par
40   require_auth(get_self());\par
41 \par
42   {\cf17 auto} sym = amount.symbol;\par
43   check(sym == POINT_CURRENCY_SYMBOL, {\cf22 "invalid symbol name, please specify amount in POINTs"});\par
44 \par
45   mintfeefree_index mintfeefree_table(get_self(), user.value);\par
46   {\cf17 auto} user_iterator = mintfeefree_table.begin();\par
47 \par
48   {\cf19 if} (user_iterator != mintfeefree_table.end()) \{\par
49     {\cf20 // modify}\par
50     mintfeefree_table.modify(user_iterator, get_self(), [&]({\cf17 auto} &m) \{\par
51       m.balance = amount;\par
52     \});\par
53   \} {\cf19 else} \{\par
54     {\cf20 // emplace}\par
55     mintfeefree_table.emplace(get_self(), [&]({\cf17 auto} &m) \{\par
56       m.balance = amount;\par
57     \});\par
58   \}\par
59 \par
60 \}\par
61 \par
62 \par
63 {\cf18 void} freeosgov::eraseuser({\cf18 string} username) \{\par
64 \par
65     name user = name(username);\par
66 \par
67     participants_index participants_table(get_self(), user.value);\par
68     {\cf17 auto} participant_iterator = participants_table.begin();\par
69 \par
70     {\cf19 if} (participant_iterator != participants_table.end()) \{\par
71       participants_table.erase(participant_iterator);\par
72     \}\par
73     \par
74 \}\par
75 \par
76 {\cf18 void} freeosgov::createuser({\cf18 string} username, {\cf18 string} account_type, uint32_t registered, uint32_t surveys,\par
77                           uint32_t votes, uint32_t ratifys, uint32_t issues, uint32_t last_claim, asset total) \{\par
78 \par
79   name user = name(username);\par
80 \par
81   participants_index participants_table(get_self(), user.value);\par
82 \par
83   participants_table.emplace(get_self(), [&]({\cf17 auto} &s) \{\par
84     s.account_type = account_type;\par
85     s.registered_iteration = registered;\par
86     s.surveys = surveys;\par
87     s.votes = votes;\par
88     s.ratifys = ratifys;\par
89     s.issuances = issues;\par
90     s.last_claim = last_claim;\par
91     s.total_issuance_amount = total;\par
92   \});\par
93 \}\par
94 \par
95 {\cf18 void} freeosgov::refund_function(name user) \{\par
96   credit_index credit_table(get_self(), user.value);\par
97   {\cf17 auto} credit_iterator = credit_table.begin();\par
98 \par
99   check(credit_iterator != credit_table.end(), {\cf22 "credit record not found"});\par
100   asset credit = credit_iterator->balance;\par
101   {\cf18 string} credit_msg = {\cf22 "credit for "} + user.to_string() + {\cf22 " = "} + credit.to_string();\par
102   check({\cf17 false}, credit_msg);\par
103 \}\par
104 \par
105 {\cf20 // ACTION}\par
106 {\cf20 // maintenance actions - TODO: delete from production}\par
107 {\cf18 void} freeosgov::maintain({\cf18 string} action, name user) \{\par
108 \par
109   require_auth(get_self());\par
110 \par
111   {\cf19 if} (action == {\cf22 "clear rewards"}) \{\par
112     rewards_index rewards_table(get_self(), get_self().value);\par
113     {\cf17 auto} reward_iterator = rewards_table.begin();\par
114     \par
115     {\cf19 while} (reward_iterator != rewards_table.end()) \{\par
116       reward_iterator = rewards_table.erase(reward_iterator);\par
117     \}\par
118   \}\par
119 \par
120   {\cf19 if} (action == {\cf22 "restore rewards"}) \{\par
121     rewards_index rewards_table(get_self(), get_self().value);\par
122 \par
123     rewards_table.emplace(get_self(), [&]({\cf17 auto} &r) \{\par
124       r.iteration = 461495,\par
125       r.iteration_cls = asset(535671010708, POINT_CURRENCY_SYMBOL);\par
126       r.iteration_issuance = asset(0, POINT_CURRENCY_SYMBOL);\par
127       r.participant_issuance = asset(0, POINT_CURRENCY_SYMBOL);\par
128       r.participants = 0;\par
129       r.issuance_rate = 1.00000000000000000;\par
130       r.mint_fee_percent = 6.00000000000000000;\par
131       r.mint_fee_percent_xpr = 6.0;\par
132       r.mint_fee_percent_xusdc = 6.0;\par
133       r.locking_threshold = 0.01670000000000000;\par
134       r.pool = 1;\par
135       r.burn = 0;\par
136       r.ratified = 0;\par
137       {\cf18 double}    mint_freebi_transfer_fee = 0.0;\par
138       {\cf18 double}    point_freeos_ratio = 1.0;\par
139       {\cf18 double}    mint_throttle = 0.0;\par
140       {\cf18 bool}    burn_to_boost = {\cf17 false};\par
141       \});\par
142 \par
143       rewards_table.emplace(get_self(), [&]({\cf17 auto} &r) \{\par
144       r.iteration = 461496,\par
145       r.iteration_cls = asset(535671010708, POINT_CURRENCY_SYMBOL);\par
146       r.iteration_issuance = asset(0, POINT_CURRENCY_SYMBOL);\par
147       r.participant_issuance = asset(0, POINT_CURRENCY_SYMBOL);\par
148       r.participants = 0;\par
149       r.issuance_rate = 1.00000000000000000;\par
150       r.mint_fee_percent = 6.00000000000000000;\par
151       r.mint_fee_percent_xpr = 6.0;\par
152       r.mint_fee_percent_xusdc = 6.0;\par
153       r.locking_threshold = 0.01670000000000000;\par
154       r.pool = 1;\par
155       r.burn = 0;\par
156       r.ratified = 0;\par
157       {\cf18 double}    mint_freebi_transfer_fee = 0.0;\par
158       {\cf18 double}    point_freeos_ratio = 1.0;\par
159       {\cf18 double}    mint_throttle = 0.0;\par
160       {\cf18 bool}      burn_to_boost = {\cf17 false};\par
161       \});\par
162 \par
163       rewards_table.emplace(get_self(), [&]({\cf17 auto} &r) \{\par
164       r.iteration = 461497,\par
165       r.iteration_cls = asset(535671010708, POINT_CURRENCY_SYMBOL);\par
166       r.iteration_issuance = asset(0, POINT_CURRENCY_SYMBOL);\par
167       r.participant_issuance = asset(0, POINT_CURRENCY_SYMBOL);\par
168       r.participants = 0;\par
169       r.issuance_rate = 1.00000000000000000;\par
170       r.mint_fee_percent = 6.00000000000000000;\par
171       r.mint_fee_percent_xpr = 6.0;\par
172       r.mint_fee_percent_xusdc = 6.0;\par
173       r.locking_threshold = 0.01670000000000000;\par
174       r.pool = 1;\par
175       r.burn = 0;\par
176       r.ratified = 0;\par
177       {\cf18 double}    mint_freebi_transfer_fee = 0.0;\par
178       {\cf18 double}    point_freeos_ratio = 1.0;\par
179       {\cf18 double}    mint_throttle = 0.0;\par
180       {\cf18 bool}      burn_to_boost = {\cf17 false};\par
181       \});\par
182 \par
183       rewards_table.emplace(get_self(), [&]({\cf17 auto} &r) \{\par
184       r.iteration = 461498,\par
185       r.iteration_cls = asset(535671010708, POINT_CURRENCY_SYMBOL);\par
186       r.iteration_issuance = asset(0, POINT_CURRENCY_SYMBOL);\par
187       r.participant_issuance = asset(0, POINT_CURRENCY_SYMBOL);\par
188       r.participants = 0;\par
189       r.issuance_rate = 1.00000000000000000;\par
190       r.mint_fee_percent = 6.00000000000000000;\par
191       r.mint_fee_percent_xpr = 6.0;\par
192       r.mint_fee_percent_xusdc = 6.0;\par
193       r.locking_threshold = 0.01670000000000000;\par
194       r.pool = 1;\par
195       r.burn = 0;\par
196       r.ratified = 0;\par
197       {\cf18 double}    mint_freebi_transfer_fee = 0.0;\par
198       {\cf18 double}    point_freeos_ratio = 1.0;\par
199       {\cf18 double}    mint_throttle = 0.0;\par
200       {\cf18 bool}      burn_to_boost = {\cf17 false};\par
201       \});\par
202   \}\par
203   \par
204   {\cf19 if} (action == {\cf22 "clear voterecord"}) \{\par
205     vote_index voterecord_table(get_self(), get_self().value);\par
206     {\cf17 auto} voterecord_iterator = voterecord_table.begin();\par
207     check(voterecord_iterator != voterecord_table.end(), {\cf22 "voterecord not found"});\par
208 \par
209     voterecord_table.erase(voterecord_iterator);\par
210   \}\par
211 \par
212   {\cf19 if} (action == {\cf22 "restore voterecord"}) \{\par
213     vote_index voterecord_table(get_self(), get_self().value);\par
214 \par
215     voterecord_table.emplace(get_self(), [&]({\cf17 auto} &v) \{ v.iteration = 461498; \});\par
216   \}\par
217 \par
218   {\cf19 if} (action == {\cf22 "diagnose unlock"}) \{\par
219 \par
220     {\cf20 // calculate the amount to be unvested - get the percentage for the iteration}\par
221     system_index system_table(get_self(), get_self().value);\par
222     {\cf17 auto} system_iterator = system_table.begin();\par
223     check(system_iterator != system_table.end(), {\cf22 "system record not found"});\par
224     uint32_t unlock_percent = system_iterator->unlockpercent;\par
225 \par
226     {\cf20 // check that the unvest percentage is within limits}\par
227     check(unlock_percent > 0 && unlock_percent <= 100,\par
228           {\cf22 "locked POINTs cannot be unlocked in this claim period. Please try during next claim period"});\par
229 \par
230 \par
231     asset locked_balance = asset(0, POINT_CURRENCY_SYMBOL);\par
232     lockaccounts locked_accounts_table(get_self(), user.value);\par
233     {\cf17 auto} locked_account_iterator = locked_accounts_table.begin();\par
234 \par
235     {\cf19 if} (locked_account_iterator != locked_accounts_table.end()) \{\par
236       locked_balance = locked_account_iterator->balance;\par
237     \}\par
238 \par
239     {\cf20 // if user's locked balance is 0 then nothing to do, so return}\par
240     {\cf19 if} (locked_balance.amount == 0) \{\par
241       {\cf19 return};\par
242     \}\par
243 \par
244     {\cf20 // calculate the amount of locked POINTs to convert to liquid POINTs}\par
245     {\cf20 // Warning: these calculations use mixed-type arithmetic. Any changes need to}\par
246     {\cf20 // be thoroughly tested.}\par
247 \par
248     {\cf18 double} percentage = unlock_percent / 100.0;\par
249     {\cf18 double} locked_amount = locked_balance.amount / 10000.0;\par
250     {\cf18 double} percentage_applied = locked_amount * percentage;\par
251     {\cf18 double} adjusted_amount = ceil(percentage_applied); {\cf20 // rounding up to whole units}\par
252     uint64_t adjusted_units = adjusted_amount * 10000;\par
253 \par
254     {\cf20 // to prevent rounding up to more than the locked point balance, apply this adjustment}\par
255     {\cf20 // this will bring the locked balance to zero}\par
256     {\cf19 if} (adjusted_units > locked_balance.amount) \{\par
257       adjusted_units = locked_balance.amount;\par
258     \}\par
259 \par
260     asset converted_points = asset(adjusted_units, POINT_CURRENCY_SYMBOL);\par
261 \par
262     {\cf18 string} diagnostic =  {\cf22 "percentage: "} + to_string(percentage) +\par
263                         {\cf22 ", locked_amount: "} + to_string(locked_amount) +\par
264                         {\cf22 ", percentage_applied: "} + to_string(percentage_applied) +\par
265                         {\cf22 ", adjusted_amount: "} + to_string(adjusted_amount) +\par
266                         {\cf22 ", adjusted_units: "} + to_string(adjusted_units) +\par
267                         {\cf22 ", converted_points: "} + converted_points.to_string();\par
268 \par
269     check({\cf17 false}, diagnostic);\par
270   \}\par
271 \par
272   {\cf19 if} (action == {\cf22 "test has_nft"}) \{\par
273     {\cf18 bool} nft_holder = has_nft(user);\par
274 \par
275     {\cf19 if} (nft_holder) \{\par
276       check({\cf17 false}, {\cf22 "user has nft"});\par
277     \} {\cf19 else} \{\par
278       check({\cf17 false}, {\cf22 "user has no nft"});\par
279     \}\par
280   \}\par
281 \par
282   {\cf19 if} (action == {\cf22 "clear deposits"}) \{\par
283     deposits_index deposits_table(get_self(), get_self().value);\par
284     {\cf17 auto} deposit_iterator = deposits_table.begin();\par
285     {\cf19 while} (deposit_iterator != deposits_table.end()) \{\par
286       deposit_iterator = deposits_table.erase(deposit_iterator);\par
287     \}\par
288   \}\par
289 \par
290   {\cf19 if} (action == {\cf22 "locked points"}) \{\par
291     symbol point_sym = symbol(POINT_CURRENCY_CODE, 4);\par
292     lockaccounts locked_points_table(get_self(), user.value);\par
293     {\cf17 auto} locked_iterator = locked_points_table.find(point_sym.code().raw());\par
294 \par
295     {\cf19 if} (locked_iterator == locked_points_table.end()) \{\par
296       locked_points_table.emplace(\par
297         get_self(), [&]({\cf17 auto} &l) \{\par
298           l.balance = asset(9000, POINT_CURRENCY_SYMBOL);\par
299         \});\par
300     \} {\cf19 else} \{\par
301       locked_points_table.modify(locked_iterator, get_self(), [&]({\cf17 auto} &l) \{\par
302         l.balance = asset(9000, POINT_CURRENCY_SYMBOL);\par
303       \});\par
304     \}\par
305     \par
306   \}\par
307 \par
308   {\cf19 if} (action == {\cf22 "constant test"}) \{\par
309     symbol ca_point_sym = symbol(POINT_CURRENCY_CODE, 4);\par
310     asset ca = asset(1234567, ca_point_sym);\par
311 \par
312     symbol st_point_sym = symbol(POINT_CURRENCY_CODE, 4);\par
313     asset st = asset(1234567, st_point_sym);\par
314 \par
315     check({\cf17 false}, {\cf22 "ca_asset = "} + ca.to_string() + {\cf22 ", st asset = "} + st.to_string());\par
316   \}\par
317   \par
318   {\cf19 if} (action == {\cf22 "liquid points"}) \{\par
319     symbol point_sym = symbol(POINT_CURRENCY_CODE, 4);\par
320     accounts points_table(get_self(), user.value);\par
321     {\cf17 auto} points_iterator = points_table.find(point_sym.code().raw());\par
322 \par
323     {\cf19 if} (points_iterator == points_table.end()) \{\par
324       points_table.emplace(\par
325         get_self(), [&]({\cf17 auto} &l) \{\par
326           l.balance = asset(1000000000, POINT_CURRENCY_SYMBOL);\par
327         \});\par
328     \} {\cf19 else} \{\par
329       points_table.modify(points_iterator, get_self(), [&]({\cf17 auto} &l) \{\par
330         l.balance = asset(1000000000, POINT_CURRENCY_SYMBOL);\par
331       \});\par
332     \}\par
333     \par
334   \}\par
335 \par
336   {\cf19 if} (action == {\cf22 "fiddle reward"}) \{\par
337     rewards_index rewards_table(get_self(), get_self().value);\par
338     {\cf17 auto} reward_iterator = rewards_table.find(5339);\par
339 \par
340     {\cf19 if} (reward_iterator != rewards_table.end()) \{\par
341       rewards_table.modify(reward_iterator, get_self(), [&]({\cf17 auto} &r) \{\par
342         r.iteration_issuance = asset(1000000000, POINT_CURRENCY_SYMBOL);\par
343         r.participant_issuance = asset(10000000, POINT_CURRENCY_SYMBOL);\par
344       \});\par
345     \}\par
346   \}\par
347 \par
348   {\cf19 if} (action == {\cf22 "unclaim"}) \{\par
349     participants_index participants_table(get_self(), user.value);\par
350     {\cf17 auto} participant_iterator = participants_table.begin();\par
351 \par
352     {\cf19 if} (participant_iterator != participants_table.end()) \{\par
353       participants_table.modify(participant_iterator, get_self(), [&]({\cf17 auto} &u) \{\par
354         u.last_claim = u.last_claim - 1;\par
355       \});\par
356     \}\par
357   \}\par
358 \par
359   {\cf19 if} (action == {\cf22 "set iteration"}) \{\par
360     system_index system_table(get_self(), get_self().value);\par
361     {\cf17 auto} system_iterator = system_table.begin();\par
362     check(system_iterator != system_table.end(), {\cf22 "system record not found"});\par
363 \par
364     system_table.modify(system_iterator, get_self(), [&]({\cf17 auto} &sys) \{\par
365       sys.iteration = 460617;\par
366     \});\par
367 \par
368     {\cf20 // delete rewards record if found}\par
369     rewards_index rewards_table(get_self(), get_self().value);\par
370     {\cf17 auto} reward_iterator = rewards_table.find(460617);\par
371     {\cf19 if} (reward_iterator != rewards_table.end()) \{\par
372       rewards_table.erase(reward_iterator);\par
373     \}\par
374   \}\par
375 \par
376   {\cf19 if} (action == {\cf22 "erase old user"}) \{\par
377     airclaim_users_index oldusers_table(get_self(), user.value);\par
378     {\cf17 auto} olduser_iterator = oldusers_table.begin();\par
379 \par
380     {\cf19 if} (olduser_iterator != oldusers_table.end()) \{\par
381       oldusers_table.erase(olduser_iterator);\par
382     \}\par
383   \}\par
384 \par
385 \par
386   {\cf19 if} (action == {\cf22 "freebi balance"}) \{\par
387     asset freebi_balance;\par
388 \par
389     int64_t freebi_balance_amount = 0;  {\cf20 // default value}\par
390     {\cf18 string} freebi_tokens_contract = get_parameter(name({\cf22 "freebitokens"}));\par
391     freebi_accounts freebi_accounts_table(name(freebi_tokens_contract), user.value);\par
392     {\cf17 auto} freebi_iterator = freebi_accounts_table.begin();\par
393     {\cf19 if} (freebi_iterator != freebi_accounts_table.end()) \{\par
394       freebi_balance = freebi_iterator->balance;\par
395       freebi_balance_amount = freebi_balance.amount;\par
396     \}\par
397 \par
398     check({\cf17 false}, {\cf22 "user = "} + user.to_string() + {\cf22 ", contract = "} + freebi_tokens_contract + {\cf22 ", freebi_balance = "} + freebi_balance.to_string());\par
399   \}\par
400 \par
401   {\cf19 if} (action == {\cf22 "erase user"}) \{\par
402     participants_index participants_table(get_self(), user.value);\par
403     {\cf17 auto} participant_iterator = participants_table.begin();\par
404 \par
405     {\cf19 if} (participant_iterator != participants_table.end()) \{\par
406       participants_table.erase(participant_iterator);\par
407 \par
408       {\cf20 // decrement number of users}\par
409       system_index system_table(get_self(), get_self().value);\par
410       {\cf17 auto} system_iterator = system_table.begin();\par
411       check(system_iterator != system_table.end(), {\cf22 "system record is undefined"});\par
412 \par
413       system_table.modify(system_iterator, get_self(), [&]({\cf17 auto} &sys) \{\par
414         sys.usercount = sys.usercount - 1;\par
415       \});\par
416     \}\par
417 \par
418   \}\par
419 \par
420   {\cf19 if} (action == {\cf22 "status"}) \{\par
421     {\cf18 string} status_msg = string({\cf22 ""});\par
422 \par
423     {\cf20 // XPR}\par
424     status_msg = status_msg + {\cf22 "XPR: "};\par
425     accounts xpr_table(name({\cf22 "eosio.token"}), user.value);\par
426     {\cf17 auto} xpr_iterator = xpr_table.begin();\par
427 \par
428     {\cf19 if} (xpr_iterator != xpr_table.end()) \{\par
429       status_msg = status_msg + xpr_iterator->balance.to_string() + {\cf22 ", "};\par
430     \} {\cf19 else} \{\par
431       status_msg = status_msg + {\cf22 "None, "};\par
432     \}\par
433 \par
434     {\cf20 // XUSDC}\par
435     status_msg = status_msg + {\cf22 "\\nXUSDC: "};\par
436     accounts xusdc_table(name({\cf22 "xtokens"}), user.value);\par
437     {\cf17 auto} xusdc_iterator = xusdc_table.begin();\par
438 \par
439     {\cf19 if} (xusdc_iterator != xusdc_table.end()) \{\par
440       status_msg = status_msg + xusdc_iterator->balance.to_string() + {\cf22 ", "};\par
441     \} {\cf19 else} \{\par
442       status_msg = status_msg + {\cf22 "None, "};\par
443     \}\par
444 \par
445     {\cf20 // CREDITS}\par
446     status_msg = status_msg + {\cf22 "\\nCREDITs: "};\par
447     credit_index credit_table(get_self(), user.value);\par
448     {\cf17 auto} credit_iterator = credit_table.begin();\par
449 \par
450     {\cf18 string} credits_str = string({\cf22 ""});\par
451     {\cf19 while} (credit_iterator != credit_table.end()) \{\par
452       credits_str = credits_str + credit_iterator->balance.to_string() + {\cf22 ", "};\par
453       credit_iterator++;\par
454     \}\par
455 \par
456     {\cf19 if} (credits_str.length() == 0) \{\par
457       credits_str = string({\cf22 "None, "});\par
458     \}\par
459 \par
460     status_msg = status_msg + credits_str;\par
461 \par
462     {\cf20 // POINTs}\par
463     status_msg = status_msg + {\cf22 "\\nPOINTs: "};\par
464     accounts points_table(get_self(), user.value);\par
465     {\cf17 auto} points_iterator = points_table.begin();\par
466 \par
467     {\cf19 if} (points_iterator != points_table.end()) \{\par
468       status_msg = status_msg + points_iterator->balance.to_string() + {\cf22 ", "};\par
469     \} {\cf19 else} \{\par
470       status_msg = status_msg + {\cf22 "None, "};\par
471     \}\par
472 \par
473     {\cf20 // locked POINTs}\par
474     status_msg = status_msg + {\cf22 "\\nLocked POINTs: "};\par
475     lockaccounts locked_points_table(get_self(), user.value);\par
476     {\cf17 auto} locked_points_iterator = locked_points_table.begin();\par
477 \par
478     {\cf19 if} (locked_points_iterator != locked_points_table.end()) \{\par
479       status_msg = status_msg + locked_points_iterator->balance.to_string() + {\cf22 ", "};\par
480     \} {\cf19 else} \{\par
481       status_msg = status_msg + {\cf22 "None, "};\par
482     \}\par
483 \par
484     {\cf20 // MFF allowance}\par
485     status_msg = status_msg + {\cf22 "\\nMFF: "};\par
486     mintfeefree_index mff_table(get_self(), user.value);\par
487     {\cf17 auto} mff_iterator = mff_table.begin();\par
488 \par
489     {\cf19 if} (mff_iterator != mff_table.end()) \{\par
490       status_msg = status_msg + mff_iterator->balance.to_string() + {\cf22 ", "};\par
491     \} {\cf19 else} \{\par
492       status_msg = status_msg + {\cf22 "None, "};\par
493     \}\par
494 \par
495     {\cf20 // FREEBI}\par
496     status_msg = status_msg + {\cf22 "\\nFREEBI: "};\par
497     {\cf18 string} freebi_tokens_contract = get_parameter(name({\cf22 "freebitokens"}));\par
498     accounts freebi_table(name(freebi_tokens_contract), user.value);\par
499     {\cf17 auto} freebi_iterator = freebi_table.begin();\par
500 \par
501     {\cf19 if} (freebi_iterator != freebi_table.end()) \{\par
502       status_msg = status_msg + freebi_iterator->balance.to_string() + {\cf22 ", "};\par
503     \} {\cf19 else} \{\par
504       status_msg = status_msg + {\cf22 "None, "};\par
505     \}\par
506 \par
507     {\cf20 // FREEOS}\par
508     status_msg = status_msg + {\cf22 "\\nFREEOS: "};\par
509     {\cf18 string} freeos_tokens_contract = get_parameter(name({\cf22 "freeostokens"}));\par
510     accounts freeos_table(name(freeos_tokens_contract), user.value);\par
511     {\cf17 auto} freeos_iterator = freeos_table.begin();\par
512 \par
513     {\cf19 if} (freeos_iterator != freeos_table.end()) \{\par
514       status_msg = status_msg + freeos_iterator->balance.to_string();\par
515     \} {\cf19 else} \{\par
516       status_msg = status_msg + {\cf22 "None"};\par
517     \}\par
518     \par
519     {\cf20 // Output}\par
520     check({\cf17 false}, status_msg);\par
521 \par
522   \}\par
523 \par
524 \par
525 \par
526   {\cf19 if} (action == {\cf22 "supplies"}) \{\par
527     {\cf18 string} status_msg = string({\cf22 ""});\par
528 \par
529     {\cf20 // XPR}\par
530     status_msg = status_msg + {\cf22 "\\nXPR: "};\par
531     accounts xpr_table(name({\cf22 "eosio.token"}), get_self().value);\par
532     {\cf17 auto} xpr_iterator = xpr_table.begin();\par
533 \par
534     {\cf19 if} (xpr_iterator != xpr_table.end()) \{\par
535       status_msg = status_msg + xpr_iterator->balance.to_string() + {\cf22 ", "};\par
536     \} {\cf19 else} \{\par
537       status_msg = status_msg + {\cf22 "None, "};\par
538     \}\par
539 \par
540     {\cf20 // XUSDC}\par
541     status_msg = status_msg + {\cf22 "\\nXUSDC: "};\par
542     accounts xusdc_table(name({\cf22 "xtokens"}), get_self().value);\par
543     {\cf17 auto} xusdc_iterator = xusdc_table.begin();\par
544 \par
545     {\cf19 if} (xusdc_iterator != xusdc_table.end()) \{\par
546       status_msg = status_msg + xusdc_iterator->balance.to_string() + {\cf22 ", "};\par
547     \} {\cf19 else} \{\par
548       status_msg = status_msg + {\cf22 "None, "};\par
549     \}\par
550 \par
551     {\cf20 // POINTs}\par
552     status_msg = status_msg + {\cf22 "\\nPOINTs: "};\par
553     accounts points_table(get_self(), get_self().value);\par
554     {\cf17 auto} points_iterator = points_table.begin();\par
555 \par
556     {\cf19 if} (points_iterator != points_table.end()) \{\par
557       status_msg = status_msg + points_iterator->balance.to_string() + {\cf22 ", "};\par
558     \} {\cf19 else} \{\par
559       status_msg = status_msg + {\cf22 "None, "};\par
560     \}\par
561 \par
562     {\cf20 // FREEBI}\par
563     status_msg = status_msg + {\cf22 "\\nFREEBI: "};\par
564     {\cf18 string} freebi_tokens_contract = get_parameter(name({\cf22 "freebitokens"}));\par
565     accounts freebi_table(name(freebi_tokens_contract), get_self().value);\par
566     {\cf17 auto} freebi_iterator = freebi_table.begin();\par
567 \par
568     {\cf19 if} (freebi_iterator != freebi_table.end()) \{\par
569       status_msg = status_msg + freebi_iterator->balance.to_string() + {\cf22 ", "};\par
570     \} {\cf19 else} \{\par
571       status_msg = status_msg + {\cf22 "None, "};\par
572     \}\par
573 \par
574     {\cf20 // FREEOS}\par
575     status_msg = status_msg + {\cf22 "\\nFREEOS: "};\par
576     {\cf18 string} freeos_tokens_contract = get_parameter(name({\cf22 "freebitokens"}));\par
577     accounts freeos_table(name(freeos_tokens_contract), user.value);\par
578     {\cf17 auto} freeos_iterator = freeos_table.begin();\par
579 \par
580     {\cf19 if} (freeos_iterator != freeos_table.end()) \{\par
581       status_msg = status_msg + freeos_iterator->balance.to_string() + {\cf22 ", "};\par
582     \} {\cf19 else} \{\par
583       status_msg = status_msg + {\cf22 "None, "};\par
584     \}\par
585 \par
586     {\cf20 // supply POINT}\par
587     status_msg = status_msg + {\cf22 "\\nPOINT supply: "};\par
588     symbol point_sym = symbol(POINT_CURRENCY_CODE, 4);\par
589     stats point_stat_table(get_self(), point_sym.code().raw());\par
590     {\cf17 auto} point_stat_iterator = point_stat_table.find(point_sym.code().raw());\par
591     \par
592     {\cf19 if} (point_stat_iterator != point_stat_table.end()) \{\par
593       status_msg = status_msg + point_stat_iterator->supply.to_string() + {\cf22 ", "};\par
594     \} {\cf19 else} \{\par
595       status_msg = status_msg + {\cf22 "None, "};\par
596     \}\par
597 \par
598     {\cf20 // supply FREEBI}\par
599     status_msg = status_msg + {\cf22 "\\nFREEBI supply: "};\par
600     symbol freebi_sym = symbol(FREEBI_CURRENCY_CODE, 4);\par
601     stats freebi_stat_table(name(freebi_tokens_contract), freebi_sym.code().raw());\par
602     {\cf17 auto} freebi_stat_iterator = freebi_stat_table.find(freebi_sym.code().raw());\par
603     \par
604     {\cf19 if} (freebi_stat_iterator != freebi_stat_table.end()) \{\par
605       status_msg = status_msg + freebi_stat_iterator->supply.to_string() + {\cf22 ", "};\par
606     \} {\cf19 else} \{\par
607       status_msg = status_msg + {\cf22 "None, "};\par
608     \}\par
609 \par
610     {\cf20 // supply FREEOS}\par
611     status_msg = status_msg + {\cf22 "\\nFREEOS supply: "};\par
612     symbol freeos_sym = symbol(FREEOS_CURRENCY_CODE, 4);\par
613     stats freeos_stat_table(name(freeos_tokens_contract), freeos_sym.code().raw());\par
614     {\cf17 auto} freeos_stat_iterator = freeos_stat_table.find(freeos_sym.code().raw());\par
615     \par
616     {\cf19 if} (freeos_stat_iterator != freeos_stat_table.end()) \{\par
617       status_msg = status_msg + freeos_stat_iterator->supply.to_string() + {\cf22 ", "};\par
618     \} {\cf19 else} \{\par
619       status_msg = status_msg + {\cf22 "None, "};\par
620     \}\par
621 \par
622     {\cf20 // Output}\par
623     check({\cf17 false}, status_msg);\par
624 \par
625   \}\par
626   \par
627   {\cf19 if} (action == {\cf22 "user credit XPR"}) \{\par
628 \par
629     symbol xpr_sym = symbol(XPR_CURRENCY_CODE, 4);\par
630 \par
631     credit_index credit_table(get_self(), user.value);\par
632     {\cf17 auto} credit_iterator = credit_table.find(xpr_sym.code().raw());\par
633 \par
634     check(credit_iterator != credit_table.end(), {\cf22 "credit record not found"});\par
635     asset credit = credit_iterator->balance;\par
636     {\cf18 string} credit_msg = {\cf22 "credit for "} + user.to_string() + {\cf22 " = "} + credit.to_string();\par
637     check({\cf17 false}, credit_msg);\par
638   \}\par
639 \par
640   {\cf19 if} (action == {\cf22 "user credit FREEBI"}) \{\par
641 \par
642     symbol xpr_sym = symbol(FREEBI_CURRENCY_CODE, 4);\par
643 \par
644     credit_index credit_table(get_self(), user.value);\par
645     {\cf17 auto} credit_iterator = credit_table.find(xpr_sym.code().raw());\par
646 \par
647     check(credit_iterator != credit_table.end(), {\cf22 "credit record not found"});\par
648     asset credit = credit_iterator->balance;\par
649     {\cf18 string} credit_msg = {\cf22 "credit for "} + user.to_string() + {\cf22 " = "} + credit.to_string();\par
650     check({\cf17 false}, credit_msg);\par
651   \}\par
652 \par
653   {\cf19 if} (action == {\cf22 "clear user credit"}) \{\par
654     credit_index credit_table(get_self(), user.value);\par
655     {\cf17 auto} credit_iterator = credit_table.begin();\par
656 \par
657     check(credit_iterator != credit_table.end(), {\cf22 "credit record not found"});\par
658     credit_table.erase(credit_iterator);\par
659   \}\par
660 \par
661   {\cf19 if} (action == {\cf22 "user credit function"}) \{\par
662     refund_function(user);\par
663   \}\par
664 \par
665   {\cf19 if} (action == {\cf22 "last reward"}) \{\par
666     rewards_index rewards_table(get_self(), get_self().value);\par
667     {\cf17 auto} reward_iterator = rewards_table.rbegin();\par
668     check({\cf17 false}, {\cf22 "latest reward is for iteration "} + to_string(reward_iterator->iteration));\par
669   \}\par
670 \par
671   {\cf19 if} (action == {\cf22 "clear participants"}) \{\par
672 \par
673       eraseuser({\cf22 "bigvern"});\par
674       eraseuser({\cf22 "billbeaumont"});\par
675       eraseuser({\cf22 "celiacollins"});\par
676       eraseuser({\cf22 "deliadally"});\par
677       eraseuser({\cf22 "dennisedolan"});\par
678       eraseuser({\cf22 "smcpher1"});\par
679       eraseuser({\cf22 "vennievans"});\par
680       eraseuser({\cf22 "veronicavale"});\par
681       eraseuser({\cf22 "verovera"});\par
682       eraseuser({\cf22 "vickvindaloo"});\par
683       eraseuser({\cf22 "vivcoleman"});      \par
684       eraseuser({\cf22 "vivvestin"});\par
685 \par
686   \}\par
687 \par
688   {\cf19 if} (action == {\cf22 "migrate"}) \{\par
689     {\cf20 // old users record}\par
690     old_users_index old_users_table(get_self(), user.value);\par
691     {\cf17 auto} old_user_iterator = old_users_table.begin();\par
692     check(old_user_iterator != old_users_table.end(), {\cf22 "user not found in old users table"});\par
693 \par
694     {\cf20 // new users table}\par
695     participants_index participants_table(get_self(), user.value);\par
696     participants_table.emplace(\par
697         get_self(), [&]({\cf17 auto} &p) \{\par
698           p.account_type = old_user_iterator->account_type;\par
699           p.registered_iteration = old_user_iterator->registered_iteration;\par
700           p.issuances = old_user_iterator->issuances;\par
701           p.total_issuance_amount = old_user_iterator->total_issuance_amount;\par
702           p.votes = old_user_iterator->votes;\par
703           p.last_claim = old_user_iterator->last_claim;\par
704         \});\par
705   \}\par
706   \par
707   {\cf19 if} (action == {\cf22 "restore participants"}) \{\par
708     createuser({\cf22 "bigvern"}, {\cf22 "v"}, 460614, 3, 6, 4, 3, 460691, asset(122788996, POINT_CURRENCY_SYMBOL));\par
709     createuser({\cf22 "billbeaumont"}, {\cf22 "e"}, 3216, 0, 0, 0, 0, 0, asset(0, POINT_CURRENCY_SYMBOL));\par
710     createuser({\cf22 "celiacollins"}, {\cf22 "e"}, 3216, 0, 0, 0, 0, 0, asset(0, POINT_CURRENCY_SYMBOL));\par
711     createuser({\cf22 "deliadally"}, {\cf22 "v"}, 460757, 0, 1, 0, 0, 0, asset(0, POINT_CURRENCY_SYMBOL));\par
712     createuser({\cf22 "dennisedolan"}, {\cf22 "e"}, 3216, 0, 0, 0, 0, 0, asset(0, POINT_CURRENCY_SYMBOL));\par
713     createuser({\cf22 "smcpher1"}, {\cf22 "v"}, 1529, 21, 19, 5, 1, 460942, asset(85760977, POINT_CURRENCY_SYMBOL));\par
714     createuser({\cf22 "vennievans"}, {\cf22 "e"}, 5690, 0, 0, 0, 1, 5711, asset(4404400, POINT_CURRENCY_SYMBOL));\par
715     createuser({\cf22 "veronicavale"}, {\cf22 "v"}, 460756, 4, 4, 4, 1, 460777, asset(96793509, POINT_CURRENCY_SYMBOL));\par
716     createuser({\cf22 "verovera"}, {\cf22 "v"}, 3673, 10, 15, 10, 13, 461088, asset(162375366, POINT_CURRENCY_SYMBOL));\par
717     createuser({\cf22 "vickvindaloo"}, {\cf22 "v"}, 5545, 0, 0, 0, 9, 459629, asset(23948788, POINT_CURRENCY_SYMBOL));\par
718     createuser({\cf22 "vivcoleman"}, {\cf22 "v"}, 1569, 0, 1, 0, 0, 0, asset(0, POINT_CURRENCY_SYMBOL));\par
719     createuser({\cf22 "vivvestin"}, {\cf22 "v"}, 3503, 5, 2, 1, 11, 459629, asset(29548929, POINT_CURRENCY_SYMBOL));\par
720 \par
721   \}\par
722 \par
723   {\cf19 if} (action == {\cf22 "size user"}) \{\par
724     check({\cf17 false}, {\cf17 sizeof}(airclaim_user));\par
725   \}\par
726 \par
727   {\cf19 if} (action == {\cf22 "clear survey"}) \{\par
728     survey_index survey_table(get_self(), get_self().value);\par
729     {\cf17 auto} survey_itr = survey_table.begin();\par
730 \par
731     survey_table.erase(survey_itr);\par
732   \}\par
733 \par
734   {\cf19 if} (action == {\cf22 "clear rewards"}) \{\par
735     rewards_index rewards_table(get_self(), get_self().value);\par
736     {\cf17 auto} rewards_iterator = rewards_table.begin();\par
737     {\cf19 while} (rewards_iterator != rewards_table.end()) \{\par
738       rewards_iterator = rewards_table.erase(rewards_iterator);\par
739     \}\par
740   \}\par
741 \par
742   {\cf19 if} (action == {\cf22 "assetmax"}) \{\par
743     check({\cf17 false}, to_string(asset::max_amount));\par
744   \}\par
745 \par
746   {\cf19 if} (action == {\cf22 "svr inits"}) \{\par
747     survey_init();\par
748 \par
749     vote_init();\par
750 \par
751     ratify_init();\par
752   \}\par
753 \par
754   {\cf19 if} (action == {\cf22 "victorvector survey"}) \{\par
755     svr_index svrs_table(get_self(), user.value);\par
756     {\cf17 auto} svr_iterator = svrs_table.begin();\par
757     {\cf19 if} (svr_iterator == svrs_table.end()) \{\par
758         {\cf20 // emplace}\par
759         svrs_table.emplace(get_self(), [&]({\cf17 auto} &svr) \{ ; \});\par
760         svr_iterator = svrs_table.begin();\par
761     \}\par
762   \}\par
763 \par
764   {\cf19 if} (action == {\cf22 "set cls"}) \{\par
765     system_index system_table(get_self(), get_self().value);\par
766     {\cf17 auto} system_iterator = system_table.begin();\par
767     check(system_iterator != system_table.end(), {\cf22 "system record is undefined"});\par
768 \par
769     system_table.modify(system_iterator, get_self(), [&]({\cf17 auto} &sys) \{\par
770       sys.cls = asset(231000000000, POINT_CURRENCY_SYMBOL);\par
771     \});\par
772   \}\par
773 \par
774   {\cf19 if} (action == {\cf22 "set usercount"}) \{\par
775     system_index system_table(get_self(), get_self().value);\par
776     {\cf17 auto} system_iterator = system_table.begin();\par
777     check(system_iterator != system_table.end(), {\cf22 "system record is undefined"});\par
778 \par
779     system_table.modify(system_iterator, get_self(), [&]({\cf17 auto} &sys) \{\par
780       sys.usercount = 1;\par
781     \});\par
782   \}\par
783 \par
784   {\cf19 if} (action == {\cf22 "system clear"}) \{\par
785     system_index system_table(get_self(), get_self().value);\par
786     {\cf17 auto} system_iterator = system_table.begin();\par
787     system_table.erase(system_iterator);\par
788   \}\par
789 \par
790   {\cf19 if} (action == {\cf22 "system restore"}) \{\par
791     system_index system_table(get_self(), get_self().value);\par
792     system_table.emplace(\par
793         get_self(), [&]({\cf17 auto} &sys) \{\par
794           sys.usercount = 22;\par
795           sys.cls = asset(654500000000, POINT_CURRENCY_SYMBOL);\par
796           sys.claimevents = 13;\par
797           sys.iteration = 5910;\par
798           sys.participants = 0;\par
799           {\cf20 //sys.init = time_point(1631620800000000);}\par
800         \});\par
801   \}\par
802 \par
803   {\cf19 if} (action == {\cf22 "system restore2"}) \{\par
804     system_index system_table(get_self(), get_self().value);\par
805     system_table.emplace(\par
806         get_self(), [&]({\cf17 auto} &sys) \{\par
807           sys.usercount = 8;\par
808           sys.cls = asset(154000000000, POINT_CURRENCY_SYMBOL);\par
809           sys.claimevents = 17;\par
810           sys.iteration = 5910;\par
811           sys.participants = 0;\par
812           {\cf20 //sys.init = time_point("2021-09-15T00:00:00.000");}\par
813         \});\par
814   \}\par
815 \par
816   {\cf19 if} (action == {\cf22 "ucls"}) \{\par
817     asset ucls = calculate_user_cls_addition();\par
818     check({\cf17 false}, ucls.to_string());\par
819   \}\par
820 \par
821   {\cf19 if} (action == {\cf22 "participate"}) \{\par
822     system_index system_table(get_self(), get_self().value);\par
823       {\cf17 auto} system_iterator = system_table.begin();\par
824       check(system_iterator != system_table.end(), {\cf22 "system record is undefined"});\par
825       system_table.modify(system_iterator, get_self(), [&]({\cf17 auto} &s) \{\par
826           s.participants += 1;\par
827       \});\par
828   \}\par
829 \par
830   {\cf19 if} (action == {\cf22 "is registered"}) \{\par
831     {\cf19 if} (is_registered(user)) \{\par
832       check({\cf17 false}, {\cf22 "user is registered"});\par
833     \} {\cf19 else} \{\par
834       check({\cf17 false}, {\cf22 "user is not registered"});\par
835     \}\par
836   \}\par
837 \par
838   {\cf19 if} (action == {\cf22 "survey period"}) \{\par
839     {\cf19 if} (is_action_period({\cf22 "survey"}) == {\cf17 true}) \{\par
840       check({\cf17 false}, {\cf22 "In survey period"});\par
841     \} {\cf19 else} \{\par
842       check({\cf17 false}, {\cf22 "Outside of survey period"});\par
843     \}\par
844   \}\par
845 \par
846   {\cf19 if} (action == {\cf22 "vote period"}) \{\par
847     {\cf19 if} (is_action_period({\cf22 "vote"}) == {\cf17 true}) \{\par
848       check({\cf17 false}, {\cf22 "In vote period"});\par
849     \} {\cf19 else} \{\par
850       check({\cf17 false}, {\cf22 "Outside of vote period"});\par
851     \}\par
852   \}\par
853   \par
854   {\cf19 if} (action == {\cf22 "ratify period"}) \{\par
855     {\cf19 if} (is_action_period({\cf22 "ratify"}) == {\cf17 true}) \{\par
856       check({\cf17 false}, {\cf22 "In ratify period"});\par
857     \} {\cf19 else} \{\par
858       check({\cf17 false}, {\cf22 "Outside of ratify period"});\par
859     \}\par
860   \}\par
861 \par
862   {\cf19 if} (action == {\cf22 "clear svr"}) \{\par
863     svr_index svrs_table(get_self(), user.value);\par
864     {\cf17 auto} svr_iterator = svrs_table.begin();\par
865 \par
866     {\cf19 if} (svr_iterator == svrs_table.end()) \{\par
867         {\cf20 // emplace}\par
868         svrs_table.emplace(get_self(), [&]({\cf17 auto} &svr) \{ ; \});\par
869         svr_iterator = svrs_table.begin();\par
870     \} {\cf19 else} \{\par
871         svrs_table.modify(svr_iterator, get_self(), [&]({\cf17 auto} &svr) \{\par
872           svr.survey0 = 0;\par
873           svr.survey1 = 0;\par
874           svr.survey2 = 0;\par
875           svr.survey3 = 0;\par
876           svr.survey4 = 0;\par
877           svr.vote0 = 0;\par
878           svr.vote1 = 0;\par
879           svr.vote2 = 0;\par
880           svr.vote3 = 0;\par
881           svr.vote4 = 0;\par
882           svr.ratify0 = 0;\par
883           svr.ratify1 = 0;\par
884           svr.ratify2 = 0;\par
885           svr.ratify3 = 0;\par
886           svr.ratify4 = 0;\par
887         \});\par
888     \}\par
889     \par
890   \}\par
891 \par
892 \par
893   {\cf19 if} (action == {\cf22 "set svr"}) \{\par
894     svr_index svrs_table(get_self(), user.value);\par
895     {\cf17 auto} svr_iterator = svrs_table.begin();\par
896 \par
897     {\cf19 if} (svr_iterator == svrs_table.end()) \{\par
898         {\cf20 // emplace}\par
899         svrs_table.emplace(get_self(), [&]({\cf17 auto} &svr) \{ ; \});\par
900         svr_iterator = svrs_table.begin();\par
901     \} {\cf19 else} \{\par
902         svrs_table.modify(svr_iterator, get_self(), [&]({\cf17 auto} &svr) \{\par
903           svr.survey0 = 1;\par
904           svr.survey1 = 1;\par
905           svr.survey2 = 1;\par
906           svr.survey3 = 1;\par
907           svr.survey4 = 1;\par
908           svr.vote0 = 1;\par
909           svr.vote1 = 1;\par
910           svr.vote2 = 1;\par
911           svr.vote3 = 1;\par
912           svr.vote4 = 1;\par
913           svr.ratify0 = 0;\par
914           svr.ratify1 = 0;\par
915           svr.ratify2 = 0;\par
916           svr.ratify3 = 0;\par
917           svr.ratify4 = 0;\par
918         \});\par
919     \}\par
920     \par
921   \}\par
922 \par
923   {\cf19 if} (action == {\cf22 "reset svrs"}) \{\par
924     svr_index svr_table1(get_self(), name({\cf22 "alanappleton"}).value);\par
925     svr_index svr_table2(get_self(), name({\cf22 "billbeaumont"}).value);\par
926     svr_index svr_table3(get_self(), name({\cf22 "celiacollins"}).value);\par
927     svr_index svr_table4(get_self(), name({\cf22 "darlenedole"}).value);\par
928     svr_index svr_table5(get_self(), name({\cf22 "dennisedolan"}).value);\par
929 \par
930     svr_index svr_table6(get_self(), name({\cf22 "ellaevery"}).value);\par
931     svr_index svr_table7(get_self(), name({\cf22 "ethanedwards"}).value);\par
932     svr_index svr_table8(get_self(), name({\cf22 "frankyfellon"}).value);\par
933     svr_index svr_table9(get_self(), name({\cf22 "freeosfreeos"}).value);\par
934     svr_index svr_table10(get_self(), name({\cf22 "veronicavale"}).value);\par
935 \par
936     svr_index svr_table11(get_self(), name({\cf22 "verovera"}).value);\par
937     svr_index svr_table12(get_self(), name({\cf22 "victorvector"}).value);\par
938     svr_index svr_table13(get_self(), name({\cf22 "vivcoleman"}).value);\par
939     svr_index svr_table14(get_self(), name({\cf22 "vivvestin"}).value);\par
940     svr_index svr_table15(get_self(), name({\cf22 "vladvickens"}).value);\par
941 \par
942     {\cf17 auto} svr_iterator1 = svr_table1.begin();\par
943     {\cf17 auto} svr_iterator2 = svr_table2.begin();\par
944     {\cf17 auto} svr_iterator3 = svr_table3.begin();\par
945     {\cf17 auto} svr_iterator4 = svr_table4.begin();\par
946     {\cf17 auto} svr_iterator5 = svr_table5.begin();\par
947     \par
948     {\cf17 auto} svr_iterator6 = svr_table6.begin();\par
949     {\cf17 auto} svr_iterator7 = svr_table7.begin();\par
950     {\cf17 auto} svr_iterator8 = svr_table8.begin();\par
951     {\cf17 auto} svr_iterator9 = svr_table9.begin();\par
952     {\cf17 auto} svr_iterator10 = svr_table10.begin();\par
953     \par
954     {\cf17 auto} svr_iterator11 = svr_table11.begin();\par
955     {\cf17 auto} svr_iterator12 = svr_table12.begin();\par
956     {\cf17 auto} svr_iterator13 = svr_table13.begin();\par
957     {\cf17 auto} svr_iterator14 = svr_table14.begin();\par
958     {\cf17 auto} svr_iterator15 = svr_table15.begin();\par
959     \par
960     svr_table1.erase(svr_iterator1);\par
961     svr_table2.erase(svr_iterator2);\par
962     svr_table3.erase(svr_iterator3);\par
963     svr_table4.erase(svr_iterator4);\par
964     svr_table5.erase(svr_iterator5);\par
965 \par
966     svr_table6.erase(svr_iterator6);\par
967     svr_table7.erase(svr_iterator7);\par
968     svr_table8.erase(svr_iterator8);\par
969     svr_table9.erase(svr_iterator9);\par
970     svr_table10.erase(svr_iterator10);\par
971 \par
972     svr_table11.erase(svr_iterator11);\par
973     svr_table12.erase(svr_iterator12);\par
974     svr_table13.erase(svr_iterator13);\par
975     svr_table14.erase(svr_iterator14);\par
976     svr_table15.erase(svr_iterator15);\par
977     \par
978   \}\par
979 \par
980   {\cf19 if} (action == {\cf22 "delete stat"}) \{\par
981     stats statstable(get_self(), POINT_CURRENCY_SYMBOL.code().raw());\par
982     {\cf17 auto} existing = statstable.find(POINT_CURRENCY_SYMBOL.code().raw());\par
983     statstable.erase(existing);\par
984   \}\par
985 \par
986   {\cf19 if} (action == {\cf22 "restore freeosgov stat"}) \{\par
987 \par
988     stats statstable(get_self(), POINT_CURRENCY_SYMBOL.code().raw());\par
989     statstable.emplace(get_self(), [&]({\cf17 auto} &s) \{\par
990       s.supply = asset(10077528598, POINT_CURRENCY_SYMBOL);\par
991       s.max_supply = asset(3500000000000000000, POINT_CURRENCY_SYMBOL);\par
992       s.issuer = name({\cf22 "freeosgov"});\par
993     \});\par
994   \}\par
995 \par
996   {\cf19 if} (action == {\cf22 "restore freeosgov2 stat"}) \{\par
997 \par
998     stats statstable(get_self(), POINT_CURRENCY_SYMBOL.code().raw());\par
999     statstable.emplace(get_self(), [&]({\cf17 auto} &s) \{\par
1000       s.supply = asset(10077528598, POINT_CURRENCY_SYMBOL);\par
1001       s.max_supply = asset(3500000000000000000, POINT_CURRENCY_SYMBOL);\par
1002       s.issuer = name({\cf22 "freeosgov2"});\par
1003     \});\par
1004   \}\par
1005 \par
1006   {\cf19 if} (action == {\cf22 "get freebi stat"}) \{\par
1007 \par
1008     asset input_quantity = asset(10000, FREEBI_CURRENCY_SYMBOL);\par
1009 \par
1010     {\cf17 auto} sym = input_quantity.symbol;\par
1011     check(sym == POINT_CURRENCY_SYMBOL || sym == FREEBI_CURRENCY_SYMBOL, {\cf22 "invalid currency for quantity"});\par
1012 \par
1013     {\cf20 // Point at the right contract}\par
1014     name token_contract;\par
1015     {\cf19 if} (sym == POINT_CURRENCY_SYMBOL) \{\par
1016       token_contract = name(get_self());\par
1017     \} {\cf19 else} \{\par
1018       {\cf18 string} freebi_tokens_contract = get_parameter(name({\cf22 "freebitokens"}));\par
1019       token_contract = name(freebi_tokens_contract);\par
1020     \}\par
1021 \par
1022     check(input_quantity.is_valid(), {\cf22 "invalid quantity"});\par
1023     check(input_quantity.amount > 0, {\cf22 "must mint a positive quantity"});\par
1024 \par
1025     stats statstable(token_contract, sym.code().raw());\par
1026     {\cf17 auto} existing = statstable.find(sym.code().raw());\par
1027     \par
1028     check(existing != statstable.end(), {\cf22 "token with symbol does not exist"});\par
1029     {\cf17 const} {\cf17 auto} &st = *existing;\par
1030     check({\cf17 false}, st.issuer.to_string());\par
1031   \}\par
1032 \par
1033 \par
1034   {\cf19 if} (action == {\cf22 "clear survey"}) \{\par
1035     survey_index survey_table(get_self(), get_self().value);\par
1036     {\cf17 auto} survey_iterator = survey_table.begin();\par
1037     survey_table.erase(survey_iterator);\par
1038   \}\par
1039 \par
1040   {\cf19 if} (action == {\cf22 "current iteration"}) \{\par
1041     uint16_t iteration = 0;\par
1042 \par
1043     {\cf20 // get the start of freeos system time}\par
1044     system_index system_table(get_self(), get_self().value);\par
1045     {\cf17 auto} system_iterator = system_table.begin();\par
1046     check(system_iterator != system_table.end(), {\cf22 "system record is undefined"});\par
1047     time_point init = system_iterator->init;\par
1048 \par
1049     {\cf20 // how far are we into the current iteration?}\par
1050     uint64_t now_secs = current_time_point().sec_since_epoch();\par
1051     uint64_t init_secs = init.sec_since_epoch();\par
1052 \par
1053     {\cf20 // read the iteration length in seconds}\par
1054     {\cf18 int} iteration_length_secs = get_iparameter(name({\cf22 "iterationsec"}));\par
1055 \par
1056     {\cf19 if} (now_secs >= init_secs) \{\par
1057       iteration = ((now_secs - init_secs) / iteration_length_secs) + 1;\par
1058     \}\par
1059 \par
1060     {\cf18 string} debug_msg = {\cf22 "now_secs = "} + to_string(now_secs) + {\cf22 ", init_secs = "} + to_string(init_secs) + {\cf22 ", Iternation Length (seconds) = "} + to_string(iteration_length_secs) + {\cf22 ", calculated iteration = "} + to_string(iteration);\par
1061     check({\cf17 false}, debug_msg);\par
1062   \}\par
1063 \par
1064 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
points.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v points.hpp}
{\xe \v points.hpp}
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include <eosio/system.hpp>}\par
{\f2 #include "freeosgov.hpp"}\par
{\f2 #include "tables.hpp"}\par
{\f2 #include <cmath>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
points.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //#pragma once}\par
2 {\cf21 #include <eosio/eosio.hpp>}\par
3 {\cf21 #include <eosio/system.hpp>}\par
4 {\cf21 #include "freeosgov.hpp"}\par
5 {\cf21 #include "tables.hpp"}\par
6 \par
7 {\cf21 #include <cmath>}\par
8 \par
9 {\cf17 using namespace }eosio;\par
10 {\cf17 using namespace }freedao;\par
11 {\cf17 using namespace }std;\par
12 \par
24 {\cf18 void} freeosgov::create({\cf17 const} name &issuer, {\cf17 const} asset &maximum_supply) \{\par
25   require_auth(get_self());\par
26 \par
27   {\cf17 auto} sym = maximum_supply.symbol;\par
28   check(sym.is_valid(), {\cf22 "invalid symbol name"});\par
29   check(maximum_supply.is_valid(), {\cf22 "invalid supply"});\par
30   check(maximum_supply.amount > 0, {\cf22 "max-supply must be positive"});\par
31 \par
32   stats statstable(get_self(), sym.code().raw());\par
33   {\cf17 auto} existing = statstable.find(sym.code().raw());\par
34   check(existing == statstable.end(), {\cf22 "token with symbol already exists"});\par
35 \par
36   statstable.emplace(get_self(), [&]({\cf17 auto} &s) \{\par
37     s.supply.symbol = maximum_supply.symbol;\par
38     s.max_supply = maximum_supply;\par
39     s.issuer = issuer;\par
40   \});\par
41 \}\par
42 \par
43 \par
55 {\cf18 void} freeosgov::issue({\cf17 const} name &to, {\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo) \{\par
56   {\cf17 auto} sym = quantity.symbol;\par
57   check(sym.is_valid(), {\cf22 "invalid symbol name"});\par
58   check(memo.size() <= 256, {\cf22 "memo has more than 256 bytes"});\par
59 \par
60   stats statstable(get_self(), sym.code().raw());\par
61   {\cf17 auto} existing = statstable.find(sym.code().raw());\par
62   check(existing != statstable.end(),\par
63         {\cf22 "token with symbol does not exist, create token before issue"});\par
64   {\cf17 const} {\cf17 auto} &st = *existing;\par
65   check(to == st.issuer, {\cf22 "tokens can only be issued to issuer account"});\par
66 \par
67   check(quantity.is_valid(), {\cf22 "invalid quantity"});\par
68   check(quantity.amount > 0, {\cf22 "must issue positive quantity"});\par
69 \par
70   check(quantity.symbol == st.supply.symbol, {\cf22 "symbol precision mismatch"});\par
71   check(quantity.amount <= st.max_supply.amount - st.supply.amount,\par
72         {\cf22 "quantity exceeds available supply"});\par
73 \par
74   statstable.modify(st, same_payer, [&]({\cf17 auto} &s) \{ s.supply += quantity; \});\par
75 \par
76   add_balance(st.issuer, quantity, st.issuer);\par
77 \}\par
78 \par
79 \par
90 {\cf18 void} freeosgov::retire({\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo) \{\par
91   {\cf17 auto} sym = quantity.symbol;\par
92   check(sym.is_valid(), {\cf22 "invalid symbol name"});\par
93   check(memo.size() <= 256, {\cf22 "memo has more than 256 bytes"});\par
94 \par
95   stats statstable(get_self(), sym.code().raw());\par
96   {\cf17 auto} existing = statstable.find(sym.code().raw());\par
97   check(existing != statstable.end(), {\cf22 "token with symbol does not exist"});\par
98   {\cf17 const} {\cf17 auto} &st = *existing;\par
99 \par
100   check(quantity.is_valid(), {\cf22 "invalid quantity"});\par
101   check(quantity.amount > 0, {\cf22 "must retire positive quantity of POINTs"});\par
102 \par
103   check(quantity.symbol == st.supply.symbol, {\cf22 "symbol precision mismatch"});\par
104 \par
105   statstable.modify(st, same_payer, [&]({\cf17 auto} &s) \{ s.supply -= quantity; \});\par
106 \par
107   sub_balance(st.issuer, quantity);\par
108 \}\par
109 \par
110 \par
122 {\cf18 void} freeosgov::allocate({\cf17 const} name &from, {\cf17 const} name &to, {\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo) \{\par
123   require_auth(from);\par
124 \par
125   {\cf20 // check if the 'from' account is in the transferer whitelist}\par
126   transferers_index transferers_table(get_self(), get_self().value);\par
127   {\cf17 auto} transferer_iterator = transferers_table.find(from.value);\par
128 \par
129   check(transferer_iterator != transferers_table.end(),\par
130         {\cf22 "the allocate action is protected by transferers whitelist"});\par
131 \par
132   {\cf20 // if the 'from' user is in the transferers table then call the transfer function}\par
133   transfer(from, to, quantity, memo);\par
134 \}\par
135 \par
136 \par
147 {\cf18 void} freeosgov::unlock({\cf17 const} name &user) \{\par
148   require_auth(user);\par
149 \par
150   {\cf20 // user-activity-driven background process}\par
151   tick();\par
152 \par
153   {\cf20 // check that system is operational masterswitch parameter set to "1")}\par
154   check(check_master_switch(), MSG_FREEOS_SYSTEM_NOT_AVAILABLE);\par
155 \par
156   {\cf20 // get the current iteration}\par
157   uint32_t this_iteration = current_iteration();\par
158   check(this_iteration > 0, {\cf22 "unlocking is not possible at this time, please try later"});\par
159 \par
160   {\cf20 // calculate the amount to be unvested - get the percentage for the iteration}\par
161   system_index system_table(get_self(), get_self().value);\par
162   {\cf17 auto} system_iterator = system_table.begin();\par
163   check(system_iterator != system_table.end(), {\cf22 "system record not found"});\par
164   uint32_t unlock_percent = system_iterator->unlockpercent;\par
165 \par
166   {\cf20 // check that the unvest percentage is within limits}\par
167   check(unlock_percent > 0 && unlock_percent <= 100,\par
168         {\cf22 "locked POINTs cannot be unlocked in this claim period. Please try during next claim period"});\par
169 \par
170   {\cf20 // has the user unlocked in this iteration? - consult the unvest history table}\par
171   unvest_index unvest_table(get_self(), user.value);\par
172   {\cf17 auto} unvest_iterator = unvest_table.begin();\par
173   {\cf20 // if the unvest record exists for the current iteration then the user has already unvested,}\par
174   {\cf20 // so is not eligible to unvest again}\par
175   {\cf19 if} (unvest_iterator != unvest_table.end()) \{\par
176     check(unvest_iterator->iteration_number != this_iteration,\par
177         {\cf22 "user has already unlocked in this iteration"});\par
178   \}\par
179 \par
180   {\cf20 // do the unlocking}\par
181   {\cf20 // get the user's unvested POINT balance}\par
182   asset locked_balance = asset(0, POINT_CURRENCY_SYMBOL);\par
183   lockaccounts locked_accounts_table(get_self(), user.value);\par
184   {\cf17 auto} locked_account_iterator = locked_accounts_table.begin();\par
185 \par
186   {\cf19 if} (locked_account_iterator != locked_accounts_table.end()) \{\par
187     locked_balance = locked_account_iterator->balance;\par
188   \}\par
189 \par
190   {\cf20 // if user's locked balance is 0 then nothing to do, so return}\par
191   {\cf19 if} (locked_balance.amount == 0) \{\par
192     {\cf19 return};\par
193   \}\par
194 \par
195   {\cf20 // calculate the amount of locked POINTs to convert to liquid POINTs}\par
196   {\cf20 // Warning: these calculations use mixed-type arithmetic. Any changes need to}\par
197   {\cf20 // be thoroughly tested.}\par
198 \par
199   {\cf18 double} percentage = unlock_percent / 100.0;\par
200   {\cf18 double} locked_amount = locked_balance.amount / 10000.0;\par
201   {\cf18 double} percentage_applied = locked_amount * percentage;\par
202   {\cf18 double} adjusted_amount = ceil(percentage_applied); {\cf20 // rounding up to whole units}\par
203   uint64_t adjusted_units = adjusted_amount * 10000;\par
204 \par
205   {\cf20 // to prevent rounding up to more than the locked point balance, apply this adjustment}\par
206   {\cf20 // this will bring the locked balance to zero}\par
207   {\cf19 if} (adjusted_units > locked_balance.amount) \{\par
208     adjusted_units = locked_balance.amount;\par
209   \}\par
210 \par
211   asset converted_points = asset(adjusted_units, POINT_CURRENCY_SYMBOL);\par
212 \par
213   std::string memo = std::string({\cf22 "unlocking POINTs by "});\par
214   memo.append(user.to_string());\par
215 \par
216   {\cf20 // Issue the required amount to the freeos account}\par
217   {\cf19 if} (converted_points.amount > 0) \{\par
218     issue(get_self(), converted_points, memo);\par
219 \par
220     {\cf20 // transfer liquid POINTs to user}\par
221     transfer(get_self(), user, converted_points, memo);\par
222 \par
223   {\cf20 // subtract the amount transferred from the unvested record}\par
224   locked_accounts_table.modify(locked_account_iterator, get_self(), [&]({\cf17 auto} &v) \{ v.balance -= converted_points; \});\par
225   \}\par
226   \par
227   {\cf20 // record the unlock event in the unvest history table}\par
228   unvest_iterator = unvest_table.begin();\par
229   {\cf19 if} (unvest_iterator == unvest_table.end()) \{\par
230     unvest_table.emplace(get_self(), [&]({\cf17 auto} &unvest) \{\par
231       unvest.iteration_number = this_iteration;\par
232     \});\par
233   \} {\cf19 else} \{\par
234     unvest_table.modify(unvest_iterator, same_payer, [&]({\cf17 auto} &unvest) \{\par
235       unvest.iteration_number = this_iteration;\par
236     \});\par
237   \}\par
238 \}\par
239 \par
240 \par
250 {\cf18 void} freeosgov::mint({\cf17 const} name &minter, {\cf17 const} name &to, {\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo) \{\par
251   {\cf20 // check if the 'to' account is in the minter whitelist}\par
252   minters_index minters_table(get_self(), get_self().value);\par
253   {\cf17 auto} minter_iterator = minters_table.find(minter.value);\par
254 \par
255   check(minter_iterator != minters_table.end(), {\cf22 "the mint action is protected by minters whitelist"});\par
256 \par
257   require_auth(minter);\par
258 \par
259   {\cf20 // if the 'to' user is in the minters table then call the issue function}\par
260   issue(to, quantity, memo);\par
261 \}\par
262 \par
263 \par
272 {\cf18 void} freeosgov::burn({\cf17 const} name &burner, {\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo) \{\par
273   {\cf20 // check if the 'burner' account is in the burner whitelist}\par
274   burners_index burners_table(get_self(), get_self().value);\par
275   {\cf17 auto} burner_iterator = burners_table.find(burner.value);\par
276 \par
277   check(burner_iterator != burners_table.end(), {\cf22 "the burn action is protected by burners whitelist"});\par
278 \par
279   require_auth(burner);\par
280 \par
281   {\cf20 // if the 'to' user is in the burners table then call the retire function}\par
282   retire(quantity, memo);\par
283 \}\par
284 \par
285 \par
295 {\cf18 void} freeosgov::transfer({\cf17 const} name &from, {\cf17 const} name &to, {\cf17 const} asset &quantity, {\cf17 const} {\cf18 string} &memo) \{\par
296   check(from != to, {\cf22 "cannot transfer to self"});\par
297   {\cf20 // require_auth(from);}\par
298   check(is_account(to), {\cf22 "to account does not exist"});\par
299 \par
300   {\cf17 auto} sym = quantity.symbol.code();\par
301   stats statstable(get_self(), sym.raw());\par
302   {\cf17 const} {\cf17 auto} &st = statstable.get(sym.raw());\par
303 \par
304   require_recipient(from);\par
305   require_recipient(to);\par
306 \par
307   check(quantity.is_valid(), {\cf22 "invalid quantity"});\par
308   check(quantity.amount > 0, {\cf22 "must transfer positive quantity"});\par
309   check(quantity.symbol == st.supply.symbol, {\cf22 "symbol precision mismatch"});\par
310   check(memo.size() <= 256, {\cf22 "memo has more than 256 bytes"});\par
311 \par
312   {\cf17 auto} payer = has_auth(to) ? to : from;\par
313 \par
314   sub_balance(from, quantity);\par
315   add_balance(to, quantity, payer);\par
316 \}\par
317 \par
318 \par
325 {\cf18 void} freeosgov::sub_balance({\cf17 const} name &owner, {\cf17 const} asset &value) \{\par
326   accounts from_acnts(get_self(), owner.value);\par
327 \par
328   {\cf17 const} {\cf17 auto} &from =\par
329       from_acnts.get(value.symbol.code().raw(), {\cf22 "no balance object found"});\par
330   check(from.balance.amount >= value.amount, {\cf22 "overdrawn balance"});\par
331 \par
332   from_acnts.modify(from, owner, [&]({\cf17 auto} &a) \{ a.balance -= value; \});\par
333 \}\par
334 \par
335 \par
343 {\cf18 void} freeosgov::add_balance({\cf17 const} name &owner, {\cf17 const} asset &value,\par
344                          {\cf17 const} name &ram_payer) \{\par
345   accounts to_acnts(get_self(), owner.value);\par
346   {\cf17 auto} to = to_acnts.find(value.symbol.code().raw());\par
347   {\cf19 if} (to == to_acnts.end()) \{\par
348     to_acnts.emplace(ram_payer, [&]({\cf17 auto} &a) \{ a.balance = value; \});\par
349   \} {\cf19 else} \{\par
350     to_acnts.modify(to, same_payer, [&]({\cf17 auto} &a) \{ a.balance += value; \});\par
351   \}\par
352 \}\par
353 \par
354 \par
362 {\cf18 void} freeosgov::mintfreebi({\cf17 const} name &owner, {\cf17 const} asset &quantity) \{\par
363   require_auth(owner);\par
364 \par
365   {\cf20 // check that system is operational (masterswitch parameter set to "1")}\par
366   check(check_master_switch(), MSG_FREEOS_SYSTEM_NOT_AVAILABLE);\par
367 \par
368   uint32_t this_iteration = current_iteration();\par
369     \par
370   {\cf20 // is the system operational?}\par
371   check(this_iteration != 0, {\cf22 "The freeos system is not available at this time"});\par
372 \par
373   {\cf20 // is the 'owner' user verified?}\par
374   check(is_user_verified(owner), {\cf22 "minting is restricted to verified users"});\par
375 \par
376   {\cf17 auto} sym = quantity.symbol;\par
377   check(sym == POINT_CURRENCY_SYMBOL, {\cf22 "invalid symbol name"});\par
378 \par
379   {\cf20 // check that the user has the appropriate balance to mint from}\par
380   {\cf20 // get POINT balance}\par
381   {\cf17 auto} points_balance_amount = 0;  {\cf20 // default value}\par
382   accounts points_accounts_table(get_self(), owner.value);\par
383   {\cf17 auto} points_iterator = points_accounts_table.find(POINT_CURRENCY_SYMBOL.code().raw());\par
384   {\cf19 if} (points_iterator != points_accounts_table.end()) \{\par
385     points_balance_amount = points_iterator->balance.amount;\par
386   \}\par
387   check(points_balance_amount >= quantity.amount, {\cf22 "user has insufficient POINTs balance"});\par
388 \par
389   stats statstable(get_self(), sym.code().raw());\par
390   {\cf17 auto} existing = statstable.find(sym.code().raw());\par
391   check(existing != statstable.end(), {\cf22 "token with symbol does not exist"});\par
392   {\cf17 const} {\cf17 auto} &st = *existing;\par
393 \par
394   check(quantity.is_valid(), {\cf22 "invalid quantity"});\par
395   check(quantity.amount > 0, {\cf22 "must convert positive quantity"});\par
396 \par
397   statstable.modify(st, same_payer, [&]({\cf17 auto} &s) \{\par
398     s.supply -= quantity;\par
399   \});\par
400 \par
401   {\cf20 // decrease owner's balance of non-exchangeable tokens}\par
402   sub_balance(owner, quantity);\par
403 \par
404   {\cf20 // Issue exchangeable tokens}\par
405   asset exchangeable_amount = asset(quantity.amount, FREEBI_CURRENCY_SYMBOL);\par
406   std::string memo = std::string({\cf22 "minting"});\par
407 \par
408   {\cf20 // ask FREEBI contract to issue an equivalent amount of FREEBI tokens to the freeosgov account}\par
409   {\cf18 string} freebi_tokens_contract = get_parameter(name({\cf22 "freebitokens"}));\par
410   action issue_action = action(\par
411       permission_level\{get_self(), {\cf22 "active"}_n\}, name(freebi_tokens_contract),\par
412       {\cf22 "issue"}_n, std::make_tuple(get_self(), exchangeable_amount, memo));\par
413 \par
414   issue_action.send();\par
415 \par
416   {\cf20 // transfer FREEBI tokens to the owner}\par
417   action transfer_action = action(\par
418       permission_level\{get_self(), {\cf22 "active"}_n\}, name(freebi_tokens_contract),\par
419       {\cf22 "transfer"}_n,\par
420       std::make_tuple(get_self(), owner, exchangeable_amount, memo));\par
421 \par
422   transfer_action.send();\par
423 \}\par
424 \par
425 \par
433 asset freeosgov::calculate_mint_fee(name &user, asset &mint_quantity, symbol mint_fee_currency) \{\par
434 \par
435   asset mintfee;\par
436   {\cf18 double} mint_fee_percent;\par
437   \par
438   {\cf18 double} mintfee_amount = 0;    {\cf20 // amount of currency, e.g. 123.4567 represents 123.4567 FREEOS}\par
439   int64_t mintfee_units = 0;    {\cf20 // units of currency, e.g. 1234567 represents 123.4567 FREEOS}\par
440 \par
441   check(mint_quantity.amount > 0, {\cf22 "invalid mint quantity"});\par
442   \par
443   {\cf20 // retrieve the latest mint fee percent from the last reward record}\par
444   rewards_index rewards_table(get_self(), get_self().value);\par
445   {\cf17 auto} reward_iterator = rewards_table.rbegin();\par
446   check(reward_iterator != rewards_table.rend(), {\cf22 "latest reward record not found"});\par
447 \par
448   {\cf20 // get the latest voted mint fee percent - depending on which currency user is paying with}\par
449   {\cf19 if} (mint_fee_currency ==  symbol(FREEOS_CURRENCY_CODE, 4)) \{\par
450     mint_fee_percent = reward_iterator->mint_fee_percent;\par
451   \} {\cf19 else} {\cf19 if} (mint_fee_currency ==  symbol(XPR_CURRENCY_CODE, 4)) \{\par
452     mint_fee_percent = reward_iterator->mint_fee_percent_xpr;\par
453   \} {\cf19 else} {\cf19 if} (mint_fee_currency ==  symbol(XUSDC_CURRENCY_CODE, 6)) \{\par
454     mint_fee_percent = reward_iterator->mint_fee_percent_xusdc;\par
455   \}\par
456 \par
457   {\cf20 // we have to work in double rather asset for accuracy in division and because currencies (e.g. FREEOS, XPR and XUSDC) have different precisions}\par
458   {\cf18 double} amount_in_units = mint_quantity.amount / 10000.0;\par
459   {\cf18 double} mintfee_in_freeos = amount_in_units * (mint_fee_percent / 100.0);\par
460 \par
461   {\cf20 // apply the minimum fee}\par
462   {\cf18 double} mintfee_min = get_dparameter(name({\cf22 "mintfeemin"}));\par
463   {\cf19 if} (mintfee_in_freeos < mintfee_min) \{\par
464     mintfee_in_freeos = mintfee_min;\par
465   \}\par
466 \par
467   {\cf20 // apply the currency conversion if necessary}\par
468   {\cf19 if} (mint_fee_currency == symbol(FREEOS_CURRENCY_CODE, 4)) \{\par
469     mintfee_units = mintfee_in_freeos * 10000;\par
470   \} {\cf19 else} \{\par
471     {\cf20 // conversion required}\par
472 \par
473     {\cf20 // get the FREEOS exchange rate}\par
474     currencies_index currencies_table(get_self(), get_self().value);\par
475     {\cf17 auto} freeos_iterator = currencies_table.find(symbol(FREEOS_CURRENCY_CODE, 4).raw());\par
476     check(freeos_iterator != currencies_table.end(), {\cf22 "FREEOS currency record not defined"});\par
477     {\cf18 double} freeos_rate = freeos_iterator->usdrate;\par
478 \par
479     {\cf19 if} (mint_fee_currency == symbol(XPR_CURRENCY_CODE, 4)) \{\par
480       {\cf20 // get the XPR exchange rate}\par
481       {\cf17 auto} xpr_iterator = currencies_table.find(symbol(XPR_CURRENCY_CODE, 4).raw());\par
482       check(xpr_iterator != currencies_table.end(), {\cf22 "XPR currency record not defined"});\par
483       {\cf18 double} xpr_rate = xpr_iterator->usdrate;\par
484 \par
485       {\cf20 // do the conversion}\par
486       mintfee_amount = round(mintfee_in_freeos * freeos_rate / xpr_rate * 10000);\par
487       mintfee_units = (int64_t) mintfee_amount;\par
488     \}\par
489 \par
490     {\cf19 if} (mint_fee_currency == symbol(XUSDC_CURRENCY_CODE, 6)) \{\par
491       {\cf20 // get the XUSDC exchange rate}\par
492       {\cf17 auto} xusdc_iterator = currencies_table.find(symbol(XUSDC_CURRENCY_CODE, 6).raw());\par
493       check(xusdc_iterator != currencies_table.end(), {\cf22 "XUSDC currency record not defined"});\par
494       {\cf18 double} xusdc_rate = xusdc_iterator->usdrate;\par
495 \par
496       {\cf20 // do the conversion}\par
497       mintfee_amount = round(mintfee_in_freeos * freeos_rate / xusdc_rate * 1000000);\par
498       mintfee_units = (int64_t) mintfee_amount;\par
499     \}\par
500     \par
501   \}\par
502 \par
503   mintfee = asset(mintfee_units, mint_fee_currency);   {\cf20 // asset}\par
504 \par
505   {\cf20 // DIAG}\par
506   {\cf20 // check(false, "mintfee_amount = " + to_string(mintfee_amount) + ", mintfee_units = " + to_string(mintfee_units) + ", mint fee = " + mintfee.to_string());}\par
507   \par
508   {\cf19 return} mintfee;\par
509 \}\par
510 \par
511 {\cf20 // This function is not called. If the mintfreeos transaction fails then all actions}\par
512 {\cf20 // in the transaction are rolled back, which means there is no need to refund the mint fee.}\par
513 {\cf20 // The code is reserved for future use}\par
514 \par
515 \par
529 {\cf18 void} freeosgov::refund_mintfee(name user, symbol mint_fee_currency) \{\par
530 \par
531   credit_index credit_table(get_self(), user.value);\par
532   {\cf17 auto} credit_iterator = credit_table.find(mint_fee_currency.code().raw());\par
533 \par
534   {\cf19 if} (credit_iterator == credit_table.end()) {\cf19 return};  {\cf20 // no credit record, so nothing to refund}\par
535 \par
536   asset mintfee_paid = credit_iterator->balance;\par
537   symbol mintfee_symbol = mintfee_paid.symbol;\par
538 \par
539   {\cf20 // look up the currencies table to get the contract name}\par
540   currencies_index currencies_table(get_self(), get_self().value);\par
541   {\cf17 auto} currency_iterator = currencies_table.find(mintfee_symbol.raw());\par
542 \par
543   {\cf19 if} (currency_iterator == currencies_table.end()) {\cf19 return};  {\cf20 // unknown currency}\par
544   name currency_contract = currency_iterator->contract;\par
545 \par
546   {\cf20 // transfer the fee back to the user}\par
547   action transfer_action = action(\par
548       permission_level\{get_self(), {\cf22 "active"}_n\}, currency_contract,\par
549       {\cf22 "transfer"}_n,\par
550       std::make_tuple(get_self(), user, mintfee_paid, {\cf18 string}({\cf22 "refund of incorrect freeos mint fee"})));\par
551 \par
552   transfer_action.send();\par
553 \par
554   {\cf20 // delete the credit record}\par
555   credit_table.erase(credit_iterator);\par
556 \}\par
557 \par
558 \par
569 {\cf18 bool} freeosgov::process_mint_fee(name user, asset mint_quantity, symbol mint_fee_currency) \{\par
570 \par
571   {\cf18 bool} mintfee_status;  {\cf20 // will be set to true if correct mint fee has been paid}\par
572 \par
573   {\cf20 // calculate the mint fee}\par
574   asset mintfee = calculate_mint_fee(user, mint_quantity, mint_fee_currency);\par
575 \par
576   {\cf20 // has the user paid the mint fee, i.e. got credit?}\par
577   asset user_credit = asset(0, mint_fee_currency);  {\cf20 // default}\par
578   credit_index credit_table(get_self(), user.value);\par
579   {\cf17 auto} credit_iterator = credit_table.find(mint_fee_currency.code().raw());\par
580 \par
581   {\cf19 if} (credit_iterator != credit_table.end()) \{\par
582     user_credit = credit_iterator->balance;\par
583   \}\par
584 \par
585   {\cf20 // Check if the mint-fee paid is the right amount}\par
586   {\cf19 if} (mintfee == user_credit) \{\par
587     {\cf20 // correct amount}\par
588     {\cf20 // erase the credit record (if paid)}\par
589     {\cf19 if} (credit_iterator != credit_table.end()) \{\par
590       credit_table.erase(credit_iterator);\par
591     \}\par
592     \par
593     mintfee_status = {\cf17 true};\par
594   \} {\cf19 else} \{\par
595     {\cf20 // incorrect amount - refund the incorrect mint fee}\par
596     refund_mintfee(user, mint_fee_currency);\par
597     mintfee_status = {\cf17 false};\par
598   \}\par
599 \par
600   {\cf19 return} mintfee_status;\par
601 \}\par
602 \par
603 \par
611 {\cf18 void} freeosgov::adjust_balances_from_points({\cf17 const} name user, {\cf17 const} asset &input_quantity) \{\par
612   \par
613   stats statstable(get_self(), input_quantity.symbol.code().raw());\par
614   {\cf17 auto} existing = statstable.find(input_quantity.symbol.code().raw());\par
615   check(existing != statstable.end(), {\cf22 "token with symbol does not exist"});\par
616   {\cf17 const} {\cf17 auto} &st = *existing;\par
617 \par
618   {\cf20 // decrease user's balance of POINTs}\par
619   sub_balance(user, input_quantity);\par
620 \par
621   {\cf20 // burn the points}\par
622   statstable.modify(st, same_payer, [&]({\cf17 auto} &s) \{\par
623       s.supply -= input_quantity;\par
624     \});\par
625 \}\par
626 \par
627 \par
635 {\cf18 void} freeosgov::adjust_balances_from_freebi({\cf17 const} name user, {\cf17 const} asset &input_quantity) \{\par
636   \par
637   {\cf20 // check that we have a credit for the input FREEBI}\par
638   credit_index credits_table(get_self(), user.value);\par
639   {\cf17 auto} credit_iterator = credits_table.find(input_quantity.symbol.code().raw());\par
640 \par
641   {\cf20 // if there is not a credit record, proceed no further}\par
642   check(credit_iterator != credits_table.end(), {\cf22 "the FREEBI amount has not been paid"});\par
643 \par
644   {\cf20 // check it is for the right amount}\par
645   asset freebi_paid = credit_iterator->balance;\par
646   check(freebi_paid == input_quantity, {\cf22 "incorrect amount of freebi has been paid"});\par
647 \par
648   {\cf20 // delete the FREEBI credit record}\par
649   credits_table.erase(credit_iterator);\par
650 \par
651   {\cf20 // burn the FREEBI amount}\par
652   {\cf18 string} freebi_tokens_contract = get_parameter(name({\cf22 "freebitokens"}));\par
653   action retire_freebi_action = action(\par
654     permission_level\{get_self(), {\cf22 "active"}_n\}, name(freebi_tokens_contract),\par
655     {\cf22 "retire"}_n, std::make_tuple(input_quantity, {\cf18 string}({\cf22 "burning FREEBI to mint FREEOS"})));\par
656 \par
657   retire_freebi_action.send();\par
658 \}\par
659 \par
660 \par
670 {\cf18 void} freeosgov::mintfreeos(name user, {\cf17 const} asset &input_quantity, symbol &mint_fee_currency, {\cf18 bool} use_airclaim_points) \{\par
671 \par
672   require_auth(user);\par
673 \par
674   {\cf20 // check that system is operational (masterswitch parameter set to "1")}\par
675   check(check_master_switch(), MSG_FREEOS_SYSTEM_NOT_AVAILABLE);\par
676 \par
677   uint32_t this_iteration = current_iteration();\par
678     \par
679   {\cf20 // is the system operational?}\par
680   check(this_iteration != 0, {\cf22 "The freeos system is not available at this time"});\par
681 \par
682   check(input_quantity.is_valid(), {\cf22 "invalid quantity"});\par
683   check(input_quantity.amount > 0, {\cf22 "must mint a positive quantity"});\par
684 \par
685   {\cf20 // check that the user has the appropriate POINTs balance to mint with}\par
686   {\cf20 // We don't need to do this for minting from FREEBI because the FREEBI is sent as a transfer credit}\par
687   {\cf19 if} (input_quantity.symbol == POINT_CURRENCY_SYMBOL) \{\par
688     {\cf20 // get POINT balance}\par
689     {\cf17 auto} points_balance_amount = 0;  {\cf20 // default value}\par
690     accounts points_accounts_table(get_self(), user.value);\par
691     {\cf17 auto} points_iterator = points_accounts_table.find(POINT_CURRENCY_SYMBOL.code().raw());\par
692     {\cf19 if} (points_iterator != points_accounts_table.end()) \{\par
693       points_balance_amount = points_iterator->balance.amount;\par
694     \}\par
695 \par
696     check(points_balance_amount >= input_quantity.amount, {\cf22 "user has insufficient POINTs balance"});\par
697   \}\par
698 \par
699   {\cf19 if} (use_airclaim_points == {\cf17 false}) \{\par
700 \par
701     {\cf19 if} (has_nft(user) == {\cf17 false}) \{   {\cf20 // users with an active NFT do not pay the mint fee}\par
702       {\cf20 // check whether user has paid correct mint fee, whether they have a credit record, adjust their mintfeefree allowance}\par
703       check(process_mint_fee(user, input_quantity, mint_fee_currency) == {\cf17 true}, {\cf22 "incorrect mint fee has been paid"});\par
704     \}\par
705     \par
706   \} {\cf19 else} \{\par
707     {\cf20 // check mff balance, then decrease by the appropriate amount of POINTs minted}\par
708 \par
709     {\cf20 // get the user's mff balance}\par
710     asset mff_balance = asset(0, POINT_CURRENCY_SYMBOL);  {\cf20 // default value}\par
711     mintfeefree_index mff_table(get_self(), user.value);\par
712     {\cf17 auto} mff_iterator = mff_table.begin();\par
713     {\cf19 if} (mff_iterator != mff_table.end()) \{\par
714       mff_balance = mff_iterator->balance;\par
715     \}\par
716 \par
717     {\cf20 // check whether the user has enough mff POINTs}\par
718     check(input_quantity.amount <= mff_balance.amount, {\cf22 "insufficient Airclaim points to mint the requested amount"});\par
719 \par
720     {\cf20 // decrease the mff balance}\par
721     mff_table.modify(mff_iterator, get_self(),\par
722                           [&]({\cf17 auto} &mff) \{ mff.balance -= input_quantity; \});\par
723   \}\par
724   \par
725 \par
726   {\cf20 // different processing required for input_quantity currencies}\par
727   {\cf19 if} (input_quantity.symbol == POINT_CURRENCY_SYMBOL) \{\par
728     adjust_balances_from_points(user, input_quantity);\par
729   \} {\cf19 else} {\cf19 if} (input_quantity.symbol == FREEBI_CURRENCY_SYMBOL) \{\par
730     adjust_balances_from_freebi(user, input_quantity);\par
731   \} {\cf19 else} \{\par
732     check({\cf17 false}, {\cf22 "invalid currency for input quantity"});\par
733   \}\par
734 \par
735   {\cf20 // Issue FREEOS}\par
736   asset exchangeable_amount = asset(input_quantity.amount, FREEOS_CURRENCY_SYMBOL);\par
737   std::string memo = std::string({\cf22 "minting"});\par
738 \par
739   {\cf20 // ask FREEOS contract to issue an equivalent amount of FREEOS tokens to the freeosgov account}\par
740   {\cf18 string} freeos_tokens_contract = get_parameter(name({\cf22 "freeostokens"}));\par
741   action issue_action = action(\par
742       permission_level\{get_self(), {\cf22 "active"}_n\}, name(freeos_tokens_contract),\par
743       {\cf22 "issue"}_n, std::make_tuple(get_self(), exchangeable_amount, memo));\par
744 \par
745   issue_action.send();\par
746 \par
747   {\cf20 // transfer FREEOS tokens to the user}\par
748   action transfer_action = action(\par
749       permission_level\{get_self(), {\cf22 "active"}_n\}, name(freeos_tokens_contract),\par
750       {\cf22 "transfer"}_n,\par
751       std::make_tuple(get_self(), user, exchangeable_amount, memo));\par
752 \par
753   transfer_action.send();\par
754 \}\par
755 \par
756 \par
762 {\cf18 void} freeosgov::withdraw({\cf17 const} name user) \{\par
763   action  transfer_action;\par
764   asset   credit_amount;\par
765   name    currency_contract;\par
766   {\cf18 string}  memo;\par
767 \par
768   require_auth(user);\par
769 \par
770   {\cf20 // check that system is operational (global masterswitch parameter set to "1")}\par
771   check(check_master_switch(), MSG_FREEOS_SYSTEM_NOT_AVAILABLE);\par
772 \par
773   {\cf20 // currencies table}\par
774   currencies_index currencies_table(get_self(), get_self().value);\par
775 \par
776   {\cf20 // credits table}\par
777   credit_index credits_table(get_self(), user.value);\par
778   {\cf17 auto} credit_iterator = credits_table.begin();\par
779 \par
780   {\cf19 while} (credit_iterator != credits_table.end()) \{\par
781     {\cf20 // amount}\par
782     credit_amount = credit_iterator->balance;\par
783 \par
784     {\cf20 // get the currency contract}\par
785     {\cf18 string} credit_code = credit_amount.symbol.code().to_string();\par
786     {\cf19 if} (credit_code == FREEOS_CURRENCY_CODE) \{\par
787       {\cf18 string} freeos_tokens_contract = get_parameter(name({\cf22 "freeostokens"}));\par
788       currency_contract = name(freeos_tokens_contract);\par
789     \} {\cf19 else} {\cf19 if} (credit_code == FREEBI_CURRENCY_CODE) \{\par
790       {\cf18 string} freebi_tokens_contract = get_parameter(name({\cf22 "freebitokens"}));\par
791       currency_contract = name(freebi_tokens_contract);\par
792     \} {\cf19 else} \{\par
793       {\cf20 // look in the currencies table}\par
794       {\cf17 auto} currency_iterator = currencies_table.find(credit_amount.symbol.raw());\par
795       check(currency_iterator != currencies_table.end(), {\cf22 "currency record not found"});\par
796       currency_contract = currency_iterator->contract;\par
797     \}\par
798 \par
799 \par
800     memo = string({\cf22 "withdrawal of credit: "}) + credit_amount.to_string();\par
801 \par
802     action transfer_action = action(\par
803       permission_level\{get_self(), {\cf22 "active"}_n\}, name(currency_contract),\par
804       {\cf22 "transfer"}_n,\par
805       std::make_tuple(get_self(), user, credit_amount, memo));\par
806 \par
807     transfer_action.send();\par
808 \par
809     {\cf20 // delete the credit record}\par
810     credit_iterator = credits_table.erase(credit_iterator);\par
811   \}\par
812 \par
813 \}\par
814 \par
815 \par
825 {\cf18 void} freeosgov::record_deposit(uint64_t iteration_number, asset amount) \{\par
826   deposits_index deposits_table(get_self(), get_self().value);\par
827 \par
828   {\cf20 // find the record for the iteration}\par
829   {\cf17 auto} deposit_iterator = deposits_table.find(iteration_number);\par
830 \par
831   {\cf19 if} (deposit_iterator == deposits_table.end()) \{\par
832     {\cf20 // insert record and initialise}\par
833     deposits_table.emplace(get_self(), [&]({\cf17 auto} &d) \{\par
834       d.iteration = iteration_number;\par
835       d.accrued = amount;\par
836     \});\par
837   \} {\cf19 else} \{\par
838     {\cf20 // modify record}\par
839     deposits_table.modify(deposit_iterator, get_self(),\par
840                           [&]({\cf17 auto} &d) \{ d.accrued += amount; \});\par
841   \}\par
842 \}\par
843 \par
844 \par
851 {\cf18 void} freeosgov::depositclear(uint64_t iteration_number) \{\par
852   \par
853   name freeosdiv_acct = name(get_parameter(name({\cf22 "freedaoacct"})));\par
854   require_auth(freeosdiv_acct);\par
855 \par
856   deposits_index deposits_table(get_self(), get_self().value);\par
857 \par
858   {\cf20 // find the record for the iteration}\par
859   {\cf17 auto} deposit_iterator = deposits_table.find(iteration_number);\par
860 \par
861   check(deposit_iterator != deposits_table.end(),\par
862         {\cf22 "a deposit record for the requested iteration does not exist"});\par
863 \par
864   deposits_table.erase(deposit_iterator);\par
865 \}\par
866 \par
867 \par
879 [[eosio::on_notify({\cf22 "*::transfer"})]]    {\cf20 // was "eosio.token::transfer"}\par
880 {\cf18 void} freeosgov::mintfee(name user, name to, asset quantity, std::string memo) \{\par
881   {\cf19 if} (memo == {\cf22 "freeos mint fee"} || memo == {\cf22 "freeos mint credit"}) \{\par
882 \par
883     {\cf19 if} (user == get_self()) \{\par
884       {\cf19 return};\par
885     \}\par
886 \par
887     check(to == get_self(), {\cf22 "recipient of mint fee is incorrect"});\par
888 \par
889     {\cf20 // check if the mint fee is in an acceptable currency}\par
890     symbol payment_symbol = quantity.symbol;\par
891     currencies_index currencies_table(get_self(), get_self().value);\par
892     {\cf17 auto} currency_iterator = currencies_table.find(payment_symbol.raw());\par
893 \par
894     check(currency_iterator != currencies_table.end(), {\cf22 "payment is not in an accepted form of currency"});\par
895 \par
896     {\cf20 // check that the mint fee was transferred from the official contract (don't take any wooden nickels)}\par
897     check(currency_iterator->contract == get_first_receiver(), {\cf22 "source of token is not valid"});\par
898 \par
899     {\cf20 // record amount of fee in the credit table}\par
900     credit_index credit_table(get_self(), user.value);\par
901     {\cf17 auto} credit_iterator = credit_table.find(quantity.symbol.code().raw());\par
902 \par
903     {\cf20 // if there is already a credit record, proceed no further}\par
904     check(credit_iterator == credit_table.end(), {\cf22 "there is already a mint transaction in progress"});\par
905 \par
906     {\cf20 // add the credit record}\par
907     credit_table.emplace(get_self(), [&]({\cf17 auto} &c) \{\par
908       c.balance = quantity;\par
909     \});\par
910 \par
911   \}\par
912 \par
913   {\cf19 if} (memo == {\cf22 "mint freebi to freeos"}) \{\par
914     {\cf19 if} (user == get_self()) \{\par
915       {\cf19 return};\par
916     \}\par
917 \par
918     check(to == get_self(), {\cf22 "recipient of mint fee is incorrect"});\par
919 \par
920     {\cf20 // check that FREEBI is from the right contract}\par
921     symbol freebi_symbol = symbol(FREEBI_CURRENCY_CODE, 4);\par
922     check(quantity.symbol == freebi_symbol, {\cf22 "token symbol is not valid, expected FREEBI"});\par
923     {\cf18 string} freebi_tokens_contract = get_parameter(name({\cf22 "freebitokens"}));\par
924     check(get_first_receiver() == name(freebi_tokens_contract), {\cf22 "FREEBI payment is invalid"});\par
925 \par
926     {\cf20 // record amount of freebi in the credit table}\par
927     credit_index credit_table(get_self(), user.value);\par
928     {\cf17 auto} credit_iterator = credit_table.find(quantity.symbol.code().raw());\par
929 \par
930     {\cf20 // if there is already a credit record, proceed no further}\par
931     check(credit_iterator == credit_table.end(), {\cf22 "there is already a freebi->freeos mint transaction in progress"});\par
932 \par
933     {\cf20 // add the credit record}\par
934     credit_table.emplace(get_self(), [&]({\cf17 auto} &c) \{\par
935       c.balance = quantity;\par
936     \});\par
937   \}\par
938 \}\par
939  {\cf20 // end of points group}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ratify.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v ratify.hpp}
{\xe \v ratify.hpp}
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include <eosio/system.hpp>}\par
{\f2 #include "freeosgov.hpp"}\par
{\f2 #include "tables.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ratify.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //#pragma once}\par
2 {\cf21 #include <eosio/eosio.hpp>}\par
3 {\cf21 #include <eosio/system.hpp>}\par
4 {\cf21 #include "freeosgov.hpp"}\par
5 {\cf21 #include "tables.hpp"}\par
6 \par
7 {\cf17 using namespace }eosio;\par
8 {\cf17 using namespace }freedao;\par
9 {\cf17 using namespace }std;\par
10 \par
20 {\cf18 void} freeosgov::ratify_init() \{\par
21     ratify_index ratify_table(get_self(), get_self().value);\par
22     {\cf17 auto} ratify_iterator = ratify_table.begin();\par
23 \par
24     {\cf19 if}(ratify_iterator == ratify_table.end()) \{\par
25         {\cf20 // emplace}\par
26         ratify_table.emplace(get_self(), [&]({\cf17 auto} &r) \{ r.iteration = current_iteration(); \});\par
27     \}\par
28 \}\par
29 \par
30 \par
36 {\cf18 void} freeosgov::ratify_reset() \{\par
37     ratify_index ratify_table(get_self(), get_self().value);\par
38     {\cf17 auto} ratify_iterator = ratify_table.begin();\par
39 \par
40     {\cf19 if} (ratify_iterator != ratify_table.end()) \{\par
41         ratify_table.modify(ratify_iterator, get_self(), [&]({\cf17 auto} &ratify) \{\par
42             ratify.iteration = current_iteration();\par
43             ratify.participants = 0;\par
44             ratify.ratified = 0;\par
45         \});\par
46     \}\par
47 \}\par
48 \par
49 \par
58 {\cf18 void} freeosgov::ratify(name user, {\cf18 bool} ratify_vote) \{\par
59     \par
60     require_auth(user);\par
61 \par
62     {\cf20 // check that system is operational (masterswitch parameter set to "1")}\par
63     check(check_master_switch(), MSG_FREEOS_SYSTEM_NOT_AVAILABLE);\par
64 \par
65     tick();\par
66 \par
67     {\cf20 // is the user registered?}\par
68     check(is_registered(user), {\cf22 "ratify is not open to unregistered users"});\par
69     \par
70     {\cf20 // is the user verified?}\par
71     check(is_user_verified(user), {\cf22 "ratify is not open to unverified users"});\par
72     \par
73     {\cf20 // is the system operational?}\par
74     uint32_t this_iteration = current_iteration();\par
75     check(this_iteration != 0, {\cf22 "The freeos system is not available at this time"});\par
76 \par
77     {\cf20 // is the user alive?}\par
78     check(is_user_alive(user), {\cf22 "user has exceeded the maximum number of iterations"});\par
79 \par
80     {\cf20 // are we in the ratify period?}\par
81     check(is_action_period({\cf22 "ratify"}), {\cf22 "It is outside of the ratify period"});\par
82 \par
83     {\cf20 // has the user met the requirement of voting then ratifying?}\par
84     svr_index svrs_table(get_self(), user.value);\par
85     {\cf17 auto} svr_iterator = svrs_table.begin();\par
86     check(svr_iterator != svrs_table.end(), {\cf22 "user must have voted in order to ratify"});\par
87 \par
88     {\cf20 // check if the user has voted - a requirement for ratification}\par
89     check(svr_iterator->vote0 == this_iteration ||\par
90         svr_iterator->vote1 == this_iteration ||\par
91         svr_iterator->vote2 == this_iteration ||\par
92         svr_iterator->vote3 == this_iteration ||\par
93         svr_iterator->vote4 == this_iteration,\par
94         {\cf22 "user must have voted in order to ratify"});\par
95 \par
96     {\cf20 // check if the user has already ratified}\par
97     check(svr_iterator->ratify0 != this_iteration &&\par
98         svr_iterator->ratify1 != this_iteration &&\par
99         svr_iterator->ratify2 != this_iteration &&\par
100         svr_iterator->ratify3 != this_iteration &&\par
101         svr_iterator->ratify4 != this_iteration,\par
102         {\cf22 "user has already ratified"});\par
103 \par
104 \par
105     {\cf20 // store the responses}\par
106     ratify_index ratify_table(get_self(), get_self().value);\par
107     {\cf17 auto} ratify_iterator = ratify_table.begin();\par
108     check(ratify_iterator != ratify_table.end(), {\cf22 "ratify record is not defined"});\par
109 \par
110     {\cf20 // process the responses from the user}\par
111     ratify_table.modify(ratify_iterator, get_self(), [&]({\cf17 auto} &ratify) \{\par
112 \par
113         {\cf20 // ratified?}\par
114         {\cf19 if} (ratify_vote == {\cf17 true}) \{\par
115             ratify.ratified++;\par
116         \}        \par
117 \par
118         {\cf20 // update the number of participants}\par
119         ratify.participants += 1;\par
120 \par
121     \}); {\cf20 // end of modify}\par
122     \par
123     {\cf20 // record that the user has ratified}\par
124     svrs_table.modify(svr_iterator, get_self(), [&]({\cf17 auto} &svr) \{\par
125         {\cf19 switch} (this_iteration % 5) \{\par
126             {\cf19 case} 0: svr.ratify0 = this_iteration; {\cf19 break};\par
127             {\cf19 case} 1: svr.ratify1 = this_iteration; {\cf19 break};\par
128             {\cf19 case} 2: svr.ratify2 = this_iteration; {\cf19 break};\par
129             {\cf19 case} 3: svr.ratify3 = this_iteration; {\cf19 break};\par
130             {\cf19 case} 4: svr.ratify4 = this_iteration; {\cf19 break};\par
131         \}\par
132     \}); {\cf20 // end of modify}\par
133 \par
134     {\cf20 // update the ratifys counter in the user's participant record}\par
135     participants_index participants_table(get_self(), user.value);\par
136     {\cf17 auto} participant_iterator = participants_table.begin();\par
137     check(participant_iterator != participants_table.end(), {\cf22 "participant record not found"});\par
138     participants_table.modify(participant_iterator, get_self(), [&]({\cf17 auto} &p) \{\par
139         p.ratifys += 1;\par
140     \});\par
141 \par
142 \}\par
143  {\cf20 // end of ratify group}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
README.md File Reference\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
survey.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v survey.hpp}
{\xe \v survey.hpp}
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include <eosio/system.hpp>}\par
{\f2 #include "freeosgov.hpp"}\par
{\f2 #include "tables.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< string > {\b split} (string s, string delimiter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< int > {\b parse_survey_ranges} (string surveyranges)\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
survey.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //#pragma once}\par
2 {\cf21 #include <eosio/eosio.hpp>}\par
3 {\cf21 #include <eosio/system.hpp>}\par
4 {\cf21 #include "freeosgov.hpp"}\par
5 {\cf21 #include "tables.hpp"}\par
6 \par
7 {\cf17 using namespace }eosio;\par
8 {\cf17 using namespace }freedao;\par
9 {\cf17 using namespace }std;\par
10 \par
25 vector<string> split ({\cf18 string} s, {\cf18 string} delimiter) \{\par
26     {\cf18 size_t} pos_start = 0, pos_end, delim_len = delimiter.length();\par
27     {\cf18 string} token;\par
28     vector<string> res;\par
29 \par
30     {\cf19 while} ((pos_end = s.find (delimiter, pos_start)) != string::npos) \{\par
31         token = s.substr (pos_start, pos_end - pos_start);\par
32         pos_start = pos_end + delim_len;\par
33         res.push_back (token);\par
34     \}\par
35 \par
36     res.push_back (s.substr (pos_start));\par
37     {\cf19 return} res;\par
38 \}\par
39 \par
40 \par
49 std::vector<int> parse_survey_ranges({\cf18 string} surveyranges) \{\par
50     \par
51     {\cf20 // the surveyranges string looks like this: q2:1-48,q4:1-48}\par
52     std::vector<int> limits;\par
53 \par
54     std::vector<std::string> tokenlist = split(surveyranges, {\cf22 ","});\par
55 \par
56     std::vector q1_2_param = split(tokenlist[0], {\cf22 ":"});\par
57     std::vector q2_2_param = split(tokenlist[1], {\cf22 ":"});\par
58 \par
59     std::vector q1_minmax = split(q1_2_param[1], {\cf22 "-"});\par
60     std::vector q2_minmax = split(q2_2_param[1], {\cf22 "-"});\par
61 \par
62     limits.push_back (stoi(q1_minmax[0]));\par
63     limits.push_back (stoi(q1_minmax[1]));\par
64     limits.push_back (stoi(q2_minmax[0]));\par
65     limits.push_back (stoi(q2_minmax[1]));\par
66 \par
67     {\cf19 return} limits;\par
68 \}\par
69 \par
70 \par
75 {\cf18 void} freeosgov::survey_init() \{\par
76     survey_index survey_table(get_self(), get_self().value);\par
77     {\cf17 auto} survey_iterator = survey_table.begin();\par
78 \par
79     {\cf19 if} (survey_iterator == survey_table.end()) \{\par
80         {\cf20 // emplace}\par
81         survey_table.emplace(get_self(), [&]({\cf17 auto} &s) \{ s.iteration = current_iteration(); \});\par
82     \}    \par
83 \}\par
84 \par
85 \par
89 {\cf18 void} freeosgov::survey_reset() \{\par
90     survey_index survey_table(get_self(), get_self().value);\par
91     {\cf17 auto} survey_iterator = survey_table.begin();\par
92 \par
93     {\cf19 if} (survey_iterator != survey_table.end()) \{\par
94         survey_table.modify(survey_iterator, get_self(), [&]({\cf17 auto} &survey) \{\par
95             survey.iteration = current_iteration();\par
96             survey.participants = 0;\par
97             survey.q1choice1 = 0;\par
98             survey.q1choice2 = 0;\par
99             survey.q1choice3 = 0;\par
100             survey.q2average = 0.0;\par
101             survey.q3choice1 = 0;\par
102             survey.q3choice2 = 0;\par
103             survey.q3choice3 = 0;\par
104             survey.q4average = 0.0;\par
105             survey.q5choice1 = 0;\par
106             survey.q5choice2 = 0;\par
107             survey.q5choice3 = 0;\par
108             survey.q5choice4 = 0;\par
109             survey.q5choice5 = 0;\par
110             survey.q5choice6 = 0;\par
111             survey.q5choice7 = 0;\par
112             survey.q5choice8 = 0;\par
113         \});\par
114     \}\par
115 \}\par
116 \par
117 \par
130 {\cf18 void} freeosgov::survey(name user, uint8_t q1response, uint8_t q2response, uint8_t q3response, uint8_t q4response, uint8_t q5choice1, uint8_t q5choice2, uint8_t q5choice3) \{\par
131     \par
132     require_auth(user);\par
133 \par
134     {\cf20 // check that system is operational (masterswitch parameter set to "1")}\par
135     check(check_master_switch(), MSG_FREEOS_SYSTEM_NOT_AVAILABLE);\par
136 \par
137     tick();\par
138 \par
139     {\cf20 // is the user registered?}\par
140     check(is_registered(user), {\cf22 "survey is not open to unregistered users"});\par
141     \par
142     {\cf20 // is the user verified?}\par
143     check(is_user_verified(user), {\cf22 "survey is not open to unverified users"});\par
144     \par
145     {\cf20 // is the system operational?}\par
146     uint32_t this_iteration = current_iteration();\par
147     check(this_iteration != 0, {\cf22 "The freeos system is not available at this time"});\par
148 \par
149     {\cf20 // is the user alive}\par
150     check(is_user_alive(user), {\cf22 "user has exceeded the maximum number of iterations"});\par
151 \par
152     {\cf20 // are we in the survey period?}\par
153     check(is_action_period({\cf22 "survey"}), {\cf22 "It is outside of the survey period"});\par
154 \par
155     {\cf20 // has the user already completed the survey?}\par
156     svr_index svrs_table(get_self(), user.value);\par
157     {\cf17 auto} svr_iterator = svrs_table.begin();\par
158 \par
159     {\cf20 // if there is no svr record for the user then create it - we will update it at the end of the action}\par
160     {\cf19 if} (svr_iterator == svrs_table.end()) \{\par
161         {\cf20 // emplace}\par
162         svrs_table.emplace(get_self(), [&]({\cf17 auto} &svr) \{ ; \});\par
163         svr_iterator = svrs_table.begin();\par
164     \} {\cf19 else} \{\par
165         check(svr_iterator->survey0 != this_iteration &&\par
166             svr_iterator->survey1 != this_iteration &&\par
167             svr_iterator->survey2 != this_iteration &&\par
168             svr_iterator->survey3 != this_iteration &&\par
169             svr_iterator->survey4 != this_iteration,\par
170             {\cf22 "user has already completed the survey"});\par
171     \}\par
172 \par
173     {\cf20 // parameter checking}\par
174     {\cf20 // get and parse the survey slider ranges}\par
175     {\cf18 string} surveyranges = get_parameter(name({\cf22 "surveyranges"}));\par
176     std::vector<int> range_values = parse_survey_ranges(surveyranges);\par
177 \par
178     {\cf20 // responses 1 to 4 - must be an integer between bounds}\par
179     check(q1response >= 1 && q1response <= 3,   {\cf22 "Response 1 must be a number between 1 and 3"});\par
180     check(q2response >= range_values[0] && q2response <= range_values[1],  {\cf22 "Response 2 is out of range"});\par
181     check(q3response >= 1 && q3response <= 3,   {\cf22 "Response 3 must be a number between 1 and 3"});\par
182     check(q4response >= range_values[2] && q4response <= range_values[3],  {\cf22 "Response 4 is out of range"});\par
183     check(q5choice1 >= 1 && q5choice1 <= 6,     {\cf22 "Response 5 choice 1 must be a number between 1 and 6"});\par
184     check(q5choice2 >= 1 && q5choice2 <= 6,     {\cf22 "Response 5 choice 2 must be a number between 1 and 6"});\par
185     check(q5choice3 >= 1 && q5choice3 <= 6,     {\cf22 "Response 5 choice 3 must be a number between 1 and 6"});\par
186 \par
187     {\cf20 // response 5 - the 3 choices must not contain duplicates}\par
188     check((q5choice1 != q5choice2) && (q5choice2 != q5choice3) && (q5choice3 != q5choice1), {\cf22 "Response 5 has duplicate values"});\par
189 \par
190     {\cf20 // store the responses}\par
191     survey_index survey_table(get_self(), get_self().value);\par
192     {\cf17 auto} survey_iterator = survey_table.begin();\par
193     check(survey_iterator != survey_table.end(), {\cf22 "survey record is not defined"});\par
194 \par
195     {\cf20 // process the responses from the user}\par
196     {\cf20 // for multiple choice options, increment to add the user's selection}\par
197     {\cf20 // for running averages, compute new running average}\par
198     survey_table.modify(survey_iterator, get_self(), [&]({\cf17 auto} &survey) \{\par
199 \par
200         {\cf20 // question 1}\par
201         {\cf19 switch}(q1response) \{\par
202         {\cf19 case} 1:\par
203             survey.q1choice1++;\par
204             {\cf19 break};\par
205         {\cf19 case} 2:\par
206             survey.q1choice2++;\par
207             {\cf19 break};\par
208         {\cf19 case} 3:\par
209             survey.q1choice3++;\par
210             {\cf19 break};\par
211         \}\par
212 \par
213         {\cf20 // question 2 - running average}\par
214         survey.q2average = ((survey.q2average * survey.participants) + q2response) / (survey.participants + 1);\par
215 \par
216         {\cf20 // question 3}\par
217         {\cf19 switch}(q3response) \{\par
218         {\cf19 case} 1:\par
219             survey.q3choice1++;\par
220             {\cf19 break};\par
221         {\cf19 case} 2:\par
222             survey.q3choice2++;\par
223             {\cf19 break};\par
224         {\cf19 case} 3:\par
225             survey.q3choice3++;\par
226             {\cf19 break};\par
227         \}\par
228 \par
229         {\cf20 // question 4 - running average}\par
230         survey.q4average = ((survey.q4average * survey.participants) + q4response) / (survey.participants + 1);\par
231 \par
232         {\cf20 // question 5 - need to iterate the list of choices}\par
233         uint8_t q5choices[3] = \{ q5choice1, q5choice2, q5choice3 \};\par
234         uint8_t points[3] = \{ 3,2,1 \};  {\cf20 // points to distribute for 1st, 2nd, 3rd priorities}\par
235         {\cf19 for} ({\cf18 size_t} i = 0; i < {\cf17 sizeof}(q5choices); i++) \{\par
236             {\cf19 switch}(q5choices[i]) \{\par
237                 {\cf19 case} 1:\par
238                     survey.q5choice1 += points[i];\par
239                     {\cf19 break};\par
240                 {\cf19 case} 2:\par
241                     survey.q5choice2 += points[i];\par
242                     {\cf19 break};\par
243                 {\cf19 case} 3:\par
244                     survey.q5choice3 += points[i];\par
245                     {\cf19 break};\par
246                 {\cf19 case} 4:\par
247                     survey.q5choice4 += points[i];\par
248                     {\cf19 break};\par
249                 {\cf19 case} 5:\par
250                     survey.q5choice5 += points[i];\par
251                     {\cf19 break};\par
252                 {\cf19 case} 6:\par
253                     survey.q5choice6 += points[i];\par
254                     {\cf19 break};\par
255             \}\par
256         \}        \par
257 \par
258         {\cf20 // update the number of participants}\par
259         survey.participants += 1;\par
260 \par
261     \}); {\cf20 // end of modify}\par
262 \par
263     {\cf20 // record that the user has responded to this iteration's vote}\par
264     svrs_table.modify(svr_iterator, get_self(), [&]({\cf17 auto} &svr) \{\par
265         {\cf19 switch} (this_iteration % 5) \{\par
266             {\cf19 case} 0: svr.survey0 = this_iteration; {\cf19 break};\par
267             {\cf19 case} 1: svr.survey1 = this_iteration; {\cf19 break};\par
268             {\cf19 case} 2: svr.survey2 = this_iteration; {\cf19 break};\par
269             {\cf19 case} 3: svr.survey3 = this_iteration; {\cf19 break};\par
270             {\cf19 case} 4: svr.survey4 = this_iteration; {\cf19 break};\par
271         \}\par
272     \}); {\cf20 // end of modify}\par
273 \par
274     {\cf20 // increment the number of participants in this iteration}\par
275     system_index system_table(get_self(), get_self().value);\par
276     {\cf17 auto} system_iterator = system_table.begin();\par
277     check(system_iterator != system_table.end(), {\cf22 "system record is undefined"});\par
278     system_table.modify(system_iterator, get_self(), [&]({\cf17 auto} &s) \{\par
279         s.participants += 1;\par
280     \});\par
281 \par
282     {\cf20 // update the surveys counter in the user's participant record}\par
283     participants_index participants_table(get_self(), user.value);\par
284     {\cf17 auto} participant_iterator = participants_table.begin();\par
285     check(participant_iterator != participants_table.end(), {\cf22 "participant record not found"});\par
286     participants_table.modify(participant_iterator, get_self(), [&]({\cf17 auto} &p) \{\par
287         p.surveys += 1;\par
288     \});\par
289 \par
290 \}\par
291  {\cf20 // end of survey group}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
tables.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v tables.hpp}
{\xe \v tables.hpp}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include "eosio.proton.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b freedao::freebi_account}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b freedao}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::system_index} = eosio::multi_index<"system"_n, system >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::rewards_index} = eosio::multi_index<"rewards"_n, reward >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index<"accounts"_n, account > {\b freedao::accounts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index<"vestaccounts"_n, account > {\b freedao::lockaccounts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index<"mintfeefree"_n, account > {\b freedao::mintfeefree_index}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index< "accounts"_n, freebi_account > {\b freedao::freebi_accounts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index<"stat"_n, currency_stats > {\b freedao::stats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::transferers_index} = eosio::multi_index<"transferers"_n, transfer_whitelist >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::minters_index} = eosio::multi_index<"minters"_n, minter_whitelist >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::burners_index} = eosio::multi_index<"burners"_n, burner_whitelist >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::parameters_index} = eosio::multi_index<"parameters"_n, parameter >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::dparameters_index} = eosio::multi_index<"dparameters"_n, dparameter >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::old_users_index} = eosio::multi_index<"users"_n, olduser >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::participants_index} = eosio::multi_index<"participants"_n, participant >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::airclaim_users_index} = eosio::multi_index<"users"_n, airclaim_user >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef eosio::multi_index<"usersinfo"_n, userinfo > {\b freedao::usersinfo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::svr_index} = eosio::multi_index<"svrs"_n, svr >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::survey_index} = eosio::multi_index<"surveyrecord"_n, survey_record >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::vote_index} = eosio::multi_index<"voterecord"_n, vote_record >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::ratify_index} = eosio::multi_index<"ratifyrecord"_n, ratify_record >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::exchange_index} = eosio::multi_index<"exchangerate"_n, price >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::credit_index} = eosio::multi_index<"credits"_n, credit >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::currencies_index} = eosio::multi_index<"currencies"_n, currency >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::deposits_index} = eosio::multi_index<"deposits"_n, deposit >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::unvest_index} = eosio::multi_index<"unvests"_n, unvestevent >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::nft_table} = eosio::multi_index<"nfts"_n, nft_struct, indexed_by< "account"_n, const_mem_fun< nft_struct, uint64_t, &nft_struct::get_secondary > >, indexed_by< "active"_n, const_mem_fun< nft_struct, uint64_t, &nft_struct::get_active_nft > > >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b freedao::copynft_table} = eosio::multi_index<"nfts"_n, copynft_struct, indexed_by<"account"_n, const_mem_fun< copynft_struct, uint64_t, &copynft_struct::get_secondary > > >\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b freedao::primary_key} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b freedao::get_secondary} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b freedao::get_active_nft} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::iteration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::usercount}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b freedao::claimevents}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::participants}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::unlockpercent}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::unlockpercentiteration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::failsafecounter}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::cls}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::iteration_cls}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::iteration_issuance}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::participant_issuance}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::issuance_rate}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::mint_fee_percent}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::mint_fee_percent_xpr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::mint_fee_percent_xusdc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::locking_threshold}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::pool}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::burn}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::ratified}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::mint_freebi_transfer_fee}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::point_freeos_ratio}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::mint_throttle}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::burn_to_boost}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::max_supply}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
name {\b freedao::issuer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b freedao::value}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b freedao::account_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::registered_iteration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::staked_iteration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::votes}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::issuances}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::last_claim}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::total_issuance_amount}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::surveys}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::ratifys}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::last_issuance}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b freedao::name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b freedao::avatar}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::verified}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b freedao::date}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint64_t {\b freedao::verifiedon}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
eosio::name {\b freedao::verifier}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< eosio::name > {\b freedao::raccs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::tuple< eosio::name, eosio::name > > {\b freedao::aacts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::tuple< eosio::name, std::string > > {\b freedao::ac}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b kyc_prov} > {\b freedao::kyc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::survey1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::survey2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::survey3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::survey4}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::vote0}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::vote1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::vote2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::vote3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::vote4}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::ratify0}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::ratify1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::ratify2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::ratify3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::ratify4}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q1choice1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q1choice2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q1choice3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q2average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q3choice1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q3choice2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q3choice3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q4average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q5choice1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q5choice2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q5choice3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q5choice4}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q5choice5}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q5choice6}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q5choice7}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q5choice8}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q1average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q2average_xpr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q2average_xusdc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q3average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q4choice1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q4choice2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q5average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q6choice1}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q6choice2}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q6choice3}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q6choice4}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q6choice5}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::q6choice6}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q7average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q8average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q9average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::q10average}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::targetprice}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
name {\b freedao::contract}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::usdrate}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::accrued} = asset(0,symbol("POINT",4) )\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
name {\b freedao::eosaccount}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
POINT account used to receive dividends and for identification (as a secondary key) }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b freedao::roi_target_cap}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1- iterative 2- horizontal 3- vertical }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b freedao::nft_percentage}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Only this is used for counting dividend to pay - the other parameters examine eligibility,. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
time_point_sec {\b freedao::mint_date}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
NFT mint date. In fact, the current date of the moment when this nftx record was created,. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b freedao::locked}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
lock dividends for selected new members. Note: When unlock should be not lock again. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
asset {\b freedao::threshold} = asset(0,symbol("POINT",4) )\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
max total divident (2) for horizontal cap or max weekly dividend for vertical (3) cap }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b freedao::rates_left}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
count down payments left in iteration cap=1 only \par
 }{
}\par
}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
tables.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include <eosio/eosio.hpp>}\par
3 {\cf21 #include "eosio.proton.hpp"}\par
4 \par
5 {\cf17 using namespace }eosio;\par
6 {\cf17 using namespace }std;\par
7 \par
8 {\cf17 namespace }freedao \{\par
9 \par
10 {\cf20 // SYSTEM}\par
11 {\cf20 // system table}\par
12 {\cf17 struct}[[ eosio::table({\cf22 "system"}), eosio::contract({\cf22 "freeosgov"}) ]] system \{\par
13 time_point init;\par
14 uint32_t iteration;\par
15 uint32_t usercount;\par
16 uint64_t claimevents;\par
17 uint32_t participants;\par
18 uint32_t unlockpercent;\par
19 uint32_t unlockpercentiteration;\par
20 uint32_t failsafecounter;\par
21 asset cls;\par
22 \par
23 uint64_t primary_key(){\cf17  const }\{ {\cf19 return} 0; \} {\cf20 // return a constant to ensure a single-row table}\par
24 \};\par
25 {\cf17 using }system_index = eosio::multi_index<{\cf22 "system"}_n, system>;\par
26 \par
27 {\cf20 // REWARDS}\par
28 {\cf20 // rewards table}\par
29 {\cf17 struct}[[ eosio::table({\cf22 "rewards"}), eosio::contract({\cf22 "freeosgov"}) ]] reward \{\par
30 \par
31 uint32_t  iteration;\par
32 asset     iteration_cls;\par
33 asset     iteration_issuance;\par
34 asset     participant_issuance;\par
35 uint32_t  participants;\par
36 {\cf18 double}    issuance_rate;\par
37 {\cf18 double}    mint_fee_percent;\par
38 {\cf18 double}    mint_fee_percent_xpr;\par
39 {\cf18 double}    mint_fee_percent_xusdc;\par
40 {\cf18 double}    locking_threshold;\par
41 {\cf18 bool}      pool;\par
42 {\cf18 bool}      burn;\par
43 {\cf18 bool}      ratified;\par
44 {\cf18 double}    mint_freebi_transfer_fee;\par
45 {\cf18 double}    point_freeos_ratio;\par
46 {\cf18 double}    mint_throttle;\par
47 {\cf18 bool}      burn_to_boost;\par
48 \par
49 uint64_t primary_key(){\cf17  const }\{ {\cf19 return} iteration; \}\par
50 \};\par
51 {\cf17 using }rewards_index = eosio::multi_index<{\cf22 "rewards"}_n, reward>;\par
52 \par
53 \par
54 {\cf20 // POINTS ACCOUNTS}\par
55 {\cf17 struct}[[ eosio::table({\cf22 "accounts"}), eosio::contract({\cf22 "freeosgov"}) ]] account \{\par
56   asset balance;\par
57 \par
58   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} balance.symbol.code().raw(); \}\par
59 \};\par
60 {\cf17 typedef} eosio::multi_index<{\cf22 "accounts"}_n, account> accounts;\par
61 {\cf17 typedef} eosio::multi_index<{\cf22 "vestaccounts"}_n, account> lockaccounts;\par
62 {\cf17 typedef} eosio::multi_index<{\cf22 "mintfeefree"}_n, account> mintfeefree_index;\par
63 \par
64 {\cf20 // FREEBI accounts}\par
65 {\cf17 struct }[[eosio::table({\cf22 "accounts"}), eosio::contract("freebi")]] freebi_account \{\par
66   asset    balance;\par
67 \par
68   uint64_t primary_key(){\cf17 const }\{ {\cf19 return} balance.symbol.code().raw(); \}\par
69 \};\par
70 {\cf17 typedef} eosio::multi_index< {\cf22 "accounts"}_n, freebi_account > freebi_accounts;\par
71 \par
72 \par
73 {\cf20 // currency stats}\par
74 {\cf17 struct}[[ eosio::table({\cf22 "stat"}), eosio::contract({\cf22 "freeosgov"}) ]] currency_stats \{\par
75   asset supply;\par
76   asset max_supply;\par
77   name issuer;\par
78 \par
79   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} supply.symbol.code().raw(); \}\par
80 \};\par
81 {\cf17 typedef} eosio::multi_index<{\cf22 "stat"}_n, currency_stats> stats;\par
82 \par
83 \par
84 {\cf20 // transferers table - a whitelist of who can call the transfer function}\par
85 {\cf17 struct}[[ eosio::table({\cf22 "transferers"}), eosio::contract({\cf22 "freeosgov"}) ]] transfer_whitelist \{\par
86   name account;\par
87 \par
88   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} account.value; \}\par
89 \};\par
90 {\cf17 using }transferers_index = eosio::multi_index<{\cf22 "transferers"}_n, transfer_whitelist>;\par
91 \par
92 {\cf20 // minters table - a whitelist of who can call the issue function}\par
93 {\cf17 struct}[[ eosio::table({\cf22 "minters"}), eosio::contract({\cf22 "freeosgov"}) ]] minter_whitelist \{\par
94   name account;\par
95 \par
96   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} account.value; \}\par
97 \};\par
98 {\cf17 using }minters_index = eosio::multi_index<{\cf22 "minters"}_n, minter_whitelist>;\par
99 \par
100 {\cf20 // burners table - a whitelist of who can call the retire function}\par
101 {\cf17 struct}[[ eosio::table({\cf22 "burners"}), eosio::contract({\cf22 "freeosgov"}) ]] burner_whitelist \{\par
102   name account;\par
103 \par
104   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} account.value; \}\par
105 \};\par
106 {\cf17 using }burners_index = eosio::multi_index<{\cf22 "burners"}_n, burner_whitelist>;\par
107 \par
108 \par
109 \par
110 {\cf20 // PARAMETERS}\par
111 {\cf20 // parameters table}\par
112 {\cf17 struct}[[ eosio::table({\cf22 "parameters"}), eosio::contract({\cf22 "freeosgov"}) ]] parameter \{\par
113 name paramname;\par
114 {\cf18 string} value;\par
115 \par
116 uint64_t primary_key(){\cf17  const }\{ {\cf19 return} paramname.value; \}\par
117 \};\par
118 {\cf17 using }parameters_index = eosio::multi_index<{\cf22 "parameters"}_n, parameter>;\par
119 \par
120 {\cf20 // DPARAMETERS}\par
121 {\cf20 // double parameters table}\par
122 {\cf17 struct}[[ eosio::table({\cf22 "dparameters"}), eosio::contract({\cf22 "freeosgov"}) ]] dparameter \{\par
123 name paramname;\par
124 {\cf18 double} value;\par
125 \par
126 uint64_t primary_key(){\cf17  const }\{ {\cf19 return} paramname.value; \}\par
127 \};\par
128 {\cf17 using }dparameters_index = eosio::multi_index<{\cf22 "dparameters"}_n, dparameter>;\par
129 \par
130 \par
131 {\cf20 // USERS - new - will be retired}\par
132 {\cf20 // the registered user table}\par
133 {\cf17 struct}[[ eosio::table({\cf22 "oldusers"}), eosio::contract({\cf22 "freeosgov"}) ]] olduser \{\par
134   asset stake;                    {\cf20 // how many tokens staked}\par
135   {\cf18 string} account_type;            {\cf20 // user's verification level}\par
136   uint32_t registered_iteration;  {\cf20 // when the user was registered}\par
137   uint32_t staked_iteration;      {\cf20 // the iteration in which the user staked their tokens}\par
138   uint32_t votes;                 {\cf20 // how many votes the user has made}\par
139   uint32_t issuances;             {\cf20 // total number of times the user has been issued with OPTIONs}\par
140   uint32_t last_claim;         {\cf20 // the last iteration in which the user was issued with OPTIONs}\par
141   asset total_issuance_amount;    {\cf20 // accrued POINTs}\par
142 \par
143   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} 0; \} {\cf20 // return a constant to ensure a single-row table}\par
144 \};\par
145 {\cf17 using }old_users_index = eosio::multi_index<{\cf22 "users"}_n, olduser>;\par
146 \par
147 \par
148 {\cf20 // PARTICIPANTS}\par
149 {\cf20 // the participants table}\par
150 {\cf17 struct}[[ eosio::table({\cf22 "participants"}), eosio::contract({\cf22 "freeosgov"}) ]] participant \{\par
151   {\cf18 string} account_type;            {\cf20 // user's verification level}\par
152   uint32_t registered_iteration;  {\cf20 // when the user was registered}\par
153   uint32_t issuances;             {\cf20 // total number of times the user has been issued with POINTs}\par
154   asset total_issuance_amount;    {\cf20 // accrued POINTs}\par
155   uint32_t last_claim;            {\cf20 // the last iteration in which the user attempted to claim}\par
156   uint32_t surveys;               {\cf20 // how many surveys the user has completed}\par
157   uint32_t votes;                 {\cf20 // how many votes the user has completed}\par
158   uint32_t ratifys;               {\cf20 // how many ratifys the user has completed  }\par
159 \par
160   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} 0; \} {\cf20 // return a constant to ensure a single-row table}\par
161 \};\par
162 {\cf17 using }participants_index = eosio::multi_index<{\cf22 "participants"}_n, participant>;\par
163 \par
164 \par
165 {\cf20 // AIRCLAIM_USERS - required to interpret the airclaim registered user table}\par
166 {\cf17 struct}[[ eosio::table({\cf22 "users"}), eosio::contract({\cf22 "freeos"}) ]] airclaim_user \{\par
167   asset stake;                   {\cf20 // how many XPR tokens staked}\par
168   {\cf18 char} account_type;             {\cf20 // user's verification level}\par
169   uint32_t registered_iteration; {\cf20 // when the user was registered}\par
170   uint32_t staked_iteration;     {\cf20 // the iteration in which the user staked their tokens}\par
171   uint32_t votes;         {\cf20 // how many votes the user has made}\par
172   uint32_t issuances;     {\cf20 // total number of times the user has been issued with OPTIONs}\par
173   uint32_t last_issuance; {\cf20 // the last iteration in which the user was issued with OPTIONs}\par
174 \par
175   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} stake.symbol.code().raw(); \}\par
176 \};\par
177 {\cf17 using }airclaim_users_index = eosio::multi_index<{\cf22 "users"}_n, airclaim_user>;\par
178 \par
179 \par
180 \par
181 {\cf20 // USERSINFO}\par
182 {\cf20 // Verification table - a mockup of the verification table on eosio.proton which is not available on the testnet}\par
183 {\cf20 // This allows us to test in development.}\par
184 {\cf20 // Used to determine a user's account_type. Taken from}\par
185 {\cf20 // https://github.com/ProtonProtocol/proton.contracts/blob/master/contracts/eosio.proton/include/eosio.proton/eosio.proton.hpp}\par
186 {\cf17 struct}[[ eosio::table({\cf22 "usersinfo"}), eosio::contract({\cf22 "eosio.proton"}) ]] userinfo \{\par
187   name acc;\par
188   std::string name;\par
189   std::string avatar;\par
190   {\cf18 bool} verified;\par
191   uint64_t date;\par
192   uint64_t verifiedon;\par
193   eosio::name verifier;\par
194 \par
195   std::vector<eosio::name> raccs;\par
196   std::vector<std::tuple<eosio::name, eosio::name>> aacts;\par
197   std::vector<std::tuple<eosio::name, std::string>> ac;\par
198 \par
199   std::vector<kyc_prov> kyc;\par
200 \par
201   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} acc.value; \}\par
202 \};\par
203 {\cf17 typedef} eosio::multi_index<{\cf22 "usersinfo"}_n, userinfo> usersinfo;\par
204 \par
205 \par
206 {\cf20 // PARTICIPATION}\par
207 {\cf20 // survey, vote and ratification participation table}\par
208 {\cf17 struct}[[ eosio::table({\cf22 "svrs"}), eosio::contract({\cf22 "freeosgov"}) ]] svr \{\par
209     uint32_t survey0;\par
210     uint32_t survey1;\par
211     uint32_t survey2;\par
212     uint32_t survey3;\par
213     uint32_t survey4;\par
214     uint32_t vote0;\par
215     uint32_t vote1;\par
216     uint32_t vote2;\par
217     uint32_t vote3;\par
218     uint32_t vote4;\par
219     uint32_t ratify0;\par
220     uint32_t ratify1;\par
221     uint32_t ratify2;\par
222     uint32_t ratify3;\par
223     uint32_t ratify4;\par
224 \par
225     uint64_t primary_key(){\cf17  const }\{ {\cf19 return} 0; \} {\cf20 // return a constant to ensure a single-row table}\par
226 \};\par
227 {\cf17 using }svr_index = eosio::multi_index<{\cf22 "svrs"}_n, svr>;\par
228 \par
229 {\cf20 // SURVEY}\par
230 {\cf20 // Running processing of survey results}\par
231 {\cf17 struct}[[ eosio::table({\cf22 "surveyrecord"}), eosio::contract({\cf22 "freeosgov"}) ]] survey_record \{\par
232     uint32_t iteration;\par
233     uint32_t participants;\par
234     uint32_t q1choice1;\par
235     uint32_t q1choice2;\par
236     uint32_t q1choice3;\par
237     {\cf18 double} q2average;\par
238     uint32_t q3choice1;\par
239     uint32_t q3choice2;\par
240     uint32_t q3choice3;\par
241     {\cf18 double} q4average;\par
242     uint32_t q5choice1;\par
243     uint32_t q5choice2;\par
244     uint32_t q5choice3;\par
245     uint32_t q5choice4;\par
246     uint32_t q5choice5;\par
247     uint32_t q5choice6;\par
248     uint32_t q5choice7;\par
249     uint32_t q5choice8;\par
250     uint64_t primary_key(){\cf17  const }\{ {\cf19 return} 0; \} {\cf20 // return a constant to ensure a single-row table}\par
251 \};\par
252 {\cf17 using }survey_index = eosio::multi_index<{\cf22 "surveyrecord"}_n, survey_record>;\par
253 \par
254 {\cf20 // VOTE}\par
255 {\cf20 // Running processing of vote responses}\par
256 {\cf17 struct}[[ eosio::table({\cf22 "voterecord"}), eosio::contract({\cf22 "freeosgov"}) ]] vote_record \{\par
257     uint32_t iteration;\par
258     uint32_t participants;\par
259     {\cf18 double} q1average;   {\cf20 // issuance rate (0 - 100)}\par
260     {\cf18 double} q2average;   {\cf20 // mint fee percent (6 - 30) for FREEOS}\par
261     {\cf18 double} q2average_xpr; {\cf20 // mint fee percent (6 - 30) for XPR}\par
262     {\cf18 double} q2average_xusdc; {\cf20 // mint fee percent (6 - 30) for XUSDC}\par
263     {\cf18 double} q3average;   {\cf20 // locking threshold - expressed as asset price}\par
264     uint32_t q4choice1; {\cf20 // POOL}\par
265     uint32_t q4choice2; {\cf20 // BURN}\par
266     {\cf18 double} q5average;   {\cf20 // Reserve pool % to be released}\par
267     uint32_t q6choice1; {\cf20 // partner 1}\par
268     uint32_t q6choice2; {\cf20 // partner 2}\par
269     uint32_t q6choice3; {\cf20 // partner 3}\par
270     uint32_t q6choice4; {\cf20 // partner 4}\par
271     uint32_t q6choice5; {\cf20 // partner 5}\par
272     uint32_t q6choice6; {\cf20 // partner 6}\par
273     {\cf18 double} q7average;   {\cf20 // reserved for future use}\par
274     {\cf18 double} q8average;   {\cf20 // reserved for future use}\par
275     {\cf18 double} q9average;   {\cf20 // reserved for future use}\par
276     {\cf18 double} q10average;  {\cf20 // reserved for future use}\par
277 \par
278     uint64_t primary_key(){\cf17  const }\{ {\cf19 return} 0; \} {\cf20 // return a constant to ensure a single-row table}\par
279 \};\par
280 {\cf17 using }vote_index = eosio::multi_index<{\cf22 "voterecord"}_n, vote_record>;\par
281 \par
282 \par
283 {\cf20 // RATIFY}\par
284 {\cf20 // Running processing of ratify responses}\par
285 {\cf17 struct}[[ eosio::table({\cf22 "ratifyrecord"}), eosio::contract({\cf22 "freeosgov"}) ]] ratify_record \{\par
286     uint32_t iteration;\par
287     uint32_t participants;\par
288     uint32_t ratified;\par
289     uint64_t primary_key(){\cf17  const }\{ {\cf19 return} 0; \} {\cf20 // return a constant to ensure a single-row table}\par
290 \};\par
291 {\cf17 using }ratify_index = eosio::multi_index<{\cf22 "ratifyrecord"}_n, ratify_record>;\par
292 \par
293 \par
294 {\cf20 // EXCHANGERATE}\par
295 {\cf20 // exchangerate table}\par
296 {\cf17 struct}[[ eosio::table({\cf22 "exchangerate"}), eosio::contract({\cf22 "freeosgov"}) ]] price \{\par
297   {\cf18 double} currentprice;\par
298   {\cf18 double} targetprice;\par
299 \par
300   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} 0; \} {\cf20 // return a constant (0 in this case) to ensure a single-row table}\par
301 \};\par
302 {\cf17 using }exchange_index = eosio::multi_index<{\cf22 "exchangerate"}_n, price>;\par
303 \par
304 \par
305 {\cf20 // CREDIT}\par
306 {\cf20 // credit table}\par
307 {\cf17 struct}[[ eosio::table({\cf22 "credits"}), eosio::contract({\cf22 "freeosgov"}) ]] credit \{\par
308   asset balance;\par
309 \par
310   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} balance.symbol.code().raw(); \}\par
311 \};\par
312 {\cf17 using }credit_index = eosio::multi_index<{\cf22 "credits"}_n, credit>;\par
313 \par
314 \par
315 {\cf20 // CURRENCIES}\par
316 {\cf20 // currencies table}\par
317 {\cf17 struct}[[ eosio::table({\cf22 "currencies"}), eosio::contract({\cf22 "freeosgov"}) ]] currency \{\par
318   symbol  symbol;\par
319   name    contract;\par
320   {\cf18 double}  usdrate;\par
321   \par
322   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} symbol.raw(); \}\par
323 \};\par
324 {\cf17 using }currencies_index = eosio::multi_index<{\cf22 "currencies"}_n, currency>;\par
325 \par
326 {\cf20 // DEPOSITS}\par
327 {\cf20 // freedao deposits table}\par
328 {\cf17 struct}[[ eosio::table({\cf22 "deposits"}), eosio::contract({\cf22 "freeosgov"}) ]] deposit \{\par
329   uint64_t iteration;\par
330   asset accrued;\par
331 \par
332   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} iteration; \}\par
333 \};\par
334 {\cf17 using }deposits_index = eosio::multi_index<{\cf22 "deposits"}_n, deposit>;\par
335 \par
336 {\cf20 // unvest history table - scoped on user account name}\par
337 {\cf17 struct}[[ eosio::table({\cf22 "unvests"}), eosio::contract({\cf22 "freeosgov"}) ]] unvestevent \{\par
338   uint64_t iteration_number;\par
339 \par
340   uint64_t primary_key(){\cf17  const }\{ {\cf19 return} 0; \} {\cf20 // single record per user}\par
341 \};\par
342 {\cf17 using }unvest_index = eosio::multi_index<{\cf22 "unvests"}_n, unvestevent>;\par
343 \par
344 {\cf20 // DIVIDEND}\par
345 {\cf17 struct}[[ eosio::table({\cf22 "nfts"}), eosio::contract({\cf22 "dividenda"}) ]] nft_struct \{                        \par
346       uint64_t nft_key;\par
347       name     eosaccount;                  \par
348       uint8_t  roi_target_cap;              \par
349       {\cf18 double}   nft_percentage;              \par
350       time_point_sec mint_date;             \par
351       {\cf18 bool}     locked;                      \par
352       asset    threshold = asset(0,symbol({\cf22 "POINT"},4) ); \par
353       uint32_t rates_left;                  \par
354       asset    accrued = asset(0,symbol({\cf22 "POINT"},4) ); ;                       \par
355       uint64_t primary_key(){\cf17  const }\{{\cf19 return} nft_key;\}\par
356       uint64_t get_secondary(){\cf17  const }\{ {\cf19 return} eosaccount.value; \}\par
357       uint64_t get_active_nft(){\cf17  const }\{ {\cf19 if} (locked == {\cf17 true}) {\cf19 return} 0; {\cf19 else} {\cf19 return} eosaccount.value; \}\par
358   \};\par
359   {\cf20 // using nft_table = eosio::multi_index<"nfts"_n, nft_struct, indexed_by<"account"_n, const_mem_fun<nft_struct, uint64_t, &nft_struct::get_secondary>>>; }\par
360 \par
361   {\cf17 using }nft_table = eosio::multi_index<{\cf22 "nfts"}_n, nft_struct,\par
362         indexed_by< {\cf22 "account"}_n,\par
363             const_mem_fun<nft_struct, uint64_t, &nft_struct::get_secondary>\par
364         >,\par
365         indexed_by< {\cf22 "active"}_n,\par
366             const_mem_fun<nft_struct, uint64_t, &nft_struct::get_active_nft>\par
367         >\par
368     >;\par
369 \par
370   \par
371   {\cf17 struct}[[ eosio::table({\cf22 "copynfts"}), eosio::contract({\cf22 "dividenda"}) ]] copynft_struct \{                        \par
372       uint64_t nft_key;\par
373       name     eosaccount;                  \par
374       uint8_t  roi_target_cap;              \par
375       {\cf18 double}   nft_percentage;              \par
376       time_point_sec mint_date;             \par
377       {\cf18 bool}     locked;                      \par
378       asset    threshold = asset(0,symbol({\cf22 "POINT"},4) ); \par
379       uint32_t rates_left;                  \par
380       asset    accrued = asset(0,symbol({\cf22 "POINT"},4) ); ;                       \par
381       uint64_t primary_key(){\cf17  const }\{{\cf19 return} nft_key;\}\par
382       uint64_t get_secondary(){\cf17  const }\{ {\cf19 return} eosaccount.value; \}\par
383       {\cf20 // uint64_t get_active_nft() const \{ if (locked == true) return 0; else return eosaccount.value; \}}\par
384   \};\par
385   {\cf17 using }copynft_table = eosio::multi_index<{\cf22 "nfts"}_n, copynft_struct, indexed_by<{\cf22 "account"}_n, const_mem_fun<copynft_struct, uint64_t, &copynft_struct::get_secondary>>>; \par
386 \par
387 \par
388 \} {\cf20 // end of namespace freedao}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
vote.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v vote.hpp}
{\xe \v vote.hpp}
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <eosio/eosio.hpp>}\par
{\f2 #include <eosio/system.hpp>}\par
{\f2 #include "freeosgov.hpp"}\par
{\f2 #include "tables.hpp"}\par
{\f2 #include "config.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< int > {\b parse_vote_ranges} (string voteranges)\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
vote.hpp\par \pard\plain 
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //#pragma once}\par
2 {\cf21 #include <eosio/eosio.hpp>}\par
3 {\cf21 #include <eosio/system.hpp>}\par
4 {\cf21 #include "freeosgov.hpp"}\par
5 {\cf21 #include "tables.hpp"}\par
6 {\cf21 #include "config.hpp"}\par
7 \par
8 {\cf17 using namespace }eosio;\par
9 {\cf17 using namespace }freedao;\par
10 {\cf17 using namespace }std;\par
11 \par
21 {\cf18 void} freeosgov::vote_init() \{\par
22     vote_index vote_table(get_self(), get_self().value);\par
23     {\cf17 auto} vote_iterator = vote_table.begin();\par
24 \par
25     {\cf19 if} (vote_iterator == vote_table.end()) \{\par
26         {\cf20 // emplace}\par
27         vote_table.emplace(get_self(), [&]({\cf17 auto} &v) \{ v.iteration = current_iteration(); \});\par
28     \}\par
29 \}\par
30 \par
31 \par
35 {\cf18 void} freeosgov::vote_reset() \{\par
36     vote_index vote_table(get_self(), get_self().value);\par
37     {\cf17 auto} vote_iterator = vote_table.begin();\par
38 \par
39     {\cf19 if} (vote_iterator != vote_table.end()) \{\par
40         vote_table.modify(vote_iterator, get_self(), [&]({\cf17 auto} &vote) \{\par
41             vote.iteration = current_iteration();\par
42             vote.participants = 0;\par
43             vote.q1average = 0.0;\par
44             vote.q2average = 0.0;\par
45             vote.q2average_xpr = 0.0;\par
46             vote.q2average_xusdc = 0.0;\par
47             vote.q3average = 0.0;\par
48             vote.q4choice1 = 0;   {\cf20 // POOL}\par
49             vote.q4choice2 = 0;   {\cf20 // BURN}\par
50             vote.q5average = 0.0;\par
51             vote.q6choice1 = 0;\par
52             vote.q6choice2 = 0;\par
53             vote.q6choice3 = 0;\par
54             vote.q6choice4 = 0;\par
55             vote.q6choice5 = 0;\par
56             vote.q6choice6 = 0;\par
57             vote.q7average = 0.0;\par
58             vote.q8average = 0.0;\par
59             vote.q9average = 0.0;\par
60             vote.q10average = 0.0;\par
61         \});\par
62     \}\par
63 \par
64 \}\par
65 \par
66 \par
75 std::vector<int> parse_vote_ranges({\cf18 string} voteranges) \{\par
76     \par
77     {\cf20 // the voteranges string looks like this: q1:0-100,q2:6-30,q5:0-50}\par
78     std::vector<int> limits;\par
79 \par
80     std::vector<std::string> tokenlist = split(voteranges, {\cf22 ","});\par
81 \par
82     std::vector q1_param = split(tokenlist[0], {\cf22 ":"});\par
83     std::vector q2_param = split(tokenlist[1], {\cf22 ":"});\par
84     std::vector q5_param = split(tokenlist[2], {\cf22 ":"});\par
85 \par
86     std::vector q1_minmax = split(q1_param[1], {\cf22 "-"});\par
87     std::vector q2_minmax = split(q2_param[1], {\cf22 "-"});\par
88     std::vector q5_minmax = split(q5_param[1], {\cf22 "-"});\par
89 \par
90     limits.push_back (stoi(q1_minmax[0]));\par
91     limits.push_back (stoi(q1_minmax[1]));\par
92     limits.push_back (stoi(q2_minmax[0]));\par
93     limits.push_back (stoi(q2_minmax[1]));\par
94     limits.push_back (stoi(q5_minmax[0]));\par
95     limits.push_back (stoi(q5_minmax[1]));\par
96 \par
97     {\cf19 return} limits;\par
98 \}\par
99 \par
100 \par
101 \par
122 {\cf18 void} freeosgov::vote(name user, uint8_t q1response, uint8_t q2response, uint8_t q2response_xpr, uint8_t q2response_xusdc,\par
123                     {\cf18 double} q3response, {\cf18 string} q4response, uint8_t q5response, uint8_t q6choice1, uint8_t q6choice2, uint8_t q6choice3,\par
124                     {\cf18 double} q7response, {\cf18 double} q8response, {\cf18 double} q9response, uint8_t q10response) \{\par
125     \par
126     require_auth(user);\par
127 \par
128     tick();\par
129 \par
130     {\cf20 // check that system is operational (masterswitch parameter set to "1")}\par
131     check(check_master_switch(), MSG_FREEOS_SYSTEM_NOT_AVAILABLE);\par
132 \par
133     {\cf20 // is the user registered?}\par
134     check(is_registered(user), {\cf22 "voting is not open to unregistered users"});\par
135     \par
136     {\cf20 // is the user registered and verified?}\par
137     check(is_user_verified(user), {\cf22 "voting is not open to unverified users"});\par
138     \par
139     {\cf20 // is the system operational?}\par
140     uint32_t this_iteration = current_iteration();\par
141     check(this_iteration != 0, {\cf22 "The freeos system is not available at this time"});\par
142 \par
143     {\cf20 // is the user alive?}\par
144     check(is_user_alive(user), {\cf22 "user has exceeded the maximum number of iterations"});\par
145 \par
146     {\cf20 // are we in the vote period?}\par
147     check(is_action_period({\cf22 "vote"}), {\cf22 "It is outside of the vote period"});\par
148 \par
149     {\cf20 // has the user already completed the vote?}\par
150     svr_index svrs_table(get_self(), user.value);\par
151     {\cf17 auto} svr_iterator = svrs_table.begin();\par
152 \par
153     {\cf20 // if there is no svr record for the user then create it - we will update it at the end of the action}\par
154     {\cf19 if} (svr_iterator == svrs_table.end()) \{\par
155         {\cf20 // emplace}\par
156         svrs_table.emplace(get_self(), [&]({\cf17 auto} &svr) \{ ; \});\par
157         svr_iterator = svrs_table.begin();\par
158     \} {\cf19 else} \{\par
159         check(svr_iterator->vote0 != this_iteration &&\par
160             svr_iterator->vote1 != this_iteration &&\par
161             svr_iterator->vote2 != this_iteration &&\par
162             svr_iterator->vote3 != this_iteration &&\par
163             svr_iterator->vote4 != this_iteration,\par
164             {\cf22 "user has already voted"});\par
165     \}\par
166 \par
167     {\cf20 // parameter checking}\par
168     {\cf20 // n.b. split function is defined in survey.hpp}\par
169 \par
170     {\cf20 // get and parse the vote slider ranges}\par
171     {\cf18 string} voteranges = get_parameter(name({\cf22 "voteranges"}));\par
172     std::vector<int> vote_range_values = parse_vote_ranges(voteranges);\par
173 \par
174     {\cf20 // get the current price of Freeos}\par
175     exchange_index rates_table(get_self(), get_self().value);\par
176     {\cf17 auto} rate_iterator = rates_table.begin();\par
177     check(rate_iterator != rates_table.end(), {\cf22 "current price of Freeos is undefined"});\par
178     {\cf18 double} current_price = rate_iterator->currentprice;\par
179     {\cf20 // double target_price = rate_iterator->targetprice;}\par
180 \par
181     {\cf20 // calculate the upper bound of locking threshold (q3)}\par
182     {\cf18 double} lock_factor = get_dparameter(name({\cf22 "lockfactor"}));\par
183 \par
184     {\cf18 double} locking_threshold_upper_limit = 0.0;\par
185     {\cf19 if} (current_price < HARD_EXCHANGE_RATE_FLOOR) \{\par
186         locking_threshold_upper_limit = lock_factor * HARD_EXCHANGE_RATE_FLOOR;\par
187     \} {\cf19 else} \{\par
188         locking_threshold_upper_limit = lock_factor * current_price;\par
189     \}\par
190 \par
191     \par
192     check(q1response >= vote_range_values[0] && q1response <= vote_range_values[1],  {\cf22 "Response 1 is out of range"});\par
193     check(q2response >= vote_range_values[2] && q2response <= vote_range_values[3],  {\cf22 "Response 2 (FREEOS mint fee) is out of range"});\par
194     check(q2response_xpr >= vote_range_values[2] && q2response_xpr <= vote_range_values[3],  {\cf22 "Response 2 (XPR mint fee) is out of range"});\par
195     check(q2response_xusdc >= vote_range_values[2] && q2response_xusdc <= vote_range_values[3],  {\cf22 "Response 2 (XUSDC mint fee) is out of range"});\par
196     check(q3response >= HARD_EXCHANGE_RATE_FLOOR && q3response <= locking_threshold_upper_limit,   {\cf22 "Response 3 is out of range"});\par
197     check(q4response == {\cf22 "POOL"} || q4response == {\cf22 "BURN"},  {\cf22 "Response 4 must be 'POOL' or 'BURN'"});\par
198     check(q5response >= vote_range_values[4] && q5response <= vote_range_values[5],  {\cf22 "Response 5 is out of range"});\par
199     check(q6choice1 >= 1 && q6choice1 <= 6,     {\cf22 "Response 6 choice 1 must be a number between 1 and 6"});\par
200     check(q6choice2 >= 1 && q6choice2 <= 6,     {\cf22 "Response 6 choice 2 must be a number between 1 and 6"});\par
201     check(q6choice3 >= 1 && q6choice3 <= 6,     {\cf22 "Response 6 choice 3 must be a number between 1 and 6"});\par
202 \par
203     {\cf20 // response 6 - the 3 choices must not contain duplicates}\par
204     check((q6choice1 != q6choice2) && (q6choice2 != q6choice3) && (q6choice3 != q6choice1), {\cf22 "Response 6 has duplicate values"});\par
205 \par
206     {\cf20 // store the responses}\par
207     vote_index vote_table(get_self(), get_self().value);\par
208     {\cf17 auto} vote_iterator = vote_table.begin();\par
209     check(vote_iterator != vote_table.end(), {\cf22 "vote record is not defined"});\par
210 \par
211     {\cf20 // process the responses from the user}\par
212     {\cf20 // for multiple choice options, increment to add the user's selection}\par
213     {\cf20 // for running averages, compute new running average}\par
214     vote_table.modify(vote_iterator, get_self(), [&]({\cf17 auto} &vote) \{\par
215 \par
216         {\cf20 // question 1}\par
217         vote.q1average = ((vote.q1average * vote.participants) + q1response) / (vote.participants + 1);\par
218 \par
219         {\cf20 // question 2}\par
220         vote.q2average = ((vote.q2average * vote.participants) + q2response) / (vote.participants + 1);\par
221         vote.q2average_xpr = ((vote.q2average_xpr * vote.participants) + q2response_xpr) / (vote.participants + 1);\par
222         vote.q2average_xusdc = ((vote.q2average_xusdc * vote.participants) + q2response_xusdc) / (vote.participants + 1);\par
223 \par
224         {\cf20 // question 3}\par
225         vote.q3average = ((vote.q3average * vote.participants) + q3response) / (vote.participants + 1);\par
226 \par
227         {\cf20 // question 4}\par
228         {\cf19 if} (q4response == {\cf22 "POOL"}) \{\par
229             vote.q4choice1++;\par
230         \} {\cf19 else} \{\par
231             vote.q4choice2++;\par
232         \}\par
233 \par
234         {\cf20 // question 5}\par
235         vote.q5average = ((vote.q5average * vote.participants) + q5response) / (vote.participants + 1);\par
236         \par
237         {\cf20 // question 6 - need to iterate the list of choices}\par
238         uint8_t q6choices[3] = \{ q6choice1, q6choice2, q6choice3 \};\par
239         uint8_t points[3] = \{ 3,2,1 \};  {\cf20 // points to distribute for 1st, 2nd, 3rd choices}\par
240 \par
241         {\cf19 for} ({\cf18 size_t} i = 0; i < {\cf17 sizeof}(q6choices); i++) \{\par
242             {\cf19 switch}(q6choices[i]) \{\par
243                 {\cf19 case} 1:\par
244                     vote.q6choice1 += points[i];\par
245                     {\cf19 break};\par
246                 {\cf19 case} 2:\par
247                     vote.q6choice2 += points[i];\par
248                     {\cf19 break};\par
249                 {\cf19 case} 3:\par
250                     vote.q6choice3 += points[i];\par
251                     {\cf19 break};\par
252                 {\cf19 case} 4:\par
253                     vote.q6choice4 += points[i];\par
254                     {\cf19 break};\par
255                 {\cf19 case} 5:\par
256                     vote.q6choice5 += points[i];\par
257                     {\cf19 break};\par
258                 {\cf19 case} 6:\par
259                     vote.q6choice6 += points[i];\par
260                     {\cf19 break};\par
261             \}\par
262         \}        \par
263 \par
264         {\cf20 // update the number of participants}\par
265         vote.participants += 1;\par
266 \par
267     \}); {\cf20 // end of modify}\par
268 \par
269     {\cf20 // record that the user has responded to this iteration's vote}\par
270     uint32_t survey_completed = 0;\par
271     svrs_table.modify(svr_iterator, get_self(), [&]({\cf17 auto} &svr) \{\par
272         {\cf19 switch} (this_iteration % 5) \{\par
273             {\cf19 case} 0: svr.vote0 = this_iteration; survey_completed = svr.survey0; {\cf19 break};\par
274             {\cf19 case} 1: svr.vote1 = this_iteration; survey_completed = svr.survey1; {\cf19 break};\par
275             {\cf19 case} 2: svr.vote2 = this_iteration; survey_completed = svr.survey2; {\cf19 break};\par
276             {\cf19 case} 3: svr.vote3 = this_iteration; survey_completed = svr.survey3; {\cf19 break};\par
277             {\cf19 case} 4: svr.vote4 = this_iteration; survey_completed = svr.survey4; {\cf19 break};\par
278         \}\par
279     \}); {\cf20 // end of modify}\par
280 \par
281     {\cf20 // increment the number of participants in this iteration...}\par
282     {\cf20 // ... unless they have completed survey, in which case they have already been counted}\par
283     {\cf19 if} (survey_completed != this_iteration) \{\par
284         {\cf20 // increment the number of participants in this iteration}\par
285         system_index system_table(get_self(), get_self().value);\par
286         {\cf17 auto} system_iterator = system_table.begin();\par
287         check(system_iterator != system_table.end(), {\cf22 "system record is undefined"});\par
288         system_table.modify(system_iterator, get_self(), [&]({\cf17 auto} &s) \{\par
289             s.participants += 1;\par
290         \});\par
291     \}\par
292 \par
293     {\cf20 // update the votes counter in the user's participant record}\par
294     participants_index participants_table(get_self(), user.value);\par
295     {\cf17 auto} participant_iterator = participants_table.begin();\par
296     check(participant_iterator != participants_table.end(), {\cf22 "participant record not found"});\par
297     participants_table.modify(participant_iterator, get_self(), [&]({\cf17 auto} &p) \{\par
298         p.votes += 1;\par
299     \});\par
300 \par
301 \}\par
302  {\cf20 // end of vote group}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
