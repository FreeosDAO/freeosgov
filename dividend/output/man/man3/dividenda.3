.TH "dividenda" 3 "Fri May 21 2021" "Dividend" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dividenda \- dividenda contract
.SH SYNOPSIS
.br
.PP
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBroi_target_cap\fP { \fBITERATION\fP =1, \fBHORIZONTAL\fP =2, \fBVERTICAL\fP =3 }"
.br
.RI "1- iterative 2- horizontal 3- vertical "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBupsert\fP (uint8_t \fBrole_type\fP, name role_acct)"
.br
.RI "The table 'white_list' is used by the action to define the context for the proposal creation and voting (Its defines who is the proposer and the two voters along with storing temporalily vote(s) casted by a given voter on the current proposal (used only by the action 'proposalvote')\&. "
.ti -1c
.RI "void \fBremove\fP (name role_acct)"
.br
.ti -1c
.RI "void \fBdryrun\fP (name proposername)"
.br
.ti -1c
.RI "void \fBproposalnew\fP (const name proposername, const name eosaccount, const uint8_t \fBroi_target_cap\fP, const double period_percentage, const asset threshold, const uint32_t rates_left, const bool locked)"
.br
.ti -1c
.RI "void \fBproposalvote\fP (const name votername, const uint8_t vote)"
.br
.RI "Note: Second vote (if also positive) will mint the new proposed nft\&. The proposal in that case will be erased with writing 'lastaccepted' in the proposal eosaccount field\&. 
.br
 Before writing new nft the function \fBreplay()\fP is called to process remaining iterations If proposal was not accepted is also erased with writing 'lastrefused' in the proposal eosaccount field\&. 
.br
 There is not allowed (and verified) second voting for the same proposer\&. "
.ti -1c
.RI "void \fBpropreset\fP (name proposername)"
.br
.RI "The erased proposal will have written in the field eosaccount the text 'erased'\&. The nftkey in proposal record remains unchanged\&. "
.ti -1c
.RI "void \fBremovewhite\fP ()"
.br
.RI "This action should be considered to run only in testing or in case of administrative changes in OPTIONSDAO\&. "
.ti -1c
.RI "void \fBregchown\fP (name userfrom, name userto, uint64_t nft_id)"
.br
.ti -1c
.RI "void \fBreplay\fP ()"
.br
.ti -1c
.RI "void \fBdividcompute\fP ()"
.br
.ti -1c
.RI "void \fBunlocknft\fP (uint64_t nft_id)"
.br
.ti -1c
.RI "void \fBquery\fP (name eosaccount)"
.br
.ti -1c
.RI "void \fBnotify_front\fP (uint8_t number)"
.br
.ti -1c
.RI "void \fBclearfront\fP ()"
.br
.ti -1c
.RI "void \fBversion\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "CONTRACT \fBdividenda\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
dividenda contract
.PP
dividenda contract read profit cumulated on contract account coming from different sources\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum uint8_t \fBroi_target_cap\fP"

.PP
1- iterative 2- horizontal 3- vertical 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIITERATION \fP\fP
.TP
\fB\fIHORIZONTAL \fP\fP
.TP
\fB\fIVERTICAL \fP\fP
.SH "Function Documentation"
.PP 
.SS "void dividenda::clearfront ()"
clearfront function
.PP
Clearing content of notify_front\&. Called when new proposal is created\&. 
.SS "void dividenda::dividcompute ()"
dividcompute action
.PP
The wrapper for the \fBreplay()\fP function allowing to call it as an action\&. 
.SS "void dividenda::dryrun (name proposername)"
dryrun action
.PP
This action perform analytics related to the dividend percentage only\&. The action is showing what is 
.br
 the total percentage of dividends paid in each iteration (it will be the same for each) with breakdown into categories (like iterative, horizontal, and vertical roi caps)\&. Additionally, it showing cumulative percentage of dividends paid for each person as each person may have several nftxs\&.
.PP
All of this is counted on a basis of all active at this moment nft's\&. nft's with rates paid already paid (cap=1) or nft's completely paid due to total accrued above threshold value (cap=2) are not counted\&. Cap=3 founders nft's which are temporarily locked are counted as soon they will be paid again\&. 
.br
 Additional information on list of already fully paid nft's is displayed by the front-end\&.
.PP
\fBParameters\fP
.RS 4
\fIproposername\fP - account name of the proposer
.br
\fI<a\fP href='first name used by the bloks\&.io and eosstudio, second name used in the code'>out
.IP "\(bu" 2
ewstable table - displays cummulative percentage of active nft's on a basis of cap category
.IP "\(bu" 2
dryruns table - displays cumulative percentage of active nft's on a basis of each user nft's\&. 
.br

.PP
.RE
.PP
\fBPrecondition\fP
.RS 4
required any VIP account listed on whitelist\&. 
.br
 
.RE
.PP

.SS "void dividenda::notify_front (uint8_t number)"
notify_front function
.PP
Used to transmit non-critical error messages and warnings to be interpreted by the front end\&. 
.PP
\fBParameters\fP
.RS 4
\fInumber\fP - one of the numeric const defined in \fBdividend\&.hpp\fP\&. Each time when notify_front is called the 
.br
 given number is added to the queue (a vector)\&. The vector is read by the front end\&. The vector can be erased by the clearfront function called when new proposal is created\&. 
.RE
.PP

.SS "void dividenda::proposalnew (const name proposername, const name eosaccount, const uint8_t roi_target_cap, const double period_percentage, const asset threshold, const uint32_t rates_left, const bool locked)"
proposalnew action (proposal new)
.PP
Creates new proposal\&. The proposal record (if accepted) becomes a base to mint new nft\&. 
.PP
\fBParameters\fP
.RS 4
\fIproposer\fP - The account name of a person eligible to create new proposal\&. 
.br
\fIeosaccount\fP - The account name of future owner of new proposed nft (investor or founder)\&. 
.br
 
.br
\fIroi_target_cap\fP - Type of Dividend Policy (cap roi): 1- 2- 3- (above 3 not accepted)\&. 
.br
\fIperiod_percentage\fP - Pre-agreed percentage of weekly dividend which will be transfered to eosaccount\&. 
.br
\fIthreshold\fP - Upper limit for dividend payment ( if roi=1 threshold ignored, if roi=2 threshold cummulative, if roi=3 threshold for iteration)\&. 
.br
\fIrates_left\fP - Number of iteration dividend left to pay before this nft becomes inactive\&. (used only for roi=1, for roi=2 and roi=3 ignored - enter 0 or above)\&. 
.br
\fIlocked\fP - Lock of payments (only for roi=3)\&.
.RE
.PP
\fBPrecondition\fP
.RS 4
requires proposer permission 
.RE
.PP

.PP
\fBParameters\fP
.RS 4
\fIeosaccount\fP OPTION account used to receive dividends and for user identification 
.br
\fIlocked\fP lock dividends for selected new founders\&. Note: When unlock cannot be locked again\&. 
.RE
.PP

.SS "void dividenda::proposalvote (const name votername, const uint8_t vote)"

.PP
Note: Second vote (if also positive) will mint the new proposed nft\&. The proposal in that case will be erased with writing 'lastaccepted' in the proposal eosaccount field\&. 
.br
 Before writing new nft the function \fBreplay()\fP is called to process remaining iterations If proposal was not accepted is also erased with writing 'lastrefused' in the proposal eosaccount field\&. 
.br
 There is not allowed (and verified) second voting for the same proposer\&. proposalvote action\&.
.PP
Voting for acceptance or not) the new proposal\&. 
.br
 
.PP
\fBParameters\fP
.RS 4
\fIvotername\fP - The voter name (must be white_list listed account with role_type 2 or 3, proposer not allowed)\&. 
.br
\fIvote\fP - The vote: 0 - ignored/no vote, 1 - no, 2 - yes/accept\&.
.RE
.PP
\fBPrecondition\fP
.RS 4
requires voter permission 
.RE
.PP

.SS "void dividenda::propreset (name proposername)"

.PP
The erased proposal will have written in the field eosaccount the text 'erased'\&. The nftkey in proposal record remains unchanged\&. propreset action\&.
.PP
Erase and withdraw active proposal
.PP
\fBPrecondition\fP
.RS 4
requires proposer permission 
.RE
.PP

.SS "void dividenda::query (name eosaccount)"
query action (informative only - the action do not change any values)
.PP
\fBParameters\fP
.RS 4
\fIeosaccount\fP - the account which we query\&. This account is returned from frontend wallet as an account of a person who currently is logged on\&. The function return the type of the account to notify_front where is used immediately by the front end to display a correct web page\&.
.RE
.PP
\fBPrecondition\fP
.RS 4
permissions are the same like eosaccount parameter 
.RE
.PP

.SS "void dividenda::regchown (name userfrom, name userto, uint64_t nft_id)"
regchown action\&.
.PP
Changes nft ownership (nft transfer)\&. Set number 2 in message table if nftx_id is not pointing nft belonging to userfrom\&. In that case the action regchown is ignored\&.
.PP
\fBParameters\fP
.RS 4
\fIuserfrom\fP - original nft owner 
.br
\fIuserto\fP - receiver of the nft 
.br
\fInftx_id\fP - the nft key belonging to userfrom
.RE
.PP
\fBPrecondition\fP
.RS 4
requires userfrom permission\&. 
.RE
.PP

.SS "void dividenda::remove (name role_acct)"
remove action
.PP
Removes row from the white_list table pointed by the parameter\&. This allows to enter a new row by the insert action with changed value\&.\&.
.PP
\fBParameters\fP
.RS 4
\fIrole_acct\fP - record with this account name will be removed\&.
.RE
.PP
\fBPrecondition\fP
.RS 4
contract permission is required Note: This action has no entry from the frontend\&. 
.RE
.PP

.PP
\fBParameters\fP
.RS 4
\fIrole_acct\fP remove one item from white_list 
.RE
.PP

.SS "void dividenda::removewhite ()"

.PP
This action should be considered to run only in testing or in case of administrative changes in OPTIONSDAO\&. removewhite action
.PP
Removes the white_list table\&.
.PP
\fBPrecondition\fP
.RS 4
requires contract permission 
.RE
.PP

.SS "void dividenda::replay ()"
replay function
.PP
process dividend sharing for each iteration one by one except the current which is still collecting incoming profits\&. Set up number 1 in the message table if received current iteration number is 0, what is unlikely to happen\&.
.PP
\fBPrecondition\fP
.RS 4
do not need any 
.RE
.PP

.SS "void dividenda::unlocknft (uint64_t nft_id)"
unlocknftx action 
.br
.PP
\fBParameters\fP
.RS 4
\fInftx_id\fP - points nftx which will have removed lock\&. It must be founder owned nftx otherwise action is ignored\&.
.RE
.PP
Removes lock (if any) on nft belonging to a founder\&. If applied to alredy unlocked nft, the action is ignored\&. In that case the number 3 is set in the message table\&. 
.PP
\fBPrecondition\fP
.RS 4
requires contract authorization 
.RE
.PP

.SS "void dividenda::upsert (uint8_t role_type, name role_acct)"

.PP
The table 'white_list' is used by the action to define the context for the proposal creation and voting (Its defines who is the proposer and the two voters along with storing temporalily vote(s) casted by a given voter on the current proposal (used only by the action 'proposalvote')\&. upsert action (updated)
.PP
Creates VIP table defining proposer and voters\&. After filling up the table may be changed only as a whole table\&. Individual changes of rows are not allowed\&. This is assumed multisig to create the table\&.
.PP
Qparam[in] role_type - may be only: 1 for proposer, 2 for voter, 3 for another voter, more not accepted\&. Entering the same number twice is blocked\&. role_acct - corresponding account name of proposer or voters (depending on role type)\&. This will be used to verify permissions on proposal operations performed by another actions\&.
.PP
\fBPrecondition\fP
.RS 4
contract permission is required Note: This action has no entry from the frontend\&. 
.RE
.PP

.PP
\fBParameters\fP
.RS 4
\fIrole_acct\fP insert new item to white_list\&. 
.RE
.PP

.SS "void version ()"
action version
.PP
breaks the action and display string with version number + current iteration number 
.SH "Variable Documentation"
.PP 
.SS "CONTRACT dividenda"

.SH "Author"
.PP 
Generated automatically by Doxygen for Dividend from the source code\&.
